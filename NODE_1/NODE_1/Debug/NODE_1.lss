
NODE_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015c  00800100  00001976  00001a0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001976  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  0080025c  0080025c  00001b66  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b66  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001bc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028da  00000000  00000000  00001e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001173  00000000  00000000  00004752  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015b5  00000000  00000000  000058c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000678  00000000  00000000  00006e7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009e4  00000000  00000000  000074f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012a1  00000000  00000000  00007ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  00009179  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__ctors_end>
       4:	0c 94 16 03 	jmp	0x62c	; 0x62c <__vector_1>
       8:	0c 94 a9 04 	jmp	0x952	; 0x952 <__vector_2>
       c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      10:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      14:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      18:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      1c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      20:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      24:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      28:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      2c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      30:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      34:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      38:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      3c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      40:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      44:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      48:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      4c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      50:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      54:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      58:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      5c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      60:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      64:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      68:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      6c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	d7 00       	.word	0x00d7	; ????
      72:	cf 00       	.word	0x00cf	; ????
      74:	c6 00       	.word	0x00c6	; ????
      76:	bb 00       	.word	0x00bb	; ????
      78:	ae 00       	.word	0x00ae	; ????
      7a:	a1 00       	.word	0x00a1	; ????
      7c:	94 00       	.word	0x0094	; ????
      7e:	87 00       	.word	0x0087	; ????
      80:	82 00       	.word	0x0082	; ????

00000082 <text_quit>:
      82:	51 75 69 74 00                                      Quit.

00000087 <text_placeholder4>:
      87:	70 6c 61 63 65 68 6f 6c 64 65 72 34 00              placeholder4.

00000094 <text_placeholder3>:
      94:	70 6c 61 63 65 68 6f 6c 64 65 72 33 00              placeholder3.

000000a1 <text_placeholder2>:
      a1:	70 6c 61 63 65 68 6f 6c 64 65 72 32 00              placeholder2.

000000ae <text_placeholder1>:
      ae:	70 6c 61 63 65 68 6f 6c 64 65 72 31 00              placeholder1.

000000bb <text_highscores>:
      bb:	48 69 67 68 73 63 6f 72 65 73 00                    Highscores.

000000c6 <text_settings>:
      c6:	53 65 74 74 69 6e 67 73 00                          Settings.

000000cf <text_play>:
      cf:	50 6c 61 79 20 3a 29 00                             Play :).

000000d7 <text_main_menu>:
      d7:	4d 61 69 6e 20 6d 65 6e 75 00                       Main menu.

000000e1 <font8>:
	...
      e9:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
      f9:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     109:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     119:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     129:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     139:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     149:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     159:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     169:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     179:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     189:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     199:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     1a9:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     1b9:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     1c9:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     1d9:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     1e9:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     1f9:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     209:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     219:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     229:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     239:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     249:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     259:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     269:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     279:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     289:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     299:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     2a9:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     2b9:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     2c9:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     2d9:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     2e9:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     2f9:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     309:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     319:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     329:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     339:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     349:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     359:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     369:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     379:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     389:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     399:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     3a9:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     3b9:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     3c9:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000003da <__ctors_end>:
     3da:	11 24       	eor	r1, r1
     3dc:	1f be       	out	0x3f, r1	; 63
     3de:	cf ef       	ldi	r28, 0xFF	; 255
     3e0:	d4 e0       	ldi	r29, 0x04	; 4
     3e2:	de bf       	out	0x3e, r29	; 62
     3e4:	cd bf       	out	0x3d, r28	; 61

000003e6 <__do_copy_data>:
     3e6:	12 e0       	ldi	r17, 0x02	; 2
     3e8:	a0 e0       	ldi	r26, 0x00	; 0
     3ea:	b1 e0       	ldi	r27, 0x01	; 1
     3ec:	e6 e7       	ldi	r30, 0x76	; 118
     3ee:	f9 e1       	ldi	r31, 0x19	; 25
     3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <__do_copy_data+0x10>
     3f2:	05 90       	lpm	r0, Z+
     3f4:	0d 92       	st	X+, r0
     3f6:	ac 35       	cpi	r26, 0x5C	; 92
     3f8:	b1 07       	cpc	r27, r17
     3fa:	d9 f7       	brne	.-10     	; 0x3f2 <__do_copy_data+0xc>

000003fc <__do_clear_bss>:
     3fc:	22 e0       	ldi	r18, 0x02	; 2
     3fe:	ac e5       	ldi	r26, 0x5C	; 92
     400:	b2 e0       	ldi	r27, 0x02	; 2
     402:	01 c0       	rjmp	.+2      	; 0x406 <.do_clear_bss_start>

00000404 <.do_clear_bss_loop>:
     404:	1d 92       	st	X+, r1

00000406 <.do_clear_bss_start>:
     406:	ad 37       	cpi	r26, 0x7D	; 125
     408:	b2 07       	cpc	r27, r18
     40a:	e1 f7       	brne	.-8      	; 0x404 <.do_clear_bss_loop>
     40c:	0e 94 cd 04 	call	0x99a	; 0x99a <main>
     410:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <_exit>

00000414 <__bad_interrupt>:
     414:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000418 <ADC_Init>:

uint8_t BUSY_flag = 0;

void ADC_Init(void){

    TCCR1A = (1<<COM1A1)|(1<<WGM11);  // Clear OCnA/OCnB on Compare Match, set OCnA/OCnB at TOP.
     418:	82 e8       	ldi	r24, 0x82	; 130
     41a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10);   // Fast PWM, TOP=ICRn, Update OCRnx on TOP. // Prescaler = 1
     41c:	89 e1       	ldi	r24, 0x19	; 25
     41e:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 5;
     420:	85 e0       	ldi	r24, 0x05	; 5
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	95 bd       	out	0x25, r25	; 37
     426:	84 bd       	out	0x24, r24	; 36
	OCR1A = 2;  // 50% Duty Cycle, ~0,8Mhz
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	9b bd       	out	0x2b, r25	; 43
     42e:	8a bd       	out	0x2a, r24	; 42
	DDRB &= ~(1<<PB2);
     430:	87 b3       	in	r24, 0x17	; 23
     432:	8b 7f       	andi	r24, 0xFB	; 251
     434:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<PB2);
     436:	88 b3       	in	r24, 0x18	; 24
     438:	84 60       	ori	r24, 0x04	; 4
     43a:	88 bb       	out	0x18, r24	; 24
	//SFIOR &= ~(1<<PUD);
	
	DDRD |= (1<<PD5);
     43c:	81 b3       	in	r24, 0x11	; 17
     43e:	80 62       	ori	r24, 0x20	; 32
     440:	81 bb       	out	0x11, r24	; 17
     442:	08 95       	ret

00000444 <ADC_read>:

}

uint8_t ADC_read(uint8_t channel){
     444:	0f 93       	push	r16
     446:	1f 93       	push	r17
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	d8 2f       	mov	r29, r24
	
	volatile *adc_in = (char *) ADC_ADDRESS;
	
	uint8_t data_x, data_y, data_ls, data_rs;
	
	adc_in[0] = 0x00;
     44e:	10 92 01 14 	sts	0x1401, r1	; 0x801401 <__bss_end+0x1184>
     452:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <__bss_end+0x1183>
	
	//sei();

	GICR |= (1<<INT0);
     456:	8b b7       	in	r24, 0x3b	; 59
     458:	80 64       	ori	r24, 0x40	; 64
     45a:	8b bf       	out	0x3b, r24	; 59
	while(!BUSY_flag){};
     45c:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <__data_end>
     460:	88 23       	and	r24, r24
     462:	e1 f3       	breq	.-8      	; 0x45c <ADC_read+0x18>
	GICR &= ~(1<<INT0);
     464:	8b b7       	in	r24, 0x3b	; 59
     466:	8f 7b       	andi	r24, 0xBF	; 191
     468:	8b bf       	out	0x3b, r24	; 59
	
	//cli();
	
	data_x = XMEM_read(0x400);
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	94 e0       	ldi	r25, 0x04	; 4
     46e:	0e 94 04 08 	call	0x1008	; 0x1008 <XMEM_read>
     472:	18 2f       	mov	r17, r24
	data_y = XMEM_read(0x400);
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	94 e0       	ldi	r25, 0x04	; 4
     478:	0e 94 04 08 	call	0x1008	; 0x1008 <XMEM_read>
     47c:	c8 2f       	mov	r28, r24
	data_ls = XMEM_read(0x400);
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	94 e0       	ldi	r25, 0x04	; 4
     482:	0e 94 04 08 	call	0x1008	; 0x1008 <XMEM_read>
     486:	08 2f       	mov	r16, r24
	data_rs = XMEM_read(0x400);
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	94 e0       	ldi	r25, 0x04	; 4
     48c:	0e 94 04 08 	call	0x1008	; 0x1008 <XMEM_read>
	
	switch (channel){
     490:	d1 30       	cpi	r29, 0x01	; 1
     492:	59 f0       	breq	.+22     	; 0x4aa <ADC_read+0x66>
     494:	40 f0       	brcs	.+16     	; 0x4a6 <ADC_read+0x62>
     496:	d2 30       	cpi	r29, 0x02	; 2
     498:	19 f0       	breq	.+6      	; 0x4a0 <ADC_read+0x5c>
     49a:	d3 30       	cpi	r29, 0x03	; 3
     49c:	39 f0       	breq	.+14     	; 0x4ac <ADC_read+0x68>
     49e:	02 c0       	rjmp	.+4      	; 0x4a4 <ADC_read+0x60>
			break;
		case 1:
			return data_y;
			break;
		case 2:
			return data_ls;
     4a0:	80 2f       	mov	r24, r16
     4a2:	04 c0       	rjmp	.+8      	; 0x4ac <ADC_read+0x68>
			break;
		default:
			break;
	}
	
}
     4a4:	03 c0       	rjmp	.+6      	; 0x4ac <ADC_read+0x68>
	data_ls = XMEM_read(0x400);
	data_rs = XMEM_read(0x400);
	
	switch (channel){
		case 0:
			return data_x;
     4a6:	81 2f       	mov	r24, r17
     4a8:	01 c0       	rjmp	.+2      	; 0x4ac <ADC_read+0x68>
			break;
		case 1:
			return data_y;
     4aa:	8c 2f       	mov	r24, r28
			break;
		default:
			break;
	}
	
}
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	1f 91       	pop	r17
     4b2:	0f 91       	pop	r16
     4b4:	08 95       	ret

000004b6 <ADC_calibrate>:

void ADC_calibrate(void){
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
	offset.x = ADC_read(CHANNEL_X);
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	0e 94 22 02 	call	0x444	; 0x444 <ADC_read>
     4c0:	c1 e6       	ldi	r28, 0x61	; 97
     4c2:	d2 e0       	ldi	r29, 0x02	; 2
     4c4:	88 83       	st	Y, r24
	offset.y = ADC_read(CHANNEL_Y);
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	0e 94 22 02 	call	0x444	; 0x444 <ADC_read>
     4cc:	89 83       	std	Y+1, r24	; 0x01
	printf("x offset: %d, y offset: %d\n\r", offset.x, offset.y);
     4ce:	98 81       	ld	r25, Y
     4d0:	1f 92       	push	r1
     4d2:	8f 93       	push	r24
     4d4:	1f 92       	push	r1
     4d6:	9f 93       	push	r25
     4d8:	87 e0       	ldi	r24, 0x07	; 7
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	9f 93       	push	r25
     4de:	8f 93       	push	r24
     4e0:	0e 94 97 08 	call	0x112e	; 0x112e <printf>
}
     4e4:	0f 90       	pop	r0
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	08 95       	ret

000004f6 <Int_INIT>:

void Int_INIT(void){
	
    GICR |= (1<<INT0);
     4f6:	8b b7       	in	r24, 0x3b	; 59
     4f8:	80 64       	ori	r24, 0x40	; 64
     4fa:	8b bf       	out	0x3b, r24	; 59
	
	MCUCR |= (1<<ISC00);
     4fc:	85 b7       	in	r24, 0x35	; 53
     4fe:	81 60       	ori	r24, 0x01	; 1
     500:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<ISC01);
     502:	85 b7       	in	r24, 0x35	; 53
     504:	82 60       	ori	r24, 0x02	; 2
     506:	85 bf       	out	0x35, r24	; 53
     508:	08 95       	ret

0000050a <adc_get_pos>:
	
	
}

adc_pos adc_get_pos(){
     50a:	1f 93       	push	r17
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
	
	adc_pos pos;
	uint8_t adc_raw[2];

	adc_raw[0] = ADC_read(CHANNEL_X);
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	0e 94 22 02 	call	0x444	; 0x444 <ADC_read>
     516:	c8 2f       	mov	r28, r24
	adc_raw[1] = ADC_read(CHANNEL_Y);
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	0e 94 22 02 	call	0x444	; 0x444 <ADC_read>
     51e:	e8 2f       	mov	r30, r24

	if (adc_raw[0] > offset.x){
     520:	40 91 61 02 	lds	r20, 0x0261	; 0x800261 <offset>
     524:	4c 17       	cp	r20, r28
     526:	98 f4       	brcc	.+38     	; 0x54e <adc_get_pos+0x44>
		pos.x = (adc_raw[0] - offset.x)*100/(ADC_MAX_VALUE - offset.x);
     528:	50 e0       	ldi	r21, 0x00	; 0
     52a:	2c 2f       	mov	r18, r28
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	24 1b       	sub	r18, r20
     530:	35 0b       	sbc	r19, r21
     532:	64 e6       	ldi	r22, 0x64	; 100
     534:	62 9f       	mul	r22, r18
     536:	c0 01       	movw	r24, r0
     538:	63 9f       	mul	r22, r19
     53a:	90 0d       	add	r25, r0
     53c:	11 24       	eor	r1, r1
     53e:	6f ef       	ldi	r22, 0xFF	; 255
     540:	70 e0       	ldi	r23, 0x00	; 0
     542:	64 1b       	sub	r22, r20
     544:	75 0b       	sbc	r23, r21
     546:	0e 94 1d 08 	call	0x103a	; 0x103a <__divmodhi4>
     54a:	16 2f       	mov	r17, r22
     54c:	11 c0       	rjmp	.+34     	; 0x570 <adc_get_pos+0x66>
	}else if(adc_raw[0] < offset.x){
     54e:	c4 17       	cp	r28, r20
     550:	78 f4       	brcc	.+30     	; 0x570 <adc_get_pos+0x66>
		pos.x = -(offset.x - adc_raw[0])*100/offset.x;
     552:	64 2f       	mov	r22, r20
     554:	70 e0       	ldi	r23, 0x00	; 0
     556:	2c 2f       	mov	r18, r28
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	26 1b       	sub	r18, r22
     55c:	37 0b       	sbc	r19, r23
     55e:	44 e6       	ldi	r20, 0x64	; 100
     560:	42 9f       	mul	r20, r18
     562:	c0 01       	movw	r24, r0
     564:	43 9f       	mul	r20, r19
     566:	90 0d       	add	r25, r0
     568:	11 24       	eor	r1, r1
     56a:	0e 94 1d 08 	call	0x103a	; 0x103a <__divmodhi4>
     56e:	16 2f       	mov	r17, r22
	}

	if (adc_raw[1] > offset.y){
     570:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <offset+0x1>
     574:	2e 17       	cp	r18, r30
     576:	90 f4       	brcc	.+36     	; 0x59c <adc_get_pos+0x92>
		pos.y = (adc_raw[1] - offset.y)*100/(ADC_MAX_VALUE - offset.y);
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	e2 1b       	sub	r30, r18
     57e:	f3 0b       	sbc	r31, r19
     580:	44 e6       	ldi	r20, 0x64	; 100
     582:	4e 9f       	mul	r20, r30
     584:	c0 01       	movw	r24, r0
     586:	4f 9f       	mul	r20, r31
     588:	90 0d       	add	r25, r0
     58a:	11 24       	eor	r1, r1
     58c:	6f ef       	ldi	r22, 0xFF	; 255
     58e:	70 e0       	ldi	r23, 0x00	; 0
     590:	62 1b       	sub	r22, r18
     592:	73 0b       	sbc	r23, r19
     594:	0e 94 1d 08 	call	0x103a	; 0x103a <__divmodhi4>
     598:	d6 2f       	mov	r29, r22
     59a:	11 c0       	rjmp	.+34     	; 0x5be <adc_get_pos+0xb4>
	}else if(adc_raw[1] < offset.y){
     59c:	e2 17       	cp	r30, r18
     59e:	78 f4       	brcc	.+30     	; 0x5be <adc_get_pos+0xb4>
		pos.y = -(offset.y - adc_raw[1])*100/offset.y;
     5a0:	62 2f       	mov	r22, r18
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	2e 2f       	mov	r18, r30
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	26 1b       	sub	r18, r22
     5aa:	37 0b       	sbc	r19, r23
     5ac:	44 e6       	ldi	r20, 0x64	; 100
     5ae:	42 9f       	mul	r20, r18
     5b0:	c0 01       	movw	r24, r0
     5b2:	43 9f       	mul	r20, r19
     5b4:	90 0d       	add	r25, r0
     5b6:	11 24       	eor	r1, r1
     5b8:	0e 94 1d 08 	call	0x103a	; 0x103a <__divmodhi4>
     5bc:	d6 2f       	mov	r29, r22
	}

	return pos;

}
     5be:	81 2f       	mov	r24, r17
     5c0:	9d 2f       	mov	r25, r29
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	1f 91       	pop	r17
     5c8:	08 95       	ret

000005ca <adc_get_dir>:

adc_dir adc_get_dir(adc_pos pos){

	if(abs(pos.y) >= ADC_THRESHHOLD){
     5ca:	29 2f       	mov	r18, r25
     5cc:	09 2e       	mov	r0, r25
     5ce:	00 0c       	add	r0, r0
     5d0:	33 0b       	sbc	r19, r19
     5d2:	33 23       	and	r19, r19
     5d4:	1c f4       	brge	.+6      	; 0x5dc <adc_get_dir+0x12>
     5d6:	31 95       	neg	r19
     5d8:	21 95       	neg	r18
     5da:	31 09       	sbc	r19, r1
     5dc:	2a 30       	cpi	r18, 0x0A	; 10
     5de:	31 05       	cpc	r19, r1
     5e0:	2c f0       	brlt	.+10     	; 0x5ec <adc_get_dir+0x22>
		if(pos.y >= ADC_THRESHHOLD){
     5e2:	9a 30       	cpi	r25, 0x0A	; 10
     5e4:	9c f4       	brge	.+38     	; 0x60c <adc_get_dir+0x42>
			return UP;
		}else if(pos.y <= (-ADC_THRESHHOLD)){
     5e6:	97 3f       	cpi	r25, 0xF7	; 247
     5e8:	9c f0       	brlt	.+38     	; 0x610 <adc_get_dir+0x46>
     5ea:	0f c0       	rjmp	.+30     	; 0x60a <adc_get_dir+0x40>
			return DOWN;
		}
	}else if(abs(pos.x) >= ADC_THRESHHOLD){
     5ec:	28 2f       	mov	r18, r24
     5ee:	08 2e       	mov	r0, r24
     5f0:	00 0c       	add	r0, r0
     5f2:	99 0b       	sbc	r25, r25
     5f4:	99 23       	and	r25, r25
     5f6:	1c f4       	brge	.+6      	; 0x5fe <adc_get_dir+0x34>
     5f8:	91 95       	neg	r25
     5fa:	81 95       	neg	r24
     5fc:	91 09       	sbc	r25, r1
     5fe:	0a 97       	sbiw	r24, 0x0a	; 10
     600:	4c f0       	brlt	.+18     	; 0x614 <adc_get_dir+0x4a>
		if(pos.x >= ADC_THRESHHOLD){
     602:	2a 30       	cpi	r18, 0x0A	; 10
     604:	4c f4       	brge	.+18     	; 0x618 <adc_get_dir+0x4e>
			return RIGHT;
		}else if(pos.x <= (-ADC_THRESHHOLD)){
     606:	27 3f       	cpi	r18, 0xF7	; 247
     608:	4c f0       	brlt	.+18     	; 0x61c <adc_get_dir+0x52>
			return LEFT;
		}
	}else{
		return NEUTRAL;
	}
}
     60a:	08 95       	ret

adc_dir adc_get_dir(adc_pos pos){

	if(abs(pos.y) >= ADC_THRESHHOLD){
		if(pos.y >= ADC_THRESHHOLD){
			return UP;
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	08 95       	ret
		}else if(pos.y <= (-ADC_THRESHHOLD)){
			return DOWN;
     610:	82 e0       	ldi	r24, 0x02	; 2
     612:	08 95       	ret
			return RIGHT;
		}else if(pos.x <= (-ADC_THRESHHOLD)){
			return LEFT;
		}
	}else{
		return NEUTRAL;
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	08 95       	ret
		}else if(pos.y <= (-ADC_THRESHHOLD)){
			return DOWN;
		}
	}else if(abs(pos.x) >= ADC_THRESHHOLD){
		if(pos.x >= ADC_THRESHHOLD){
			return RIGHT;
     618:	84 e0       	ldi	r24, 0x04	; 4
     61a:	08 95       	ret
		}else if(pos.x <= (-ADC_THRESHHOLD)){
			return LEFT;
     61c:	83 e0       	ldi	r24, 0x03	; 3
		}
	}else{
		return NEUTRAL;
	}
}
     61e:	08 95       	ret

00000620 <check_js_button>:

uint8_t check_js_button(){
    if(!(PINB & (1<<PB2))) {
     620:	b2 99       	sbic	0x16, 2	; 22
     622:	02 c0       	rjmp	.+4      	; 0x628 <check_js_button+0x8>
		return 1;
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	08 95       	ret
		while(!(PINB & (1<<PB2))){}
    }else{
		return 0;
     628:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     62a:	08 95       	ret

0000062c <__vector_1>:

ISR(INT0_vect){
     62c:	1f 92       	push	r1
     62e:	0f 92       	push	r0
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	0f 92       	push	r0
     634:	11 24       	eor	r1, r1
     636:	8f 93       	push	r24
    BUSY_flag = 1;
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <__data_end>
}
     63e:	8f 91       	pop	r24
     640:	0f 90       	pop	r0
     642:	0f be       	out	0x3f, r0	; 63
     644:	0f 90       	pop	r0
     646:	1f 90       	pop	r1
     648:	18 95       	reti

0000064a <can_handle_msg>:
#include "CANdrv.h"
#include "../MCP2515/MCP2515drv.h"


can_msg can_handle_msg(uint16_t id, uint8_t size, signed char msg_data[8]){
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	dc 01       	movw	r26, r24
     650:	e9 01       	movw	r28, r18
    can_msg msg;
    msg.id = id;
     652:	11 96       	adiw	r26, 0x01	; 1
     654:	7c 93       	st	X, r23
     656:	6e 93       	st	-X, r22
    msg.data_len = size;
     658:	12 96       	adiw	r26, 0x02	; 2
     65a:	4c 93       	st	X, r20
     65c:	12 97       	sbiw	r26, 0x02	; 2
	//printf("her\n\r");
	for(uint8_t i = 0; i < size; i++){
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	0b c0       	rjmp	.+22     	; 0x678 <can_handle_msg+0x2e>
		msg.data[i] = msg_data[i];
     662:	69 2f       	mov	r22, r25
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	fe 01       	movw	r30, r28
     668:	e6 0f       	add	r30, r22
     66a:	f7 1f       	adc	r31, r23
     66c:	30 81       	ld	r19, Z
     66e:	fd 01       	movw	r30, r26
     670:	e6 0f       	add	r30, r22
     672:	f7 1f       	adc	r31, r23
     674:	33 83       	std	Z+3, r19	; 0x03
can_msg can_handle_msg(uint16_t id, uint8_t size, signed char msg_data[8]){
    can_msg msg;
    msg.id = id;
    msg.data_len = size;
	//printf("her\n\r");
	for(uint8_t i = 0; i < size; i++){
     676:	9f 5f       	subi	r25, 0xFF	; 255
     678:	94 17       	cp	r25, r20
     67a:	98 f3       	brcs	.-26     	; 0x662 <can_handle_msg+0x18>
		
	}
	//printf("kis %d og %d\n\r", msg.data[0], msg.data[1]);
    return msg;
	
}
     67c:	cd 01       	movw	r24, r26
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	08 95       	ret

00000684 <can_send_msg>:

void can_send_msg(can_msg* msg, BUFFER buffer){
     684:	df 92       	push	r13
     686:	ef 92       	push	r14
     688:	ff 92       	push	r15
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	1f 92       	push	r1
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	7c 01       	movw	r14, r24
     69a:	d6 2e       	mov	r13, r22

    uint8_t idLSB = (msg->id & 0x7) << 5;
     69c:	fc 01       	movw	r30, r24
     69e:	60 81       	ld	r22, Z
     6a0:	71 81       	ldd	r23, Z+1	; 0x01
     6a2:	16 2f       	mov	r17, r22
     6a4:	12 95       	swap	r17
     6a6:	11 0f       	add	r17, r17
     6a8:	10 7e       	andi	r17, 0xE0	; 224
    uint8_t idMSB = (msg->id & 0x1F) >> 3;
     6aa:	6f 71       	andi	r22, 0x1F	; 31
     6ac:	77 27       	eor	r23, r23
     6ae:	76 95       	lsr	r23
     6b0:	67 95       	ror	r22
     6b2:	76 95       	lsr	r23
     6b4:	67 95       	ror	r22
     6b6:	76 95       	lsr	r23
     6b8:	67 95       	ror	r22
    //uint8_t buffer0stat;

    mcp2515_write(MCP_TXB0SIDH + 16*buffer, idMSB);
     6ba:	0d 2d       	mov	r16, r13
     6bc:	02 95       	swap	r16
     6be:	00 7f       	andi	r16, 0xF0	; 240
     6c0:	81 e3       	ldi	r24, 0x31	; 49
     6c2:	80 0f       	add	r24, r16
     6c4:	0e 94 63 05 	call	0xac6	; 0xac6 <mcp2515_write>
    mcp2515_write(MCP_TXB0SIDL + 16*buffer, idLSB);
     6c8:	61 2f       	mov	r22, r17
     6ca:	82 e3       	ldi	r24, 0x32	; 50
     6cc:	80 0f       	add	r24, r16
     6ce:	0e 94 63 05 	call	0xac6	; 0xac6 <mcp2515_write>
    mcp2515_write(MCP_TXB0DLC + 16*buffer, msg->data_len);
     6d2:	f7 01       	movw	r30, r14
     6d4:	62 81       	ldd	r22, Z+2	; 0x02
     6d6:	85 e3       	ldi	r24, 0x35	; 53
     6d8:	80 0f       	add	r24, r16
     6da:	0e 94 63 05 	call	0xac6	; 0xac6 <mcp2515_write>
	//printf("length: %d\n\r", msg->data_len);

    // Checking if the MCP is already requesting transmission in buffer 0
	uint8_t value;
	mcp2515_read(MCP_TXB0CTRL, &value);
     6de:	be 01       	movw	r22, r28
     6e0:	6f 5f       	subi	r22, 0xFF	; 255
     6e2:	7f 4f       	sbci	r23, 0xFF	; 255
     6e4:	80 e3       	ldi	r24, 0x30	; 48
     6e6:	0e 94 41 05 	call	0xa82	; 0xa82 <mcp2515_read>
	//char* data_bytes = msg->data;
    if((value & 0x08) != 0x08){
     6ea:	89 81       	ldd	r24, Y+1	; 0x01
     6ec:	83 ff       	sbrs	r24, 3
     6ee:	0c c0       	rjmp	.+24     	; 0x708 <can_send_msg+0x84>
     6f0:	14 c0       	rjmp	.+40     	; 0x71a <can_send_msg+0x96>
        for(uint8_t i = 0; i < msg->data_len; i++){
            mcp2515_write(MCP_TXBD0 + 16*buffer + i, msg->data[i]);
     6f2:	f7 01       	movw	r30, r14
     6f4:	e1 0f       	add	r30, r17
     6f6:	f1 1d       	adc	r31, r1
     6f8:	63 81       	ldd	r22, Z+3	; 0x03
     6fa:	81 2f       	mov	r24, r17
     6fc:	80 0f       	add	r24, r16
     6fe:	8a 5c       	subi	r24, 0xCA	; 202
     700:	0e 94 63 05 	call	0xac6	; 0xac6 <mcp2515_write>
    // Checking if the MCP is already requesting transmission in buffer 0
	uint8_t value;
	mcp2515_read(MCP_TXB0CTRL, &value);
	//char* data_bytes = msg->data;
    if((value & 0x08) != 0x08){
        for(uint8_t i = 0; i < msg->data_len; i++){
     704:	1f 5f       	subi	r17, 0xFF	; 255
     706:	01 c0       	rjmp	.+2      	; 0x70a <can_send_msg+0x86>
     708:	10 e0       	ldi	r17, 0x00	; 0
     70a:	f7 01       	movw	r30, r14
     70c:	82 81       	ldd	r24, Z+2	; 0x02
     70e:	18 17       	cp	r17, r24
     710:	80 f3       	brcs	.-32     	; 0x6f2 <can_send_msg+0x6e>
            mcp2515_write(MCP_TXBD0 + 16*buffer + i, msg->data[i]);
			//printf("data %d\n\r", msg->data[i]);
			
        }
		//printf("data %d\n\r", msg->data[2]);
        mcp2515_request_to_send(MCP_RTS_TX0 + buffer);
     712:	81 e8       	ldi	r24, 0x81	; 129
     714:	8d 0d       	add	r24, r13
     716:	0e 94 79 05 	call	0xaf2	; 0xaf2 <mcp2515_request_to_send>
    }
    //printf("id %d\n\r", msg.id);


}
     71a:	0f 90       	pop	r0
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	1f 91       	pop	r17
     722:	0f 91       	pop	r16
     724:	ff 90       	pop	r15
     726:	ef 90       	pop	r14
     728:	df 90       	pop	r13
     72a:	08 95       	ret

0000072c <can_recieve_msg>:


can_msg can_recieve_msg(BUFFER buffer){
     72c:	cf 92       	push	r12
     72e:	df 92       	push	r13
     730:	ff 92       	push	r15
     732:	0f 93       	push	r16
     734:	1f 93       	push	r17
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	00 d0       	rcall	.+0      	; 0x73c <can_recieve_msg+0x10>
     73c:	00 d0       	rcall	.+0      	; 0x73e <can_recieve_msg+0x12>
     73e:	cd b7       	in	r28, 0x3d	; 61
     740:	de b7       	in	r29, 0x3e	; 62
     742:	6c 01       	movw	r12, r24
	//printf("her");
    can_msg msg;
	//printf("buffer%d\n\r", buffer);
    uint8_t idLSB;
	mcp2515_read(MCP_RXB0SIDL + 16*buffer, &idLSB);
     744:	f6 2e       	mov	r15, r22
     746:	ff 0c       	add	r15, r15
     748:	ff 0c       	add	r15, r15
     74a:	ff 0c       	add	r15, r15
     74c:	ff 0c       	add	r15, r15
     74e:	be 01       	movw	r22, r28
     750:	6f 5f       	subi	r22, 0xFF	; 255
     752:	7f 4f       	sbci	r23, 0xFF	; 255
     754:	82 e6       	ldi	r24, 0x62	; 98
     756:	8f 0d       	add	r24, r15
     758:	0e 94 41 05 	call	0xa82	; 0xa82 <mcp2515_read>
    uint8_t idMSB;
	mcp2515_read(MCP_RXB0SIDH + 16*buffer, &idMSB);
     75c:	be 01       	movw	r22, r28
     75e:	6e 5f       	subi	r22, 0xFE	; 254
     760:	7f 4f       	sbci	r23, 0xFF	; 255
     762:	81 e6       	ldi	r24, 0x61	; 97
     764:	8f 0d       	add	r24, r15
     766:	0e 94 41 05 	call	0xa82	; 0xa82 <mcp2515_read>
    uint8_t msg_length;
	mcp2515_read(MCP_RXB0DLC + 16*buffer, &msg_length);
     76a:	be 01       	movw	r22, r28
     76c:	6d 5f       	subi	r22, 0xFD	; 253
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	85 e6       	ldi	r24, 0x65	; 101
     772:	8f 0d       	add	r24, r15
     774:	0e 94 41 05 	call	0xa82	; 0xa82 <mcp2515_read>
	msg_length = msg_length & 0b00001111;
     778:	0b 81       	ldd	r16, Y+3	; 0x03
     77a:	0f 70       	andi	r16, 0x0F	; 15
     77c:	0b 83       	std	Y+3, r16	; 0x03
    msg.id = ((idLSB & 0b11100000) >> 5) | ((idMSB & 0b00011111) << 3);
     77e:	29 81       	ldd	r18, Y+1	; 0x01
     780:	22 95       	swap	r18
     782:	26 95       	lsr	r18
     784:	27 70       	andi	r18, 0x07	; 7
     786:	8a 81       	ldd	r24, Y+2	; 0x02
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	88 0f       	add	r24, r24
     78c:	99 1f       	adc	r25, r25
     78e:	88 0f       	add	r24, r24
     790:	99 1f       	adc	r25, r25
     792:	88 0f       	add	r24, r24
     794:	99 1f       	adc	r25, r25
     796:	99 27       	eor	r25, r25
     798:	82 2b       	or	r24, r18
     79a:	f6 01       	movw	r30, r12
     79c:	91 83       	std	Z+1, r25	; 0x01
     79e:	80 83       	st	Z, r24
    
	//printf("length %d\n\r", msg_length);

    msg.data_len = msg_length;
     7a0:	02 83       	std	Z+2, r16	; 0x02
	
    for(uint8_t i = 0; i < msg.data_len; i++){
     7a2:	10 e0       	ldi	r17, 0x00	; 0
     7a4:	0e c0       	rjmp	.+28     	; 0x7c2 <can_recieve_msg+0x96>
		signed char data_tmp;
		mcp2515_read(MCP_RXBD0 + 16*buffer + i, &data_tmp);
     7a6:	81 2f       	mov	r24, r17
     7a8:	8f 0d       	add	r24, r15
     7aa:	be 01       	movw	r22, r28
     7ac:	6c 5f       	subi	r22, 0xFC	; 252
     7ae:	7f 4f       	sbci	r23, 0xFF	; 255
     7b0:	8a 59       	subi	r24, 0x9A	; 154
     7b2:	0e 94 41 05 	call	0xa82	; 0xa82 <mcp2515_read>
        msg.data[i] = data_tmp;
     7b6:	f6 01       	movw	r30, r12
     7b8:	e1 0f       	add	r30, r17
     7ba:	f1 1d       	adc	r31, r1
     7bc:	8c 81       	ldd	r24, Y+4	; 0x04
     7be:	83 83       	std	Z+3, r24	; 0x03
    
	//printf("length %d\n\r", msg_length);

    msg.data_len = msg_length;
	
    for(uint8_t i = 0; i < msg.data_len; i++){
     7c0:	1f 5f       	subi	r17, 0xFF	; 255
     7c2:	10 17       	cp	r17, r16
     7c4:	80 f3       	brcs	.-32     	; 0x7a6 <can_recieve_msg+0x7a>
        msg.data[i] = data_tmp;
    }

    return msg;

}
     7c6:	c6 01       	movw	r24, r12
     7c8:	0f 90       	pop	r0
     7ca:	0f 90       	pop	r0
     7cc:	0f 90       	pop	r0
     7ce:	0f 90       	pop	r0
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	ff 90       	pop	r15
     7da:	df 90       	pop	r13
     7dc:	cf 90       	pop	r12
     7de:	08 95       	ret

000007e0 <interrupt_handler>:

void interrupt_handler(){
     7e0:	0f 93       	push	r16
     7e2:	1f 93       	push	r17
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	cd b7       	in	r28, 0x3d	; 61
     7ea:	de b7       	in	r29, 0x3e	; 62
     7ec:	66 97       	sbiw	r28, 0x16	; 22
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	f8 94       	cli
     7f2:	de bf       	out	0x3e, r29	; 62
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	cd bf       	out	0x3d, r28	; 61

    uint8_t status = mcp2515_read_status();
     7f8:	0e 94 82 05 	call	0xb04	; 0xb04 <mcp2515_read_status>
     7fc:	08 2f       	mov	r16, r24
    can_msg msg;

    if((status & stat_buff0_r) == stat_buff0_r){
     7fe:	80 ff       	sbrs	r24, 0
     800:	41 c0       	rjmp	.+130    	; 0x884 <interrupt_handler+0xa4>
        msg = can_recieve_msg(BUFFER0);
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	ce 01       	movw	r24, r28
     806:	0c 96       	adiw	r24, 0x0c	; 12
     808:	0e 94 96 03 	call	0x72c	; 0x72c <can_recieve_msg>
     80c:	8b e0       	ldi	r24, 0x0B	; 11
     80e:	fe 01       	movw	r30, r28
     810:	3c 96       	adiw	r30, 0x0c	; 12
     812:	de 01       	movw	r26, r28
     814:	11 96       	adiw	r26, 0x01	; 1
     816:	01 90       	ld	r0, Z+
     818:	0d 92       	st	X+, r0
     81a:	8a 95       	dec	r24
     81c:	e1 f7       	brne	.-8      	; 0x816 <interrupt_handler+0x36>
        printf("BUFFER0: ID = %d, MESSAGE = ", msg.id);
     81e:	8a 81       	ldd	r24, Y+2	; 0x02
     820:	8f 93       	push	r24
     822:	89 81       	ldd	r24, Y+1	; 0x01
     824:	8f 93       	push	r24
     826:	84 e2       	ldi	r24, 0x24	; 36
     828:	91 e0       	ldi	r25, 0x01	; 1
     82a:	9f 93       	push	r25
     82c:	8f 93       	push	r24
     82e:	0e 94 97 08 	call	0x112e	; 0x112e <printf>
        for (uint8_t i = 0; i < msg.data_len; i++){
     832:	0f 90       	pop	r0
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	10 e0       	ldi	r17, 0x00	; 0
     83c:	18 c0       	rjmp	.+48     	; 0x86e <interrupt_handler+0x8e>
            printf("%d ", msg.data[i]);
     83e:	e4 e0       	ldi	r30, 0x04	; 4
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	ec 0f       	add	r30, r28
     844:	fd 1f       	adc	r31, r29
     846:	e1 0f       	add	r30, r17
     848:	f1 1d       	adc	r31, r1
     84a:	80 81       	ld	r24, Z
     84c:	28 2f       	mov	r18, r24
     84e:	08 2e       	mov	r0, r24
     850:	00 0c       	add	r0, r0
     852:	33 0b       	sbc	r19, r19
     854:	3f 93       	push	r19
     856:	8f 93       	push	r24
     858:	81 e4       	ldi	r24, 0x41	; 65
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	9f 93       	push	r25
     85e:	8f 93       	push	r24
     860:	0e 94 97 08 	call	0x112e	; 0x112e <printf>
    can_msg msg;

    if((status & stat_buff0_r) == stat_buff0_r){
        msg = can_recieve_msg(BUFFER0);
        printf("BUFFER0: ID = %d, MESSAGE = ", msg.id);
        for (uint8_t i = 0; i < msg.data_len; i++){
     864:	1f 5f       	subi	r17, 0xFF	; 255
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
     86a:	0f 90       	pop	r0
     86c:	0f 90       	pop	r0
     86e:	8b 81       	ldd	r24, Y+3	; 0x03
     870:	18 17       	cp	r17, r24
     872:	28 f3       	brcs	.-54     	; 0x83e <interrupt_handler+0x5e>
            printf("%d ", msg.data[i]);
        }
        printf("\n\r");
     874:	88 e5       	ldi	r24, 0x58	; 88
     876:	92 e0       	ldi	r25, 0x02	; 2
     878:	9f 93       	push	r25
     87a:	8f 93       	push	r24
     87c:	0e 94 97 08 	call	0x112e	; 0x112e <printf>
     880:	0f 90       	pop	r0
     882:	0f 90       	pop	r0
    }
    
    if((status & stat_buff1_r) == stat_buff1_r){
     884:	01 ff       	sbrs	r16, 1
     886:	41 c0       	rjmp	.+130    	; 0x90a <interrupt_handler+0x12a>
        msg = can_recieve_msg(BUFFER1);
     888:	61 e0       	ldi	r22, 0x01	; 1
     88a:	ce 01       	movw	r24, r28
     88c:	0c 96       	adiw	r24, 0x0c	; 12
     88e:	0e 94 96 03 	call	0x72c	; 0x72c <can_recieve_msg>
     892:	8b e0       	ldi	r24, 0x0B	; 11
     894:	fe 01       	movw	r30, r28
     896:	3c 96       	adiw	r30, 0x0c	; 12
     898:	de 01       	movw	r26, r28
     89a:	11 96       	adiw	r26, 0x01	; 1
     89c:	01 90       	ld	r0, Z+
     89e:	0d 92       	st	X+, r0
     8a0:	8a 95       	dec	r24
     8a2:	e1 f7       	brne	.-8      	; 0x89c <interrupt_handler+0xbc>
        printf("BUFFER1: ID = %d, MESSAGE = ", msg.id);
     8a4:	8a 81       	ldd	r24, Y+2	; 0x02
     8a6:	8f 93       	push	r24
     8a8:	89 81       	ldd	r24, Y+1	; 0x01
     8aa:	8f 93       	push	r24
     8ac:	85 e4       	ldi	r24, 0x45	; 69
     8ae:	91 e0       	ldi	r25, 0x01	; 1
     8b0:	9f 93       	push	r25
     8b2:	8f 93       	push	r24
     8b4:	0e 94 97 08 	call	0x112e	; 0x112e <printf>
        for (uint8_t i = 0; i < msg.data_len; i++){
     8b8:	0f 90       	pop	r0
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	10 e0       	ldi	r17, 0x00	; 0
     8c2:	18 c0       	rjmp	.+48     	; 0x8f4 <interrupt_handler+0x114>
            printf("%d", msg.data[i]);
     8c4:	e4 e0       	ldi	r30, 0x04	; 4
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	ec 0f       	add	r30, r28
     8ca:	fd 1f       	adc	r31, r29
     8cc:	e1 0f       	add	r30, r17
     8ce:	f1 1d       	adc	r31, r1
     8d0:	80 81       	ld	r24, Z
     8d2:	28 2f       	mov	r18, r24
     8d4:	08 2e       	mov	r0, r24
     8d6:	00 0c       	add	r0, r0
     8d8:	33 0b       	sbc	r19, r19
     8da:	3f 93       	push	r19
     8dc:	8f 93       	push	r24
     8de:	82 e6       	ldi	r24, 0x62	; 98
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	9f 93       	push	r25
     8e4:	8f 93       	push	r24
     8e6:	0e 94 97 08 	call	0x112e	; 0x112e <printf>
    }
    
    if((status & stat_buff1_r) == stat_buff1_r){
        msg = can_recieve_msg(BUFFER1);
        printf("BUFFER1: ID = %d, MESSAGE = ", msg.id);
        for (uint8_t i = 0; i < msg.data_len; i++){
     8ea:	1f 5f       	subi	r17, 0xFF	; 255
     8ec:	0f 90       	pop	r0
     8ee:	0f 90       	pop	r0
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
     8f4:	8b 81       	ldd	r24, Y+3	; 0x03
     8f6:	18 17       	cp	r17, r24
     8f8:	28 f3       	brcs	.-54     	; 0x8c4 <interrupt_handler+0xe4>
            printf("%d", msg.data[i]);
        }
        printf("\n\r");
     8fa:	88 e5       	ldi	r24, 0x58	; 88
     8fc:	92 e0       	ldi	r25, 0x02	; 2
     8fe:	9f 93       	push	r25
     900:	8f 93       	push	r24
     902:	0e 94 97 08 	call	0x112e	; 0x112e <printf>
     906:	0f 90       	pop	r0
     908:	0f 90       	pop	r0
        //transmission successfull
    }
    if((status & stat_buff1_tx) == stat_buff1_tx){
        //transmission successfull
    }
    if((status & stat_buff0_busy) == stat_buff0_busy){
     90a:	02 ff       	sbrs	r16, 2
     90c:	08 c0       	rjmp	.+16     	; 0x91e <interrupt_handler+0x13e>
        printf("BUFFER 0 is currently busy \n\r");
     90e:	85 e6       	ldi	r24, 0x65	; 101
     910:	91 e0       	ldi	r25, 0x01	; 1
     912:	9f 93       	push	r25
     914:	8f 93       	push	r24
     916:	0e 94 97 08 	call	0x112e	; 0x112e <printf>
     91a:	0f 90       	pop	r0
     91c:	0f 90       	pop	r0
    }
    if((status & stat_buff1_busy) == stat_buff1_busy){
     91e:	04 ff       	sbrs	r16, 4
     920:	08 c0       	rjmp	.+16     	; 0x932 <interrupt_handler+0x152>
        printf("BUFFER 1 is currently busy \n\r");
     922:	83 e8       	ldi	r24, 0x83	; 131
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	9f 93       	push	r25
     928:	8f 93       	push	r24
     92a:	0e 94 97 08 	call	0x112e	; 0x112e <printf>
     92e:	0f 90       	pop	r0
     930:	0f 90       	pop	r0
    }
   mcp2515_bit_modify(MCP_CANINTF, 0xFF, 0x00); 
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	6f ef       	ldi	r22, 0xFF	; 255
     936:	8c e2       	ldi	r24, 0x2C	; 44
     938:	0e 94 8e 05 	call	0xb1c	; 0xb1c <mcp2515_bit_modify>

}
     93c:	66 96       	adiw	r28, 0x16	; 22
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	de bf       	out	0x3e, r29	; 62
     944:	0f be       	out	0x3f, r0	; 63
     946:	cd bf       	out	0x3d, r28	; 61
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	1f 91       	pop	r17
     94e:	0f 91       	pop	r16
     950:	08 95       	ret

00000952 <__vector_2>:

ISR(INT1_vect){
     952:	1f 92       	push	r1
     954:	0f 92       	push	r0
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	0f 92       	push	r0
     95a:	11 24       	eor	r1, r1
     95c:	2f 93       	push	r18
     95e:	3f 93       	push	r19
     960:	4f 93       	push	r20
     962:	5f 93       	push	r21
     964:	6f 93       	push	r22
     966:	7f 93       	push	r23
     968:	8f 93       	push	r24
     96a:	9f 93       	push	r25
     96c:	af 93       	push	r26
     96e:	bf 93       	push	r27
     970:	ef 93       	push	r30
     972:	ff 93       	push	r31
    interrupt_handler();
     974:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <interrupt_handler>
	//printf("nei\n\r");
     978:	ff 91       	pop	r31
     97a:	ef 91       	pop	r30
     97c:	bf 91       	pop	r27
     97e:	af 91       	pop	r26
     980:	9f 91       	pop	r25
     982:	8f 91       	pop	r24
     984:	7f 91       	pop	r23
     986:	6f 91       	pop	r22
     988:	5f 91       	pop	r21
     98a:	4f 91       	pop	r20
     98c:	3f 91       	pop	r19
     98e:	2f 91       	pop	r18
     990:	0f 90       	pop	r0
     992:	0f be       	out	0x3f, r0	; 63
     994:	0f 90       	pop	r0
     996:	1f 90       	pop	r1
     998:	18 95       	reti

0000099a <main>:
#include "MCP2515/MCP2515drv.h"
//#include "MENU/MENUdrv.h"
#include "CAN/CANdrv.h"

int main(void)
{
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	cd b7       	in	r28, 0x3d	; 61
     9a0:	de b7       	in	r29, 0x3e	; 62
     9a2:	6e 97       	sbiw	r28, 0x1e	; 30
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	f8 94       	cli
     9a8:	de bf       	out	0x3e, r29	; 62
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	cd bf       	out	0x3d, r28	; 61
	USART_Init(MYUBRR);
     9ae:	8f e1       	ldi	r24, 0x1F	; 31
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	0e 94 10 08 	call	0x1020	; 0x1020 <USART_Init>
	XMEM_init();
     9b6:	0e 94 fd 07 	call	0xffa	; 0xffa <XMEM_init>
	Int_INIT();
     9ba:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Int_INIT>
	ADC_Init();
     9be:	0e 94 0c 02 	call	0x418	; 0x418 <ADC_Init>
	oled_init();
     9c2:	0e 94 01 07 	call	0xe02	; 0xe02 <oled_init>
	//ADC_calibrate();
	adc_pos pos;
	adc_dir dir;

	//LAB 5
	mcp2515_init();
     9c6:	0e 94 0f 06 	call	0xc1e	; 0xc1e <mcp2515_init>
	sei();
     9ca:	78 94       	sei
	can_msg melding;
		
	uint8_t game_on = 0;
	ADC_calibrate();
     9cc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <ADC_calibrate>
	//LAB 5
	mcp2515_init();
	sei();
	can_msg melding;
		
	uint8_t game_on = 0;
     9d0:	10 e0       	ldi	r17, 0x00	; 0
	//menu_print_screen();
    while (1) 
    {	
		
		//THE GAME
		if(game_on == 0){
     9d2:	11 11       	cpse	r17, r1
     9d4:	1b c0       	rjmp	.+54     	; 0xa0c <main+0x72>
			update_menu_main_counter();
     9d6:	0e 94 be 06 	call	0xd7c	; 0xd7c <update_menu_main_counter>
			menu_print_screen();
     9da:	0e 94 55 06 	call	0xcaa	; 0xcaa <menu_print_screen>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9de:	2f ef       	ldi	r18, 0xFF	; 255
     9e0:	8f ef       	ldi	r24, 0xFF	; 255
     9e2:	92 e0       	ldi	r25, 0x02	; 2
     9e4:	21 50       	subi	r18, 0x01	; 1
     9e6:	80 40       	sbci	r24, 0x00	; 0
     9e8:	90 40       	sbci	r25, 0x00	; 0
     9ea:	e1 f7       	brne	.-8      	; 0x9e4 <main+0x4a>
     9ec:	00 c0       	rjmp	.+0      	; 0x9ee <main+0x54>
     9ee:	00 c0       	rjmp	.+0      	; 0x9f0 <main+0x56>
			_delay_ms(200);
			uint8_t menu = return_menu_pos();
     9f0:	0e 94 a6 06 	call	0xd4c	; 0xd4c <return_menu_pos>
			if(menu == 1){
     9f4:	81 30       	cpi	r24, 0x01	; 1
     9f6:	69 f7       	brne	.-38     	; 0x9d2 <main+0x38>
				game_on = 1;
				printf("GAME IS ON\n\r");
     9f8:	81 ea       	ldi	r24, 0xA1	; 161
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	9f 93       	push	r25
     9fe:	8f 93       	push	r24
     a00:	0e 94 97 08 	call	0x112e	; 0x112e <printf>
     a04:	0f 90       	pop	r0
     a06:	0f 90       	pop	r0
			update_menu_main_counter();
			menu_print_screen();
			_delay_ms(200);
			uint8_t menu = return_menu_pos();
			if(menu == 1){
				game_on = 1;
     a08:	11 e0       	ldi	r17, 0x01	; 1
     a0a:	e3 cf       	rjmp	.-58     	; 0x9d2 <main+0x38>
				printf("GAME IS ON\n\r");
			}
			//printf("%d", menu);
		}else if(game_on){
     a0c:	11 23       	and	r17, r17
     a0e:	09 f3       	breq	.-62     	; 0x9d2 <main+0x38>
			
			pos = adc_get_pos();
     a10:	0e 94 85 02 	call	0x50a	; 0x50a <adc_get_pos>
     a14:	d8 2e       	mov	r13, r24
     a16:	09 2f       	mov	r16, r25
			uint8_t rs_data = ADC_read(CHANNEL_RS);
     a18:	83 e0       	ldi	r24, 0x03	; 3
     a1a:	0e 94 22 02 	call	0x444	; 0x444 <ADC_read>
     a1e:	c8 2e       	mov	r12, r24
			
			dir	= adc_get_dir(pos);
     a20:	8d 2d       	mov	r24, r13
     a22:	90 2f       	mov	r25, r16
     a24:	0e 94 e5 02 	call	0x5ca	; 0x5ca <adc_get_dir>
			//printf("X pos: %d, Y pos: %d \n\r", pos.x, pos.y);
			//printf("Dir: %d \n\r", dir);
			signed char m[8] = {pos.x, pos.y, check_js_button(), rs_data, game_on};
     a28:	7e 01       	movw	r14, r28
     a2a:	ec e0       	ldi	r30, 0x0C	; 12
     a2c:	ee 0e       	add	r14, r30
     a2e:	f1 1c       	adc	r15, r1
     a30:	88 e0       	ldi	r24, 0x08	; 8
     a32:	f7 01       	movw	r30, r14
     a34:	11 92       	st	Z+, r1
     a36:	8a 95       	dec	r24
     a38:	e9 f7       	brne	.-6      	; 0xa34 <main+0x9a>
     a3a:	dc 86       	std	Y+12, r13	; 0x0c
     a3c:	0d 87       	std	Y+13, r16	; 0x0d
     a3e:	0e 94 10 03 	call	0x620	; 0x620 <check_js_button>
     a42:	8e 87       	std	Y+14, r24	; 0x0e
     a44:	cf 86       	std	Y+15, r12	; 0x0f
     a46:	18 8b       	std	Y+16, r17	; 0x10
			melding = can_handle_msg(0, 5, m);
     a48:	97 01       	movw	r18, r14
     a4a:	45 e0       	ldi	r20, 0x05	; 5
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	ce 01       	movw	r24, r28
     a52:	44 96       	adiw	r24, 0x14	; 20
     a54:	0e 94 25 03 	call	0x64a	; 0x64a <can_handle_msg>
     a58:	8b e0       	ldi	r24, 0x0B	; 11
     a5a:	fe 01       	movw	r30, r28
     a5c:	74 96       	adiw	r30, 0x14	; 20
     a5e:	de 01       	movw	r26, r28
     a60:	11 96       	adiw	r26, 0x01	; 1
     a62:	01 90       	ld	r0, Z+
     a64:	0d 92       	st	X+, r0
     a66:	8a 95       	dec	r24
     a68:	e1 f7       	brne	.-8      	; 0xa62 <main+0xc8>
			can_send_msg(&melding, BUFFER0);
     a6a:	60 e0       	ldi	r22, 0x00	; 0
     a6c:	ce 01       	movw	r24, r28
     a6e:	01 96       	adiw	r24, 0x01	; 1
     a70:	0e 94 42 03 	call	0x684	; 0x684 <can_send_msg>
     a74:	8f ef       	ldi	r24, 0xFF	; 255
     a76:	9f e2       	ldi	r25, 0x2F	; 47
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	f1 f7       	brne	.-4      	; 0xa78 <main+0xde>
     a7c:	00 c0       	rjmp	.+0      	; 0xa7e <main+0xe4>
     a7e:	00 00       	nop
     a80:	a8 cf       	rjmp	.-176    	; 0x9d2 <main+0x38>

00000a82 <mcp2515_read>:

    return 0;
}


void mcp2515_read(uint8_t address, uint8_t *value){
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	18 2f       	mov	r17, r24
     a8a:	eb 01       	movw	r28, r22

    PORTB &= ~(1 << PB4); // Select CAN - controller
     a8c:	88 b3       	in	r24, 0x18	; 24
     a8e:	8f 7e       	andi	r24, 0xEF	; 239
     a90:	88 bb       	out	0x18, r24	; 24

    spi_write_char(MCP_READ); // Send read instruction
     a92:	83 e0       	ldi	r24, 0x03	; 3
     a94:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <spi_write_char>
    spi_write_char(address); // Send address
     a98:	81 2f       	mov	r24, r17
     a9a:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <spi_write_char>
	
    *value = spi_read_char() ; // Read result
     a9e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <spi_read_char>
     aa2:	88 83       	st	Y, r24
	
	//printf("value %d\n\r", value);
    
	PORTB |= (1 << PB4); // Deselect CAN - controller
     aa4:	88 b3       	in	r24, 0x18	; 24
     aa6:	80 61       	ori	r24, 0x10	; 16
     aa8:	88 bb       	out	0x18, r24	; 24
	//*value = result;
}
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	1f 91       	pop	r17
     ab0:	08 95       	ret

00000ab2 <mcp2515_reset>:

void mcp2515_reset(){
    PORTB &= ~(1 << PB4); // Select CAN - controller
     ab2:	88 b3       	in	r24, 0x18	; 24
     ab4:	8f 7e       	andi	r24, 0xEF	; 239
     ab6:	88 bb       	out	0x18, r24	; 24
    spi_write_char(MCP_RESET);   //Write reset bit to SPI
     ab8:	80 ec       	ldi	r24, 0xC0	; 192
     aba:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <spi_write_char>
    PORTB |= (1 << PB4); // Deselect CAN - controller
     abe:	88 b3       	in	r24, 0x18	; 24
     ac0:	80 61       	ori	r24, 0x10	; 16
     ac2:	88 bb       	out	0x18, r24	; 24
     ac4:	08 95       	ret

00000ac6 <mcp2515_write>:
}

void mcp2515_write(uint8_t address, uint8_t data){
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
     aca:	d8 2f       	mov	r29, r24
     acc:	c6 2f       	mov	r28, r22
    PORTB &= ~(1 << PB4); // Select CAN - controller
     ace:	88 b3       	in	r24, 0x18	; 24
     ad0:	8f 7e       	andi	r24, 0xEF	; 239
     ad2:	88 bb       	out	0x18, r24	; 24
    spi_write_char(MCP_WRITE); // Send write instruction
     ad4:	82 e0       	ldi	r24, 0x02	; 2
     ad6:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <spi_write_char>
    spi_write_char(address); // Send address
     ada:	8d 2f       	mov	r24, r29
     adc:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <spi_write_char>
    spi_write_char(data); // Send data
     ae0:	8c 2f       	mov	r24, r28
     ae2:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <spi_write_char>
    PORTB |= (1 << PB4); // Deselect CAN - controller
     ae6:	88 b3       	in	r24, 0x18	; 24
     ae8:	80 61       	ori	r24, 0x10	; 16
     aea:	88 bb       	out	0x18, r24	; 24
}
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	08 95       	ret

00000af2 <mcp2515_request_to_send>:

void mcp2515_request_to_send(uint8_t buffer){
    PORTB &= ~(1 << PB4); // Select CAN - controller
     af2:	98 b3       	in	r25, 0x18	; 24
     af4:	9f 7e       	andi	r25, 0xEF	; 239
     af6:	98 bb       	out	0x18, r25	; 24
    //spi_write_char(MCP_RTS_ALL);   Write RTS bit to SPI
    spi_write_char(buffer);
     af8:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <spi_write_char>
    PORTB |= (1 << PB4); // Deselect CAN - controller
     afc:	88 b3       	in	r24, 0x18	; 24
     afe:	80 61       	ori	r24, 0x10	; 16
     b00:	88 bb       	out	0x18, r24	; 24
     b02:	08 95       	ret

00000b04 <mcp2515_read_status>:
}

uint8_t mcp2515_read_status(){
    uint8_t status;
    PORTB &= ~(1 << PB4); // Select CAN - controller
     b04:	88 b3       	in	r24, 0x18	; 24
     b06:	8f 7e       	andi	r24, 0xEF	; 239
     b08:	88 bb       	out	0x18, r24	; 24
    spi_write_char(MCP_READ_STATUS);   //Write read_status bit to SPI
     b0a:	80 ea       	ldi	r24, 0xA0	; 160
     b0c:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <spi_write_char>
    status = spi_read_char();
     b10:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <spi_read_char>
	PORTB |= (1 << PB4); // Deselect CAN - controller
     b14:	98 b3       	in	r25, 0x18	; 24
     b16:	90 61       	ori	r25, 0x10	; 16
     b18:	98 bb       	out	0x18, r25	; 24

    return status;

}
     b1a:	08 95       	ret

00000b1c <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
     b1c:	1f 93       	push	r17
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	18 2f       	mov	r17, r24
     b24:	d6 2f       	mov	r29, r22
     b26:	c4 2f       	mov	r28, r20
    PORTB &= ~(1 << DD_SS); // Select CAN - controller
     b28:	88 b3       	in	r24, 0x18	; 24
     b2a:	8f 7e       	andi	r24, 0xEF	; 239
     b2c:	88 bb       	out	0x18, r24	; 24
    spi_write_char(MCP_BITMOD);   //Write read_status bit to SPI
     b2e:	85 e0       	ldi	r24, 0x05	; 5
     b30:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <spi_write_char>
    spi_write_char(address); // Send address
     b34:	81 2f       	mov	r24, r17
     b36:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <spi_write_char>
    spi_write_char(mask); // Send mask
     b3a:	8d 2f       	mov	r24, r29
     b3c:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <spi_write_char>
    spi_write_char(data); // Send data
     b40:	8c 2f       	mov	r24, r28
     b42:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <spi_write_char>
    PORTB |= (1 << DD_SS); // Deselect CAN - controller
     b46:	88 b3       	in	r24, 0x18	; 24
     b48:	80 61       	ori	r24, 0x10	; 16
     b4a:	88 bb       	out	0x18, r24	; 24
}
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	1f 91       	pop	r17
     b52:	08 95       	ret

00000b54 <can_interrupt_en>:
}

void can_interrupt_en(){
	
    // making pd3 input
    DDRD &= ~(1<<PD3);
     b54:	81 b3       	in	r24, 0x11	; 17
     b56:	87 7f       	andi	r24, 0xF7	; 247
     b58:	81 bb       	out	0x11, r24	; 17
    // Enablign external interrupt on MCU on INT1
    GICR |= (1<<INT1);
     b5a:	8b b7       	in	r24, 0x3b	; 59
     b5c:	80 68       	ori	r24, 0x80	; 128
     b5e:	8b bf       	out	0x3b, r24	; 59
	
	MCUCR &= ~(1<<ISC10);
     b60:	85 b7       	in	r24, 0x35	; 53
     b62:	8b 7f       	andi	r24, 0xFB	; 251
     b64:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<ISC11);
     b66:	85 b7       	in	r24, 0x35	; 53
     b68:	88 60       	ori	r24, 0x08	; 8
     b6a:	85 bf       	out	0x35, r24	; 53
	
	mcp2515_bit_modify(MCP_CANINTE, 0xFF, 0x0F);
     b6c:	4f e0       	ldi	r20, 0x0F	; 15
     b6e:	6f ef       	ldi	r22, 0xFF	; 255
     b70:	8b e2       	ldi	r24, 0x2B	; 43
     b72:	0e 94 8e 05 	call	0xb1c	; 0xb1c <mcp2515_bit_modify>
     b76:	08 95       	ret

00000b78 <mcp2515_brp_init>:

}

uint8_t mcp2515_brp_init(){
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	1f 92       	push	r1
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
	uint8_t value;
    // SJW<2:0> = 0b000 (0)-> 1 * Tq
    // BRP<5:0> = 0b00100 (4) -> BRP * Tosc
    mcp2515_bit_modify(MCP_CNF1, MCP_CNF1_MASK, MCP_CNF1_VAL);
     b82:	43 e0       	ldi	r20, 0x03	; 3
     b84:	6f ef       	ldi	r22, 0xFF	; 255
     b86:	8a e2       	ldi	r24, 0x2A	; 42
     b88:	0e 94 8e 05 	call	0xb1c	; 0xb1c <mcp2515_bit_modify>
	//printf("value: %d\n\r", value);
    

    // PHSEG1<5:3> = 0b110 (6) -> PS1 = (PHSEG + 1) * Tq
    // PHSEG2<2:0> = 0b001 (1) -> Progseg = (PHSEG2 + 1) * Tq
    mcp2515_bit_modify(MCP_CNF2, MCP_CNF2_MASK, MCP_CNF2_VAL);
     b8c:	41 eb       	ldi	r20, 0xB1	; 177
     b8e:	6f ef       	ldi	r22, 0xFF	; 255
     b90:	89 e2       	ldi	r24, 0x29	; 41
     b92:	0e 94 8e 05 	call	0xb1c	; 0xb1c <mcp2515_bit_modify>
		//printf("value: %d\n\r", value);
    
    
    // PHSEG2<2:0> = 0b101 (5) -> PS2 = (PHSEG2 + 1) * Tq
    mcp2515_bit_modify(MCP_CNF3, MCP_CNF3_MASK, MCP_CNF3_VAL);
     b96:	45 e0       	ldi	r20, 0x05	; 5
     b98:	67 e0       	ldi	r22, 0x07	; 7
     b9a:	88 e2       	ldi	r24, 0x28	; 40
     b9c:	0e 94 8e 05 	call	0xb1c	; 0xb1c <mcp2515_bit_modify>
		//printf("value: %d\n\r", value);
	mcp2515_read(MCP_CNF1, &value);
     ba0:	be 01       	movw	r22, r28
     ba2:	6f 5f       	subi	r22, 0xFF	; 255
     ba4:	7f 4f       	sbci	r23, 0xFF	; 255
     ba6:	8a e2       	ldi	r24, 0x2A	; 42
     ba8:	0e 94 41 05 	call	0xa82	; 0xa82 <mcp2515_read>
	if ((value & MCP_CNF1_MASK) != MCP_CNF1_VAL) {
     bac:	89 81       	ldd	r24, Y+1	; 0x01
     bae:	83 30       	cpi	r24, 0x03	; 3
     bb0:	51 f0       	breq	.+20     	; 0xbc6 <mcp2515_brp_init+0x4e>
		printf ("Wrong CNF1 value !\n\r");
     bb2:	8e ea       	ldi	r24, 0xAE	; 174
     bb4:	91 e0       	ldi	r25, 0x01	; 1
     bb6:	9f 93       	push	r25
     bb8:	8f 93       	push	r24
     bba:	0e 94 97 08 	call	0x112e	; 0x112e <printf>
		return -1;
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	8f ef       	ldi	r24, 0xFF	; 255
     bc4:	28 c0       	rjmp	.+80     	; 0xc16 <mcp2515_brp_init+0x9e>
	}
	
	mcp2515_read(MCP_CNF2, &value);
     bc6:	be 01       	movw	r22, r28
     bc8:	6f 5f       	subi	r22, 0xFF	; 255
     bca:	7f 4f       	sbci	r23, 0xFF	; 255
     bcc:	89 e2       	ldi	r24, 0x29	; 41
     bce:	0e 94 41 05 	call	0xa82	; 0xa82 <mcp2515_read>
	if ((value & MCP_CNF1_MASK) != MCP_CNF2_VAL) {
     bd2:	89 81       	ldd	r24, Y+1	; 0x01
     bd4:	81 3b       	cpi	r24, 0xB1	; 177
     bd6:	51 f0       	breq	.+20     	; 0xbec <mcp2515_brp_init+0x74>
		printf ("Wrong CNF2 value !\n\r");
     bd8:	83 ec       	ldi	r24, 0xC3	; 195
     bda:	91 e0       	ldi	r25, 0x01	; 1
     bdc:	9f 93       	push	r25
     bde:	8f 93       	push	r24
     be0:	0e 94 97 08 	call	0x112e	; 0x112e <printf>
		return -1;
     be4:	0f 90       	pop	r0
     be6:	0f 90       	pop	r0
     be8:	8f ef       	ldi	r24, 0xFF	; 255
     bea:	15 c0       	rjmp	.+42     	; 0xc16 <mcp2515_brp_init+0x9e>
	}
	mcp2515_read(MCP_CNF3, &value);
     bec:	be 01       	movw	r22, r28
     bee:	6f 5f       	subi	r22, 0xFF	; 255
     bf0:	7f 4f       	sbci	r23, 0xFF	; 255
     bf2:	88 e2       	ldi	r24, 0x28	; 40
     bf4:	0e 94 41 05 	call	0xa82	; 0xa82 <mcp2515_read>
    if ((value & MCP_CNF3_MASK) != MCP_CNF3_VAL) {
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	87 70       	andi	r24, 0x07	; 7
     bfc:	85 30       	cpi	r24, 0x05	; 5
     bfe:	51 f0       	breq	.+20     	; 0xc14 <mcp2515_brp_init+0x9c>
        printf ("Wrong CNF3 value !\n\r");
     c00:	88 ed       	ldi	r24, 0xD8	; 216
     c02:	91 e0       	ldi	r25, 0x01	; 1
     c04:	9f 93       	push	r25
     c06:	8f 93       	push	r24
     c08:	0e 94 97 08 	call	0x112e	; 0x112e <printf>
		return -1;
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	8f ef       	ldi	r24, 0xFF	; 255
     c12:	01 c0       	rjmp	.+2      	; 0xc16 <mcp2515_brp_init+0x9e>
    }

    return 0;
     c14:	80 e0       	ldi	r24, 0x00	; 0
}
     c16:	0f 90       	pop	r0
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	08 95       	ret

00000c1e <mcp2515_init>:
#include "../SPI/SPIdrv.h"




uint8_t mcp2515_init(){
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	1f 92       	push	r1
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
    uint8_t value;
	spi_init_master(); // Initialize SPI
     c28:	0e 94 f6 07 	call	0xfec	; 0xfec <spi_init_master>
    mcp2515_reset(); // end reset - command
     c2c:	0e 94 59 05 	call	0xab2	; 0xab2 <mcp2515_reset>
    // Self - testS
	//mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);


	mcp2515_read(MCP_CANSTAT, &value);	//printf("value: %d\n\r", value);
     c30:	be 01       	movw	r22, r28
     c32:	6f 5f       	subi	r22, 0xFF	; 255
     c34:	7f 4f       	sbci	r23, 0xFF	; 255
     c36:	8e e0       	ldi	r24, 0x0E	; 14
     c38:	0e 94 41 05 	call	0xa82	; 0xa82 <mcp2515_read>
	//printf("val %d\n\r", value);
    if ((value & MODE_MASK) != MODE_CONFIG) {
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	80 7e       	andi	r24, 0xE0	; 224
     c40:	80 38       	cpi	r24, 0x80	; 128
     c42:	51 f0       	breq	.+20     	; 0xc58 <mcp2515_init+0x3a>
        printf ("MCP2515 is NOT in config mode after reset !\n\r");
     c44:	8d ee       	ldi	r24, 0xED	; 237
     c46:	91 e0       	ldi	r25, 0x01	; 1
     c48:	9f 93       	push	r25
     c4a:	8f 93       	push	r24
     c4c:	0e 94 97 08 	call	0x112e	; 0x112e <printf>
		return -1;
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	8f ef       	ldi	r24, 0xFF	; 255
     c56:	25 c0       	rjmp	.+74     	; 0xca2 <mcp2515_init+0x84>
    }
	
	
    if(mcp2515_brp_init() < 0){
     c58:	0e 94 bc 05 	call	0xb78	; 0xb78 <mcp2515_brp_init>
        return -2;
    } 
	
    can_interrupt_en();
     c5c:	0e 94 aa 05 	call	0xb54	; 0xb54 <can_interrupt_en>
	//mcp2515_bit_modify(MCP_CANINTF, 0xFF, 0x00);
		
	mcp2515_bit_modify(MCP_RXB0CTRL, 0x60, 0x60);
     c60:	40 e6       	ldi	r20, 0x60	; 96
     c62:	60 e6       	ldi	r22, 0x60	; 96
     c64:	80 e6       	ldi	r24, 0x60	; 96
     c66:	0e 94 8e 05 	call	0xb1c	; 0xb1c <mcp2515_bit_modify>
    mcp2515_bit_modify(MCP_RXB1CTRL, 0x60, 0x60);
     c6a:	40 e6       	ldi	r20, 0x60	; 96
     c6c:	60 e6       	ldi	r22, 0x60	; 96
     c6e:	80 e7       	ldi	r24, 0x70	; 112
     c70:	0e 94 8e 05 	call	0xb1c	; 0xb1c <mcp2515_bit_modify>


	
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     c74:	40 e0       	ldi	r20, 0x00	; 0
     c76:	60 ee       	ldi	r22, 0xE0	; 224
     c78:	8f e0       	ldi	r24, 0x0F	; 15
     c7a:	0e 94 8e 05 	call	0xb1c	; 0xb1c <mcp2515_bit_modify>
	mcp2515_read(MCP_CANSTAT, &value);
     c7e:	be 01       	movw	r22, r28
     c80:	6f 5f       	subi	r22, 0xFF	; 255
     c82:	7f 4f       	sbci	r23, 0xFF	; 255
     c84:	8e e0       	ldi	r24, 0x0E	; 14
     c86:	0e 94 41 05 	call	0xa82	; 0xa82 <mcp2515_read>
	//printf("value: %d\n\r", value);
	if ((value & MODE_MASK) != MODE_NORMAL) {
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	80 7e       	andi	r24, 0xE0	; 224
     c8e:	49 f0       	breq	.+18     	; 0xca2 <mcp2515_init+0x84>
        printf ("MCP2515 is NOT in  NORMAL mode after reset !\n\r");
     c90:	8b e1       	ldi	r24, 0x1B	; 27
     c92:	92 e0       	ldi	r25, 0x02	; 2
     c94:	9f 93       	push	r25
     c96:	8f 93       	push	r24
     c98:	0e 94 97 08 	call	0x112e	; 0x112e <printf>
		return -1;
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	8f ef       	ldi	r24, 0xFF	; 255
    }
	
    return 0;
}
     ca2:	0f 90       	pop	r0
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	08 95       	ret

00000caa <menu_print_screen>:
    TCCR0 |= (1<<CS02);

    //Enables interrupt for Timer 0 on compare match
    TIMSK |= (1<<OCIE0);

    OCR0 = 159;
     caa:	0f 93       	push	r16
     cac:	1f 93       	push	r17
     cae:	cf 93       	push	r28
     cb0:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <menu_main_counter>
     cb4:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <menu_main_counter+0x1>
     cb8:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <menu_main_counter_last>
     cbc:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <menu_main_counter_last+0x1>
     cc0:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <menu_main_counter>
     cc4:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <menu_main_counter+0x1>
     cc8:	04 97       	sbiw	r24, 0x04	; 4
     cca:	6a f4       	brpl	.+26     	; 0xce6 <menu_print_screen+0x3c>
     ccc:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <number_of_strings>
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	ac 01       	movw	r20, r24
     cd4:	99 23       	and	r25, r25
     cd6:	24 f4       	brge	.+8      	; 0xce0 <menu_print_screen+0x36>
     cd8:	44 27       	eor	r20, r20
     cda:	55 27       	eor	r21, r21
     cdc:	48 1b       	sub	r20, r24
     cde:	59 0b       	sbc	r21, r25
     ce0:	c9 01       	movw	r24, r18
     ce2:	84 1b       	sub	r24, r20
     ce4:	95 0b       	sbc	r25, r21
     ce6:	c8 2f       	mov	r28, r24
     ce8:	0e 94 9a 07 	call	0xf34	; 0xf34 <oled_reset>
     cec:	60 e0       	ldi	r22, 0x00	; 0
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	84 e0       	ldi	r24, 0x04	; 4
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	0e 94 6d 07 	call	0xeda	; 0xeda <oled_goto_pos>
     cf8:	8e e3       	ldi	r24, 0x3E	; 62
     cfa:	0e 94 ab 07 	call	0xf56	; 0xf56 <oled_print_char>
     cfe:	0e 94 78 07 	call	0xef0	; 0xef0 <oled_home>
     d02:	00 e0       	ldi	r16, 0x00	; 0
     d04:	10 e0       	ldi	r17, 0x00	; 0
     d06:	1b c0       	rjmp	.+54     	; 0xd3e <menu_print_screen+0x94>
     d08:	c9 30       	cpi	r28, 0x09	; 9
     d0a:	08 f0       	brcs	.+2      	; 0xd0e <menu_print_screen+0x64>
     d0c:	c0 e0       	ldi	r28, 0x00	; 0
     d0e:	60 e1       	ldi	r22, 0x10	; 16
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	c8 01       	movw	r24, r16
     d14:	0e 94 6d 07 	call	0xeda	; 0xeda <oled_goto_pos>
     d18:	ec 2f       	mov	r30, r28
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	ee 0f       	add	r30, r30
     d1e:	ff 1f       	adc	r31, r31
     d20:	e0 59       	subi	r30, 0x90	; 144
     d22:	ff 4f       	sbci	r31, 0xFF	; 255
     d24:	65 91       	lpm	r22, Z+
     d26:	74 91       	lpm	r23, Z
     d28:	83 e6       	ldi	r24, 0x63	; 99
     d2a:	92 e0       	ldi	r25, 0x02	; 2
     d2c:	0e 94 45 08 	call	0x108a	; 0x108a <strcpy_P>
     d30:	83 e6       	ldi	r24, 0x63	; 99
     d32:	92 e0       	ldi	r25, 0x02	; 2
     d34:	0e 94 ca 07 	call	0xf94	; 0xf94 <oled_print>
     d38:	cf 5f       	subi	r28, 0xFF	; 255
     d3a:	0f 5f       	subi	r16, 0xFF	; 255
     d3c:	1f 4f       	sbci	r17, 0xFF	; 255
     d3e:	08 30       	cpi	r16, 0x08	; 8
     d40:	11 05       	cpc	r17, r1
     d42:	14 f3       	brlt	.-60     	; 0xd08 <menu_print_screen+0x5e>
     d44:	cf 91       	pop	r28
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	08 95       	ret

00000d4c <return_menu_pos>:
     d4c:	b2 99       	sbic	0x16, 2	; 22
     d4e:	15 c0       	rjmp	.+42     	; 0xd7a <return_menu_pos+0x2e>
     d50:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <menu_main_counter>
     d54:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <menu_main_counter+0x1>
     d58:	9f 93       	push	r25
     d5a:	8f 93       	push	r24
     d5c:	8a e4       	ldi	r24, 0x4A	; 74
     d5e:	92 e0       	ldi	r25, 0x02	; 2
     d60:	9f 93       	push	r25
     d62:	8f 93       	push	r24
     d64:	0e 94 97 08 	call	0x112e	; 0x112e <printf>
     d68:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <menu_main_counter>
     d6c:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <menu_main_counter+0x1>
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	08 95       	ret
     d7a:	08 95       	ret

00000d7c <update_menu_main_counter>:


}
void update_menu_main_counter(){
    adc_dir var = adc_get_dir(adc_get_pos());
     d7c:	0e 94 85 02 	call	0x50a	; 0x50a <adc_get_pos>
     d80:	0e 94 e5 02 	call	0x5ca	; 0x5ca <adc_get_dir>
    if(var == UP){
     d84:	81 30       	cpi	r24, 0x01	; 1
     d86:	51 f4       	brne	.+20     	; 0xd9c <update_menu_main_counter+0x20>
        menu_main_counter --;
     d88:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <menu_main_counter>
     d8c:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <menu_main_counter+0x1>
     d90:	01 97       	sbiw	r24, 0x01	; 1
     d92:	90 93 60 02 	sts	0x0260, r25	; 0x800260 <menu_main_counter+0x1>
     d96:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <menu_main_counter>
     d9a:	0b c0       	rjmp	.+22     	; 0xdb2 <update_menu_main_counter+0x36>
    }
    else if (var == DOWN){
     d9c:	82 30       	cpi	r24, 0x02	; 2
     d9e:	49 f4       	brne	.+18     	; 0xdb2 <update_menu_main_counter+0x36>
        menu_main_counter ++;
     da0:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <menu_main_counter>
     da4:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <menu_main_counter+0x1>
     da8:	01 96       	adiw	r24, 0x01	; 1
     daa:	90 93 60 02 	sts	0x0260, r25	; 0x800260 <menu_main_counter+0x1>
     dae:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <menu_main_counter>
    }
    if(menu_main_counter > number_of_strings){
     db2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <number_of_strings>
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	20 91 5f 02 	lds	r18, 0x025F	; 0x80025f <menu_main_counter>
     dbc:	30 91 60 02 	lds	r19, 0x0260	; 0x800260 <menu_main_counter+0x1>
     dc0:	82 17       	cp	r24, r18
     dc2:	93 07       	cpc	r25, r19
     dc4:	2c f4       	brge	.+10     	; 0xdd0 <update_menu_main_counter+0x54>
        menu_main_counter = 0;
     dc6:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <menu_main_counter+0x1>
     dca:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <menu_main_counter>
     dce:	0a c0       	rjmp	.+20     	; 0xde4 <update_menu_main_counter+0x68>
	}
    else if(menu_main_counter < 0){
     dd0:	20 91 5f 02 	lds	r18, 0x025F	; 0x80025f <menu_main_counter>
     dd4:	30 91 60 02 	lds	r19, 0x0260	; 0x800260 <menu_main_counter+0x1>
     dd8:	33 23       	and	r19, r19
     dda:	24 f4       	brge	.+8      	; 0xde4 <update_menu_main_counter+0x68>
        menu_main_counter = number_of_strings;
     ddc:	90 93 60 02 	sts	0x0260, r25	; 0x800260 <menu_main_counter+0x1>
     de0:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <menu_main_counter>
    }
    menu_main_counter_last = menu_main_counter;
     de4:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <menu_main_counter>
     de8:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <menu_main_counter+0x1>
     dec:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <menu_main_counter_last+0x1>
     df0:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <menu_main_counter_last>
     df4:	08 95       	ret

00000df6 <oled_write_command>:

    for (int i = 0; i < 5; i++) {
        char column = pgm_read_byte(&font5[character][i]);
        oled_write_data(column);
    }
}
     df6:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xd83>
     dfa:	08 95       	ret

00000dfc <oled_write_data>:
     dfc:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xf83>
     e00:	08 95       	ret

00000e02 <oled_init>:
     e02:	8e ea       	ldi	r24, 0xAE	; 174
     e04:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_write_command>
     e08:	81 ea       	ldi	r24, 0xA1	; 161
     e0a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_write_command>
     e0e:	8a ed       	ldi	r24, 0xDA	; 218
     e10:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_write_command>
     e14:	82 e1       	ldi	r24, 0x12	; 18
     e16:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_write_command>
     e1a:	88 ec       	ldi	r24, 0xC8	; 200
     e1c:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_write_command>
     e20:	88 ea       	ldi	r24, 0xA8	; 168
     e22:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_write_command>
     e26:	8f e3       	ldi	r24, 0x3F	; 63
     e28:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_write_command>
     e2c:	85 ed       	ldi	r24, 0xD5	; 213
     e2e:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_write_command>
     e32:	80 e8       	ldi	r24, 0x80	; 128
     e34:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_write_command>
     e38:	81 e8       	ldi	r24, 0x81	; 129
     e3a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_write_command>
     e3e:	80 e5       	ldi	r24, 0x50	; 80
     e40:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_write_command>
     e44:	89 ed       	ldi	r24, 0xD9	; 217
     e46:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_write_command>
     e4a:	81 e2       	ldi	r24, 0x21	; 33
     e4c:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_write_command>
     e50:	80 e2       	ldi	r24, 0x20	; 32
     e52:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_write_command>
     e56:	82 e0       	ldi	r24, 0x02	; 2
     e58:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_write_command>
     e5c:	8b ed       	ldi	r24, 0xDB	; 219
     e5e:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_write_command>
     e62:	80 e3       	ldi	r24, 0x30	; 48
     e64:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_write_command>
     e68:	8d ea       	ldi	r24, 0xAD	; 173
     e6a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_write_command>
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_write_command>
     e74:	84 ea       	ldi	r24, 0xA4	; 164
     e76:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_write_command>
     e7a:	86 ea       	ldi	r24, 0xA6	; 166
     e7c:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_write_command>
     e80:	8f ea       	ldi	r24, 0xAF	; 175
     e82:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_write_command>
     e86:	80 e2       	ldi	r24, 0x20	; 32
     e88:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_write_command>
     e8c:	82 e0       	ldi	r24, 0x02	; 2
     e8e:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_write_command>
     e92:	08 95       	ret

00000e94 <oled_goto_line>:
     e94:	80 55       	subi	r24, 0x50	; 80
     e96:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_write_command>
     e9a:	08 95       	ret

00000e9c <oled_goto_column>:
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	ec 01       	movw	r28, r24
     ea2:	8f 70       	andi	r24, 0x0F	; 15
     ea4:	90 78       	andi	r25, 0x80	; 128
     ea6:	99 23       	and	r25, r25
     ea8:	24 f4       	brge	.+8      	; 0xeb2 <oled_goto_column+0x16>
     eaa:	01 97       	sbiw	r24, 0x01	; 1
     eac:	80 6f       	ori	r24, 0xF0	; 240
     eae:	9f 6f       	ori	r25, 0xFF	; 255
     eb0:	01 96       	adiw	r24, 0x01	; 1
     eb2:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_write_command>
     eb6:	ce 01       	movw	r24, r28
     eb8:	dd 23       	and	r29, r29
     eba:	0c f4       	brge	.+2      	; 0xebe <oled_goto_column+0x22>
     ebc:	0f 96       	adiw	r24, 0x0f	; 15
     ebe:	95 95       	asr	r25
     ec0:	87 95       	ror	r24
     ec2:	95 95       	asr	r25
     ec4:	87 95       	ror	r24
     ec6:	95 95       	asr	r25
     ec8:	87 95       	ror	r24
     eca:	95 95       	asr	r25
     ecc:	87 95       	ror	r24
     ece:	80 5f       	subi	r24, 0xF0	; 240
     ed0:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_write_command>
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	08 95       	ret

00000eda <oled_goto_pos>:
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
     ede:	eb 01       	movw	r28, r22
     ee0:	0e 94 4a 07 	call	0xe94	; 0xe94 <oled_goto_line>
     ee4:	ce 01       	movw	r24, r28
     ee6:	0e 94 4e 07 	call	0xe9c	; 0xe9c <oled_goto_column>
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	08 95       	ret

00000ef0 <oled_home>:
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	0e 94 6d 07 	call	0xeda	; 0xeda <oled_goto_pos>
     efc:	08 95       	ret

00000efe <oled_clear_line>:
     efe:	0f 93       	push	r16
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	8c 01       	movw	r16, r24
     f08:	60 e0       	ldi	r22, 0x00	; 0
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	0e 94 6d 07 	call	0xeda	; 0xeda <oled_goto_pos>
     f10:	c0 e0       	ldi	r28, 0x00	; 0
     f12:	d0 e0       	ldi	r29, 0x00	; 0
     f14:	04 c0       	rjmp	.+8      	; 0xf1e <oled_clear_line+0x20>
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	0e 94 fe 06 	call	0xdfc	; 0xdfc <oled_write_data>
     f1c:	21 96       	adiw	r28, 0x01	; 1
     f1e:	c0 38       	cpi	r28, 0x80	; 128
     f20:	d1 05       	cpc	r29, r1
     f22:	cc f3       	brlt	.-14     	; 0xf16 <oled_clear_line+0x18>
     f24:	c8 01       	movw	r24, r16
     f26:	0e 94 4a 07 	call	0xe94	; 0xe94 <oled_goto_line>
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	1f 91       	pop	r17
     f30:	0f 91       	pop	r16
     f32:	08 95       	ret

00000f34 <oled_reset>:
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
     f38:	c0 e0       	ldi	r28, 0x00	; 0
     f3a:	d0 e0       	ldi	r29, 0x00	; 0
     f3c:	04 c0       	rjmp	.+8      	; 0xf46 <oled_reset+0x12>
     f3e:	ce 01       	movw	r24, r28
     f40:	0e 94 7f 07 	call	0xefe	; 0xefe <oled_clear_line>
     f44:	21 96       	adiw	r28, 0x01	; 1
     f46:	c8 30       	cpi	r28, 0x08	; 8
     f48:	d1 05       	cpc	r29, r1
     f4a:	cc f3       	brlt	.-14     	; 0xf3e <oled_reset+0xa>
     f4c:	0e 94 78 07 	call	0xef0	; 0xef0 <oled_home>
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	08 95       	ret

00000f56 <oled_print_char>:
     f56:	1f 93       	push	r17
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	10 ee       	ldi	r17, 0xE0	; 224
     f5e:	18 0f       	add	r17, r24
     f60:	c0 e0       	ldi	r28, 0x00	; 0
     f62:	d0 e0       	ldi	r29, 0x00	; 0
     f64:	10 c0       	rjmp	.+32     	; 0xf86 <oled_print_char+0x30>
     f66:	e1 2f       	mov	r30, r17
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	ee 0f       	add	r30, r30
     f6c:	ff 1f       	adc	r31, r31
     f6e:	ee 0f       	add	r30, r30
     f70:	ff 1f       	adc	r31, r31
     f72:	ee 0f       	add	r30, r30
     f74:	ff 1f       	adc	r31, r31
     f76:	ec 0f       	add	r30, r28
     f78:	fd 1f       	adc	r31, r29
     f7a:	ef 51       	subi	r30, 0x1F	; 31
     f7c:	ff 4f       	sbci	r31, 0xFF	; 255
     f7e:	84 91       	lpm	r24, Z
     f80:	0e 94 fe 06 	call	0xdfc	; 0xdfc <oled_write_data>
     f84:	21 96       	adiw	r28, 0x01	; 1
     f86:	c8 30       	cpi	r28, 0x08	; 8
     f88:	d1 05       	cpc	r29, r1
     f8a:	6c f3       	brlt	.-38     	; 0xf66 <oled_print_char+0x10>
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	1f 91       	pop	r17
     f92:	08 95       	ret

00000f94 <oled_print>:

void oled_print(const char string[]) {
     f94:	0f 93       	push	r16
     f96:	1f 93       	push	r17
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	8c 01       	movw	r16, r24
  for (int i = 0; i < strlen(string); i++) {
     f9e:	c0 e0       	ldi	r28, 0x00	; 0
     fa0:	d0 e0       	ldi	r29, 0x00	; 0
     fa2:	07 c0       	rjmp	.+14     	; 0xfb2 <oled_print+0x1e>
    oled_print_char(string[i]);
     fa4:	f8 01       	movw	r30, r16
     fa6:	ec 0f       	add	r30, r28
     fa8:	fd 1f       	adc	r31, r29
     faa:	80 81       	ld	r24, Z
     fac:	0e 94 ab 07 	call	0xf56	; 0xf56 <oled_print_char>
        oled_write_data(column);
    }
}

void oled_print(const char string[]) {
  for (int i = 0; i < strlen(string); i++) {
     fb0:	21 96       	adiw	r28, 0x01	; 1
     fb2:	f8 01       	movw	r30, r16
     fb4:	01 90       	ld	r0, Z+
     fb6:	00 20       	and	r0, r0
     fb8:	e9 f7       	brne	.-6      	; 0xfb4 <oled_print+0x20>
     fba:	31 97       	sbiw	r30, 0x01	; 1
     fbc:	e0 1b       	sub	r30, r16
     fbe:	f1 0b       	sbc	r31, r17
     fc0:	ce 17       	cp	r28, r30
     fc2:	df 07       	cpc	r29, r31
     fc4:	78 f3       	brcs	.-34     	; 0xfa4 <oled_print+0x10>
    oled_print_char(string[i]);
  }
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	1f 91       	pop	r17
     fcc:	0f 91       	pop	r16
     fce:	08 95       	ret

00000fd0 <spi_write_char>:
	SPCR = (1<<SPE);
}
*/
void spi_write_char(char cData){
	//char flushbuffer;
    SPDR = cData;
     fd0:	8f b9       	out	0x0f, r24	; 15
    //Wait for send to complete

	loop_until_bit_is_set(SPSR, SPIF);
     fd2:	77 9b       	sbis	0x0e, 7	; 14
     fd4:	fe cf       	rjmp	.-4      	; 0xfd2 <spi_write_char+0x2>
	//while(!(SPSR & (1<<SPIF)));
	//flushbuffer = SPDR;
}
     fd6:	08 95       	ret

00000fd8 <spi_read_char>:

char spi_read_char(){
    SPDR = 0xAA;
     fd8:	8a ea       	ldi	r24, 0xAA	; 170
     fda:	8f b9       	out	0x0f, r24	; 15
	// Wait for reception to complete

    loop_until_bit_is_set(SPSR, SPIF);
     fdc:	77 9b       	sbis	0x0e, 7	; 14
     fde:	fe cf       	rjmp	.-4      	; 0xfdc <spi_read_char+0x4>
	//while(!(SPSR & (1<<SPIF)));
	// Return char in data register
	return SPDR;
     fe0:	8f b1       	in	r24, 0x0f	; 15

}
     fe2:	08 95       	ret

00000fe4 <spi_set_ss_high>:

void spi_set_ss_high(){
    PORTB |= (1<<DD_SS);
     fe4:	88 b3       	in	r24, 0x18	; 24
     fe6:	80 61       	ori	r24, 0x10	; 16
     fe8:	88 bb       	out	0x18, r24	; 24
     fea:	08 95       	ret

00000fec <spi_init_master>:
#include "SPIdrv.h"


void spi_init_master(){
    // Set MOSI and SCK - og SS - output, all others input
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS);
     fec:	80 eb       	ldi	r24, 0xB0	; 176
     fee:	87 bb       	out	0x17, r24	; 23
	
	//DDR_SPI &= ~(1<<DD_MISO);
	
	// Enable SPI, Master, set clock rate fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);//|(1<<SPIE);
     ff0:	81 e5       	ldi	r24, 0x51	; 81
     ff2:	8d b9       	out	0x0d, r24	; 13
	//SPCR &= ~((1<<CPOL)|(1<<CPHA));
	spi_set_ss_high();
     ff4:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <spi_set_ss_high>
     ff8:	08 95       	ret

00000ffa <XMEM_init>:
	SFIOR |= (1<<XMM2); // Masking P7-P4
}

void XMEM_write(uint8_t data, uint16_t addr){
	volatile char *ext_mem = (char *) BASE_ADDRESS;
	ext_mem[addr]= data;
     ffa:	85 b7       	in	r24, 0x35	; 53
     ffc:	80 68       	ori	r24, 0x80	; 128
     ffe:	85 bf       	out	0x35, r24	; 53
    1000:	80 b7       	in	r24, 0x30	; 48
    1002:	80 62       	ori	r24, 0x20	; 32
    1004:	80 bf       	out	0x30, r24	; 48
    1006:	08 95       	ret

00001008 <XMEM_read>:
}

uint8_t XMEM_read(uint16_t addr){
	volatile char *ext_mem = (char *) BASE_ADDRESS;
	uint8_t ret_val = ext_mem[addr];
    1008:	90 5f       	subi	r25, 0xF0	; 240
    100a:	fc 01       	movw	r30, r24
    100c:	80 81       	ld	r24, Z
	return ret_val;
}
    100e:	08 95       	ret

00001010 <USART_Transmit>:
#include "UARTdrv.h"

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
    1010:	5d 9b       	sbis	0x0b, 5	; 11
    1012:	fe cf       	rjmp	.-4      	; 0x1010 <USART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
    1014:	8c b9       	out	0x0c, r24	; 12
    1016:	08 95       	ret

00001018 <USART_Receive>:
}
unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
    1018:	5f 9b       	sbis	0x0b, 7	; 11
    101a:	fe cf       	rjmp	.-4      	; 0x1018 <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR0;
    101c:	8c b1       	in	r24, 0x0c	; 12
}
    101e:	08 95       	ret

00001020 <USART_Init>:
void USART_Init( unsigned int ubrr )
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
    1020:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
    1022:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1024:	88 e1       	ldi	r24, 0x18	; 24
    1026:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    1028:	8e e8       	ldi	r24, 0x8E	; 142
    102a:	80 bd       	out	0x20, r24	; 32
	fdevopen(USART_Transmit,USART_Receive);
    102c:	6c e0       	ldi	r22, 0x0C	; 12
    102e:	78 e0       	ldi	r23, 0x08	; 8
    1030:	88 e0       	ldi	r24, 0x08	; 8
    1032:	98 e0       	ldi	r25, 0x08	; 8
    1034:	0e 94 4c 08 	call	0x1098	; 0x1098 <fdevopen>
    1038:	08 95       	ret

0000103a <__divmodhi4>:
    103a:	97 fb       	bst	r25, 7
    103c:	07 2e       	mov	r0, r23
    103e:	16 f4       	brtc	.+4      	; 0x1044 <__divmodhi4+0xa>
    1040:	00 94       	com	r0
    1042:	07 d0       	rcall	.+14     	; 0x1052 <__divmodhi4_neg1>
    1044:	77 fd       	sbrc	r23, 7
    1046:	09 d0       	rcall	.+18     	; 0x105a <__divmodhi4_neg2>
    1048:	0e 94 31 08 	call	0x1062	; 0x1062 <__udivmodhi4>
    104c:	07 fc       	sbrc	r0, 7
    104e:	05 d0       	rcall	.+10     	; 0x105a <__divmodhi4_neg2>
    1050:	3e f4       	brtc	.+14     	; 0x1060 <__divmodhi4_exit>

00001052 <__divmodhi4_neg1>:
    1052:	90 95       	com	r25
    1054:	81 95       	neg	r24
    1056:	9f 4f       	sbci	r25, 0xFF	; 255
    1058:	08 95       	ret

0000105a <__divmodhi4_neg2>:
    105a:	70 95       	com	r23
    105c:	61 95       	neg	r22
    105e:	7f 4f       	sbci	r23, 0xFF	; 255

00001060 <__divmodhi4_exit>:
    1060:	08 95       	ret

00001062 <__udivmodhi4>:
    1062:	aa 1b       	sub	r26, r26
    1064:	bb 1b       	sub	r27, r27
    1066:	51 e1       	ldi	r21, 0x11	; 17
    1068:	07 c0       	rjmp	.+14     	; 0x1078 <__udivmodhi4_ep>

0000106a <__udivmodhi4_loop>:
    106a:	aa 1f       	adc	r26, r26
    106c:	bb 1f       	adc	r27, r27
    106e:	a6 17       	cp	r26, r22
    1070:	b7 07       	cpc	r27, r23
    1072:	10 f0       	brcs	.+4      	; 0x1078 <__udivmodhi4_ep>
    1074:	a6 1b       	sub	r26, r22
    1076:	b7 0b       	sbc	r27, r23

00001078 <__udivmodhi4_ep>:
    1078:	88 1f       	adc	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	5a 95       	dec	r21
    107e:	a9 f7       	brne	.-22     	; 0x106a <__udivmodhi4_loop>
    1080:	80 95       	com	r24
    1082:	90 95       	com	r25
    1084:	bc 01       	movw	r22, r24
    1086:	cd 01       	movw	r24, r26
    1088:	08 95       	ret

0000108a <strcpy_P>:
    108a:	fb 01       	movw	r30, r22
    108c:	dc 01       	movw	r26, r24
    108e:	05 90       	lpm	r0, Z+
    1090:	0d 92       	st	X+, r0
    1092:	00 20       	and	r0, r0
    1094:	e1 f7       	brne	.-8      	; 0x108e <strcpy_P+0x4>
    1096:	08 95       	ret

00001098 <fdevopen>:
    1098:	0f 93       	push	r16
    109a:	1f 93       	push	r17
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	31 f4       	brne	.+12     	; 0x10b0 <fdevopen+0x18>
    10a4:	61 15       	cp	r22, r1
    10a6:	71 05       	cpc	r23, r1
    10a8:	19 f4       	brne	.+6      	; 0x10b0 <fdevopen+0x18>
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	3a c0       	rjmp	.+116    	; 0x1124 <fdevopen+0x8c>
    10b0:	8b 01       	movw	r16, r22
    10b2:	ec 01       	movw	r28, r24
    10b4:	6e e0       	ldi	r22, 0x0E	; 14
    10b6:	70 e0       	ldi	r23, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 8e 0a 	call	0x151c	; 0x151c <calloc>
    10c0:	fc 01       	movw	r30, r24
    10c2:	89 2b       	or	r24, r25
    10c4:	91 f3       	breq	.-28     	; 0x10aa <fdevopen+0x12>
    10c6:	80 e8       	ldi	r24, 0x80	; 128
    10c8:	83 83       	std	Z+3, r24	; 0x03
    10ca:	01 15       	cp	r16, r1
    10cc:	11 05       	cpc	r17, r1
    10ce:	71 f0       	breq	.+28     	; 0x10ec <fdevopen+0x54>
    10d0:	13 87       	std	Z+11, r17	; 0x0b
    10d2:	02 87       	std	Z+10, r16	; 0x0a
    10d4:	81 e8       	ldi	r24, 0x81	; 129
    10d6:	83 83       	std	Z+3, r24	; 0x03
    10d8:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <__iob>
    10dc:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <__iob+0x1>
    10e0:	89 2b       	or	r24, r25
    10e2:	21 f4       	brne	.+8      	; 0x10ec <fdevopen+0x54>
    10e4:	f0 93 74 02 	sts	0x0274, r31	; 0x800274 <__iob+0x1>
    10e8:	e0 93 73 02 	sts	0x0273, r30	; 0x800273 <__iob>
    10ec:	20 97       	sbiw	r28, 0x00	; 0
    10ee:	c9 f0       	breq	.+50     	; 0x1122 <fdevopen+0x8a>
    10f0:	d1 87       	std	Z+9, r29	; 0x09
    10f2:	c0 87       	std	Z+8, r28	; 0x08
    10f4:	83 81       	ldd	r24, Z+3	; 0x03
    10f6:	82 60       	ori	r24, 0x02	; 2
    10f8:	83 83       	std	Z+3, r24	; 0x03
    10fa:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <__iob+0x2>
    10fe:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <__iob+0x3>
    1102:	89 2b       	or	r24, r25
    1104:	71 f4       	brne	.+28     	; 0x1122 <fdevopen+0x8a>
    1106:	f0 93 76 02 	sts	0x0276, r31	; 0x800276 <__iob+0x3>
    110a:	e0 93 75 02 	sts	0x0275, r30	; 0x800275 <__iob+0x2>
    110e:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <__iob+0x4>
    1112:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <__iob+0x5>
    1116:	89 2b       	or	r24, r25
    1118:	21 f4       	brne	.+8      	; 0x1122 <fdevopen+0x8a>
    111a:	f0 93 78 02 	sts	0x0278, r31	; 0x800278 <__iob+0x5>
    111e:	e0 93 77 02 	sts	0x0277, r30	; 0x800277 <__iob+0x4>
    1122:	cf 01       	movw	r24, r30
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	1f 91       	pop	r17
    112a:	0f 91       	pop	r16
    112c:	08 95       	ret

0000112e <printf>:
    112e:	a0 e0       	ldi	r26, 0x00	; 0
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	ed e9       	ldi	r30, 0x9D	; 157
    1134:	f8 e0       	ldi	r31, 0x08	; 8
    1136:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <__prologue_saves__+0x20>
    113a:	ae 01       	movw	r20, r28
    113c:	4b 5f       	subi	r20, 0xFB	; 251
    113e:	5f 4f       	sbci	r21, 0xFF	; 255
    1140:	fa 01       	movw	r30, r20
    1142:	61 91       	ld	r22, Z+
    1144:	71 91       	ld	r23, Z+
    1146:	af 01       	movw	r20, r30
    1148:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <__iob+0x2>
    114c:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <__iob+0x3>
    1150:	0e 94 ad 08 	call	0x115a	; 0x115a <vfprintf>
    1154:	e2 e0       	ldi	r30, 0x02	; 2
    1156:	0c 94 ae 0c 	jmp	0x195c	; 0x195c <__epilogue_restores__+0x20>

0000115a <vfprintf>:
    115a:	ab e0       	ldi	r26, 0x0B	; 11
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e3 eb       	ldi	r30, 0xB3	; 179
    1160:	f8 e0       	ldi	r31, 0x08	; 8
    1162:	0c 94 82 0c 	jmp	0x1904	; 0x1904 <__prologue_saves__>
    1166:	6c 01       	movw	r12, r24
    1168:	7b 01       	movw	r14, r22
    116a:	8a 01       	movw	r16, r20
    116c:	fc 01       	movw	r30, r24
    116e:	17 82       	std	Z+7, r1	; 0x07
    1170:	16 82       	std	Z+6, r1	; 0x06
    1172:	83 81       	ldd	r24, Z+3	; 0x03
    1174:	81 ff       	sbrs	r24, 1
    1176:	cc c1       	rjmp	.+920    	; 0x1510 <vfprintf+0x3b6>
    1178:	ce 01       	movw	r24, r28
    117a:	01 96       	adiw	r24, 0x01	; 1
    117c:	3c 01       	movw	r6, r24
    117e:	f6 01       	movw	r30, r12
    1180:	93 81       	ldd	r25, Z+3	; 0x03
    1182:	f7 01       	movw	r30, r14
    1184:	93 fd       	sbrc	r25, 3
    1186:	85 91       	lpm	r24, Z+
    1188:	93 ff       	sbrs	r25, 3
    118a:	81 91       	ld	r24, Z+
    118c:	7f 01       	movw	r14, r30
    118e:	88 23       	and	r24, r24
    1190:	09 f4       	brne	.+2      	; 0x1194 <vfprintf+0x3a>
    1192:	ba c1       	rjmp	.+884    	; 0x1508 <vfprintf+0x3ae>
    1194:	85 32       	cpi	r24, 0x25	; 37
    1196:	39 f4       	brne	.+14     	; 0x11a6 <vfprintf+0x4c>
    1198:	93 fd       	sbrc	r25, 3
    119a:	85 91       	lpm	r24, Z+
    119c:	93 ff       	sbrs	r25, 3
    119e:	81 91       	ld	r24, Z+
    11a0:	7f 01       	movw	r14, r30
    11a2:	85 32       	cpi	r24, 0x25	; 37
    11a4:	29 f4       	brne	.+10     	; 0x11b0 <vfprintf+0x56>
    11a6:	b6 01       	movw	r22, r12
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <fputc>
    11ae:	e7 cf       	rjmp	.-50     	; 0x117e <vfprintf+0x24>
    11b0:	91 2c       	mov	r9, r1
    11b2:	21 2c       	mov	r2, r1
    11b4:	31 2c       	mov	r3, r1
    11b6:	ff e1       	ldi	r31, 0x1F	; 31
    11b8:	f3 15       	cp	r31, r3
    11ba:	d8 f0       	brcs	.+54     	; 0x11f2 <vfprintf+0x98>
    11bc:	8b 32       	cpi	r24, 0x2B	; 43
    11be:	79 f0       	breq	.+30     	; 0x11de <vfprintf+0x84>
    11c0:	38 f4       	brcc	.+14     	; 0x11d0 <vfprintf+0x76>
    11c2:	80 32       	cpi	r24, 0x20	; 32
    11c4:	79 f0       	breq	.+30     	; 0x11e4 <vfprintf+0x8a>
    11c6:	83 32       	cpi	r24, 0x23	; 35
    11c8:	a1 f4       	brne	.+40     	; 0x11f2 <vfprintf+0x98>
    11ca:	23 2d       	mov	r18, r3
    11cc:	20 61       	ori	r18, 0x10	; 16
    11ce:	1d c0       	rjmp	.+58     	; 0x120a <vfprintf+0xb0>
    11d0:	8d 32       	cpi	r24, 0x2D	; 45
    11d2:	61 f0       	breq	.+24     	; 0x11ec <vfprintf+0x92>
    11d4:	80 33       	cpi	r24, 0x30	; 48
    11d6:	69 f4       	brne	.+26     	; 0x11f2 <vfprintf+0x98>
    11d8:	23 2d       	mov	r18, r3
    11da:	21 60       	ori	r18, 0x01	; 1
    11dc:	16 c0       	rjmp	.+44     	; 0x120a <vfprintf+0xb0>
    11de:	83 2d       	mov	r24, r3
    11e0:	82 60       	ori	r24, 0x02	; 2
    11e2:	38 2e       	mov	r3, r24
    11e4:	e3 2d       	mov	r30, r3
    11e6:	e4 60       	ori	r30, 0x04	; 4
    11e8:	3e 2e       	mov	r3, r30
    11ea:	2a c0       	rjmp	.+84     	; 0x1240 <vfprintf+0xe6>
    11ec:	f3 2d       	mov	r31, r3
    11ee:	f8 60       	ori	r31, 0x08	; 8
    11f0:	1d c0       	rjmp	.+58     	; 0x122c <vfprintf+0xd2>
    11f2:	37 fc       	sbrc	r3, 7
    11f4:	2d c0       	rjmp	.+90     	; 0x1250 <vfprintf+0xf6>
    11f6:	20 ed       	ldi	r18, 0xD0	; 208
    11f8:	28 0f       	add	r18, r24
    11fa:	2a 30       	cpi	r18, 0x0A	; 10
    11fc:	40 f0       	brcs	.+16     	; 0x120e <vfprintf+0xb4>
    11fe:	8e 32       	cpi	r24, 0x2E	; 46
    1200:	b9 f4       	brne	.+46     	; 0x1230 <vfprintf+0xd6>
    1202:	36 fc       	sbrc	r3, 6
    1204:	81 c1       	rjmp	.+770    	; 0x1508 <vfprintf+0x3ae>
    1206:	23 2d       	mov	r18, r3
    1208:	20 64       	ori	r18, 0x40	; 64
    120a:	32 2e       	mov	r3, r18
    120c:	19 c0       	rjmp	.+50     	; 0x1240 <vfprintf+0xe6>
    120e:	36 fe       	sbrs	r3, 6
    1210:	06 c0       	rjmp	.+12     	; 0x121e <vfprintf+0xc4>
    1212:	8a e0       	ldi	r24, 0x0A	; 10
    1214:	98 9e       	mul	r9, r24
    1216:	20 0d       	add	r18, r0
    1218:	11 24       	eor	r1, r1
    121a:	92 2e       	mov	r9, r18
    121c:	11 c0       	rjmp	.+34     	; 0x1240 <vfprintf+0xe6>
    121e:	ea e0       	ldi	r30, 0x0A	; 10
    1220:	2e 9e       	mul	r2, r30
    1222:	20 0d       	add	r18, r0
    1224:	11 24       	eor	r1, r1
    1226:	22 2e       	mov	r2, r18
    1228:	f3 2d       	mov	r31, r3
    122a:	f0 62       	ori	r31, 0x20	; 32
    122c:	3f 2e       	mov	r3, r31
    122e:	08 c0       	rjmp	.+16     	; 0x1240 <vfprintf+0xe6>
    1230:	8c 36       	cpi	r24, 0x6C	; 108
    1232:	21 f4       	brne	.+8      	; 0x123c <vfprintf+0xe2>
    1234:	83 2d       	mov	r24, r3
    1236:	80 68       	ori	r24, 0x80	; 128
    1238:	38 2e       	mov	r3, r24
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <vfprintf+0xe6>
    123c:	88 36       	cpi	r24, 0x68	; 104
    123e:	41 f4       	brne	.+16     	; 0x1250 <vfprintf+0xf6>
    1240:	f7 01       	movw	r30, r14
    1242:	93 fd       	sbrc	r25, 3
    1244:	85 91       	lpm	r24, Z+
    1246:	93 ff       	sbrs	r25, 3
    1248:	81 91       	ld	r24, Z+
    124a:	7f 01       	movw	r14, r30
    124c:	81 11       	cpse	r24, r1
    124e:	b3 cf       	rjmp	.-154    	; 0x11b6 <vfprintf+0x5c>
    1250:	98 2f       	mov	r25, r24
    1252:	9f 7d       	andi	r25, 0xDF	; 223
    1254:	95 54       	subi	r25, 0x45	; 69
    1256:	93 30       	cpi	r25, 0x03	; 3
    1258:	28 f4       	brcc	.+10     	; 0x1264 <vfprintf+0x10a>
    125a:	0c 5f       	subi	r16, 0xFC	; 252
    125c:	1f 4f       	sbci	r17, 0xFF	; 255
    125e:	9f e3       	ldi	r25, 0x3F	; 63
    1260:	99 83       	std	Y+1, r25	; 0x01
    1262:	0d c0       	rjmp	.+26     	; 0x127e <vfprintf+0x124>
    1264:	83 36       	cpi	r24, 0x63	; 99
    1266:	31 f0       	breq	.+12     	; 0x1274 <vfprintf+0x11a>
    1268:	83 37       	cpi	r24, 0x73	; 115
    126a:	71 f0       	breq	.+28     	; 0x1288 <vfprintf+0x12e>
    126c:	83 35       	cpi	r24, 0x53	; 83
    126e:	09 f0       	breq	.+2      	; 0x1272 <vfprintf+0x118>
    1270:	59 c0       	rjmp	.+178    	; 0x1324 <vfprintf+0x1ca>
    1272:	21 c0       	rjmp	.+66     	; 0x12b6 <vfprintf+0x15c>
    1274:	f8 01       	movw	r30, r16
    1276:	80 81       	ld	r24, Z
    1278:	89 83       	std	Y+1, r24	; 0x01
    127a:	0e 5f       	subi	r16, 0xFE	; 254
    127c:	1f 4f       	sbci	r17, 0xFF	; 255
    127e:	88 24       	eor	r8, r8
    1280:	83 94       	inc	r8
    1282:	91 2c       	mov	r9, r1
    1284:	53 01       	movw	r10, r6
    1286:	13 c0       	rjmp	.+38     	; 0x12ae <vfprintf+0x154>
    1288:	28 01       	movw	r4, r16
    128a:	f2 e0       	ldi	r31, 0x02	; 2
    128c:	4f 0e       	add	r4, r31
    128e:	51 1c       	adc	r5, r1
    1290:	f8 01       	movw	r30, r16
    1292:	a0 80       	ld	r10, Z
    1294:	b1 80       	ldd	r11, Z+1	; 0x01
    1296:	36 fe       	sbrs	r3, 6
    1298:	03 c0       	rjmp	.+6      	; 0x12a0 <vfprintf+0x146>
    129a:	69 2d       	mov	r22, r9
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <vfprintf+0x14a>
    12a0:	6f ef       	ldi	r22, 0xFF	; 255
    12a2:	7f ef       	ldi	r23, 0xFF	; 255
    12a4:	c5 01       	movw	r24, r10
    12a6:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <strnlen>
    12aa:	4c 01       	movw	r8, r24
    12ac:	82 01       	movw	r16, r4
    12ae:	f3 2d       	mov	r31, r3
    12b0:	ff 77       	andi	r31, 0x7F	; 127
    12b2:	3f 2e       	mov	r3, r31
    12b4:	16 c0       	rjmp	.+44     	; 0x12e2 <vfprintf+0x188>
    12b6:	28 01       	movw	r4, r16
    12b8:	22 e0       	ldi	r18, 0x02	; 2
    12ba:	42 0e       	add	r4, r18
    12bc:	51 1c       	adc	r5, r1
    12be:	f8 01       	movw	r30, r16
    12c0:	a0 80       	ld	r10, Z
    12c2:	b1 80       	ldd	r11, Z+1	; 0x01
    12c4:	36 fe       	sbrs	r3, 6
    12c6:	03 c0       	rjmp	.+6      	; 0x12ce <vfprintf+0x174>
    12c8:	69 2d       	mov	r22, r9
    12ca:	70 e0       	ldi	r23, 0x00	; 0
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <vfprintf+0x178>
    12ce:	6f ef       	ldi	r22, 0xFF	; 255
    12d0:	7f ef       	ldi	r23, 0xFF	; 255
    12d2:	c5 01       	movw	r24, r10
    12d4:	0e 94 cb 0b 	call	0x1796	; 0x1796 <strnlen_P>
    12d8:	4c 01       	movw	r8, r24
    12da:	f3 2d       	mov	r31, r3
    12dc:	f0 68       	ori	r31, 0x80	; 128
    12de:	3f 2e       	mov	r3, r31
    12e0:	82 01       	movw	r16, r4
    12e2:	33 fc       	sbrc	r3, 3
    12e4:	1b c0       	rjmp	.+54     	; 0x131c <vfprintf+0x1c2>
    12e6:	82 2d       	mov	r24, r2
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	88 16       	cp	r8, r24
    12ec:	99 06       	cpc	r9, r25
    12ee:	b0 f4       	brcc	.+44     	; 0x131c <vfprintf+0x1c2>
    12f0:	b6 01       	movw	r22, r12
    12f2:	80 e2       	ldi	r24, 0x20	; 32
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <fputc>
    12fa:	2a 94       	dec	r2
    12fc:	f4 cf       	rjmp	.-24     	; 0x12e6 <vfprintf+0x18c>
    12fe:	f5 01       	movw	r30, r10
    1300:	37 fc       	sbrc	r3, 7
    1302:	85 91       	lpm	r24, Z+
    1304:	37 fe       	sbrs	r3, 7
    1306:	81 91       	ld	r24, Z+
    1308:	5f 01       	movw	r10, r30
    130a:	b6 01       	movw	r22, r12
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <fputc>
    1312:	21 10       	cpse	r2, r1
    1314:	2a 94       	dec	r2
    1316:	21 e0       	ldi	r18, 0x01	; 1
    1318:	82 1a       	sub	r8, r18
    131a:	91 08       	sbc	r9, r1
    131c:	81 14       	cp	r8, r1
    131e:	91 04       	cpc	r9, r1
    1320:	71 f7       	brne	.-36     	; 0x12fe <vfprintf+0x1a4>
    1322:	e8 c0       	rjmp	.+464    	; 0x14f4 <vfprintf+0x39a>
    1324:	84 36       	cpi	r24, 0x64	; 100
    1326:	11 f0       	breq	.+4      	; 0x132c <vfprintf+0x1d2>
    1328:	89 36       	cpi	r24, 0x69	; 105
    132a:	41 f5       	brne	.+80     	; 0x137c <vfprintf+0x222>
    132c:	f8 01       	movw	r30, r16
    132e:	37 fe       	sbrs	r3, 7
    1330:	07 c0       	rjmp	.+14     	; 0x1340 <vfprintf+0x1e6>
    1332:	60 81       	ld	r22, Z
    1334:	71 81       	ldd	r23, Z+1	; 0x01
    1336:	82 81       	ldd	r24, Z+2	; 0x02
    1338:	93 81       	ldd	r25, Z+3	; 0x03
    133a:	0c 5f       	subi	r16, 0xFC	; 252
    133c:	1f 4f       	sbci	r17, 0xFF	; 255
    133e:	08 c0       	rjmp	.+16     	; 0x1350 <vfprintf+0x1f6>
    1340:	60 81       	ld	r22, Z
    1342:	71 81       	ldd	r23, Z+1	; 0x01
    1344:	07 2e       	mov	r0, r23
    1346:	00 0c       	add	r0, r0
    1348:	88 0b       	sbc	r24, r24
    134a:	99 0b       	sbc	r25, r25
    134c:	0e 5f       	subi	r16, 0xFE	; 254
    134e:	1f 4f       	sbci	r17, 0xFF	; 255
    1350:	f3 2d       	mov	r31, r3
    1352:	ff 76       	andi	r31, 0x6F	; 111
    1354:	3f 2e       	mov	r3, r31
    1356:	97 ff       	sbrs	r25, 7
    1358:	09 c0       	rjmp	.+18     	; 0x136c <vfprintf+0x212>
    135a:	90 95       	com	r25
    135c:	80 95       	com	r24
    135e:	70 95       	com	r23
    1360:	61 95       	neg	r22
    1362:	7f 4f       	sbci	r23, 0xFF	; 255
    1364:	8f 4f       	sbci	r24, 0xFF	; 255
    1366:	9f 4f       	sbci	r25, 0xFF	; 255
    1368:	f0 68       	ori	r31, 0x80	; 128
    136a:	3f 2e       	mov	r3, r31
    136c:	2a e0       	ldi	r18, 0x0A	; 10
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	a3 01       	movw	r20, r6
    1372:	0e 94 24 0c 	call	0x1848	; 0x1848 <__ultoa_invert>
    1376:	88 2e       	mov	r8, r24
    1378:	86 18       	sub	r8, r6
    137a:	45 c0       	rjmp	.+138    	; 0x1406 <vfprintf+0x2ac>
    137c:	85 37       	cpi	r24, 0x75	; 117
    137e:	31 f4       	brne	.+12     	; 0x138c <vfprintf+0x232>
    1380:	23 2d       	mov	r18, r3
    1382:	2f 7e       	andi	r18, 0xEF	; 239
    1384:	b2 2e       	mov	r11, r18
    1386:	2a e0       	ldi	r18, 0x0A	; 10
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	25 c0       	rjmp	.+74     	; 0x13d6 <vfprintf+0x27c>
    138c:	93 2d       	mov	r25, r3
    138e:	99 7f       	andi	r25, 0xF9	; 249
    1390:	b9 2e       	mov	r11, r25
    1392:	8f 36       	cpi	r24, 0x6F	; 111
    1394:	c1 f0       	breq	.+48     	; 0x13c6 <vfprintf+0x26c>
    1396:	18 f4       	brcc	.+6      	; 0x139e <vfprintf+0x244>
    1398:	88 35       	cpi	r24, 0x58	; 88
    139a:	79 f0       	breq	.+30     	; 0x13ba <vfprintf+0x260>
    139c:	b5 c0       	rjmp	.+362    	; 0x1508 <vfprintf+0x3ae>
    139e:	80 37       	cpi	r24, 0x70	; 112
    13a0:	19 f0       	breq	.+6      	; 0x13a8 <vfprintf+0x24e>
    13a2:	88 37       	cpi	r24, 0x78	; 120
    13a4:	21 f0       	breq	.+8      	; 0x13ae <vfprintf+0x254>
    13a6:	b0 c0       	rjmp	.+352    	; 0x1508 <vfprintf+0x3ae>
    13a8:	e9 2f       	mov	r30, r25
    13aa:	e0 61       	ori	r30, 0x10	; 16
    13ac:	be 2e       	mov	r11, r30
    13ae:	b4 fe       	sbrs	r11, 4
    13b0:	0d c0       	rjmp	.+26     	; 0x13cc <vfprintf+0x272>
    13b2:	fb 2d       	mov	r31, r11
    13b4:	f4 60       	ori	r31, 0x04	; 4
    13b6:	bf 2e       	mov	r11, r31
    13b8:	09 c0       	rjmp	.+18     	; 0x13cc <vfprintf+0x272>
    13ba:	34 fe       	sbrs	r3, 4
    13bc:	0a c0       	rjmp	.+20     	; 0x13d2 <vfprintf+0x278>
    13be:	29 2f       	mov	r18, r25
    13c0:	26 60       	ori	r18, 0x06	; 6
    13c2:	b2 2e       	mov	r11, r18
    13c4:	06 c0       	rjmp	.+12     	; 0x13d2 <vfprintf+0x278>
    13c6:	28 e0       	ldi	r18, 0x08	; 8
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	05 c0       	rjmp	.+10     	; 0x13d6 <vfprintf+0x27c>
    13cc:	20 e1       	ldi	r18, 0x10	; 16
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <vfprintf+0x27c>
    13d2:	20 e1       	ldi	r18, 0x10	; 16
    13d4:	32 e0       	ldi	r19, 0x02	; 2
    13d6:	f8 01       	movw	r30, r16
    13d8:	b7 fe       	sbrs	r11, 7
    13da:	07 c0       	rjmp	.+14     	; 0x13ea <vfprintf+0x290>
    13dc:	60 81       	ld	r22, Z
    13de:	71 81       	ldd	r23, Z+1	; 0x01
    13e0:	82 81       	ldd	r24, Z+2	; 0x02
    13e2:	93 81       	ldd	r25, Z+3	; 0x03
    13e4:	0c 5f       	subi	r16, 0xFC	; 252
    13e6:	1f 4f       	sbci	r17, 0xFF	; 255
    13e8:	06 c0       	rjmp	.+12     	; 0x13f6 <vfprintf+0x29c>
    13ea:	60 81       	ld	r22, Z
    13ec:	71 81       	ldd	r23, Z+1	; 0x01
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	0e 5f       	subi	r16, 0xFE	; 254
    13f4:	1f 4f       	sbci	r17, 0xFF	; 255
    13f6:	a3 01       	movw	r20, r6
    13f8:	0e 94 24 0c 	call	0x1848	; 0x1848 <__ultoa_invert>
    13fc:	88 2e       	mov	r8, r24
    13fe:	86 18       	sub	r8, r6
    1400:	fb 2d       	mov	r31, r11
    1402:	ff 77       	andi	r31, 0x7F	; 127
    1404:	3f 2e       	mov	r3, r31
    1406:	36 fe       	sbrs	r3, 6
    1408:	0d c0       	rjmp	.+26     	; 0x1424 <vfprintf+0x2ca>
    140a:	23 2d       	mov	r18, r3
    140c:	2e 7f       	andi	r18, 0xFE	; 254
    140e:	a2 2e       	mov	r10, r18
    1410:	89 14       	cp	r8, r9
    1412:	58 f4       	brcc	.+22     	; 0x142a <vfprintf+0x2d0>
    1414:	34 fe       	sbrs	r3, 4
    1416:	0b c0       	rjmp	.+22     	; 0x142e <vfprintf+0x2d4>
    1418:	32 fc       	sbrc	r3, 2
    141a:	09 c0       	rjmp	.+18     	; 0x142e <vfprintf+0x2d4>
    141c:	83 2d       	mov	r24, r3
    141e:	8e 7e       	andi	r24, 0xEE	; 238
    1420:	a8 2e       	mov	r10, r24
    1422:	05 c0       	rjmp	.+10     	; 0x142e <vfprintf+0x2d4>
    1424:	b8 2c       	mov	r11, r8
    1426:	a3 2c       	mov	r10, r3
    1428:	03 c0       	rjmp	.+6      	; 0x1430 <vfprintf+0x2d6>
    142a:	b8 2c       	mov	r11, r8
    142c:	01 c0       	rjmp	.+2      	; 0x1430 <vfprintf+0x2d6>
    142e:	b9 2c       	mov	r11, r9
    1430:	a4 fe       	sbrs	r10, 4
    1432:	0f c0       	rjmp	.+30     	; 0x1452 <vfprintf+0x2f8>
    1434:	fe 01       	movw	r30, r28
    1436:	e8 0d       	add	r30, r8
    1438:	f1 1d       	adc	r31, r1
    143a:	80 81       	ld	r24, Z
    143c:	80 33       	cpi	r24, 0x30	; 48
    143e:	21 f4       	brne	.+8      	; 0x1448 <vfprintf+0x2ee>
    1440:	9a 2d       	mov	r25, r10
    1442:	99 7e       	andi	r25, 0xE9	; 233
    1444:	a9 2e       	mov	r10, r25
    1446:	09 c0       	rjmp	.+18     	; 0x145a <vfprintf+0x300>
    1448:	a2 fe       	sbrs	r10, 2
    144a:	06 c0       	rjmp	.+12     	; 0x1458 <vfprintf+0x2fe>
    144c:	b3 94       	inc	r11
    144e:	b3 94       	inc	r11
    1450:	04 c0       	rjmp	.+8      	; 0x145a <vfprintf+0x300>
    1452:	8a 2d       	mov	r24, r10
    1454:	86 78       	andi	r24, 0x86	; 134
    1456:	09 f0       	breq	.+2      	; 0x145a <vfprintf+0x300>
    1458:	b3 94       	inc	r11
    145a:	a3 fc       	sbrc	r10, 3
    145c:	11 c0       	rjmp	.+34     	; 0x1480 <vfprintf+0x326>
    145e:	a0 fe       	sbrs	r10, 0
    1460:	06 c0       	rjmp	.+12     	; 0x146e <vfprintf+0x314>
    1462:	b2 14       	cp	r11, r2
    1464:	88 f4       	brcc	.+34     	; 0x1488 <vfprintf+0x32e>
    1466:	28 0c       	add	r2, r8
    1468:	92 2c       	mov	r9, r2
    146a:	9b 18       	sub	r9, r11
    146c:	0e c0       	rjmp	.+28     	; 0x148a <vfprintf+0x330>
    146e:	b2 14       	cp	r11, r2
    1470:	60 f4       	brcc	.+24     	; 0x148a <vfprintf+0x330>
    1472:	b6 01       	movw	r22, r12
    1474:	80 e2       	ldi	r24, 0x20	; 32
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <fputc>
    147c:	b3 94       	inc	r11
    147e:	f7 cf       	rjmp	.-18     	; 0x146e <vfprintf+0x314>
    1480:	b2 14       	cp	r11, r2
    1482:	18 f4       	brcc	.+6      	; 0x148a <vfprintf+0x330>
    1484:	2b 18       	sub	r2, r11
    1486:	02 c0       	rjmp	.+4      	; 0x148c <vfprintf+0x332>
    1488:	98 2c       	mov	r9, r8
    148a:	21 2c       	mov	r2, r1
    148c:	a4 fe       	sbrs	r10, 4
    148e:	10 c0       	rjmp	.+32     	; 0x14b0 <vfprintf+0x356>
    1490:	b6 01       	movw	r22, r12
    1492:	80 e3       	ldi	r24, 0x30	; 48
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <fputc>
    149a:	a2 fe       	sbrs	r10, 2
    149c:	17 c0       	rjmp	.+46     	; 0x14cc <vfprintf+0x372>
    149e:	a1 fc       	sbrc	r10, 1
    14a0:	03 c0       	rjmp	.+6      	; 0x14a8 <vfprintf+0x34e>
    14a2:	88 e7       	ldi	r24, 0x78	; 120
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <vfprintf+0x352>
    14a8:	88 e5       	ldi	r24, 0x58	; 88
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	b6 01       	movw	r22, r12
    14ae:	0c c0       	rjmp	.+24     	; 0x14c8 <vfprintf+0x36e>
    14b0:	8a 2d       	mov	r24, r10
    14b2:	86 78       	andi	r24, 0x86	; 134
    14b4:	59 f0       	breq	.+22     	; 0x14cc <vfprintf+0x372>
    14b6:	a1 fe       	sbrs	r10, 1
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <vfprintf+0x364>
    14ba:	8b e2       	ldi	r24, 0x2B	; 43
    14bc:	01 c0       	rjmp	.+2      	; 0x14c0 <vfprintf+0x366>
    14be:	80 e2       	ldi	r24, 0x20	; 32
    14c0:	a7 fc       	sbrc	r10, 7
    14c2:	8d e2       	ldi	r24, 0x2D	; 45
    14c4:	b6 01       	movw	r22, r12
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <fputc>
    14cc:	89 14       	cp	r8, r9
    14ce:	38 f4       	brcc	.+14     	; 0x14de <vfprintf+0x384>
    14d0:	b6 01       	movw	r22, r12
    14d2:	80 e3       	ldi	r24, 0x30	; 48
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <fputc>
    14da:	9a 94       	dec	r9
    14dc:	f7 cf       	rjmp	.-18     	; 0x14cc <vfprintf+0x372>
    14de:	8a 94       	dec	r8
    14e0:	f3 01       	movw	r30, r6
    14e2:	e8 0d       	add	r30, r8
    14e4:	f1 1d       	adc	r31, r1
    14e6:	80 81       	ld	r24, Z
    14e8:	b6 01       	movw	r22, r12
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <fputc>
    14f0:	81 10       	cpse	r8, r1
    14f2:	f5 cf       	rjmp	.-22     	; 0x14de <vfprintf+0x384>
    14f4:	22 20       	and	r2, r2
    14f6:	09 f4       	brne	.+2      	; 0x14fa <vfprintf+0x3a0>
    14f8:	42 ce       	rjmp	.-892    	; 0x117e <vfprintf+0x24>
    14fa:	b6 01       	movw	r22, r12
    14fc:	80 e2       	ldi	r24, 0x20	; 32
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <fputc>
    1504:	2a 94       	dec	r2
    1506:	f6 cf       	rjmp	.-20     	; 0x14f4 <vfprintf+0x39a>
    1508:	f6 01       	movw	r30, r12
    150a:	86 81       	ldd	r24, Z+6	; 0x06
    150c:	97 81       	ldd	r25, Z+7	; 0x07
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <vfprintf+0x3ba>
    1510:	8f ef       	ldi	r24, 0xFF	; 255
    1512:	9f ef       	ldi	r25, 0xFF	; 255
    1514:	2b 96       	adiw	r28, 0x0b	; 11
    1516:	e2 e1       	ldi	r30, 0x12	; 18
    1518:	0c 94 9e 0c 	jmp	0x193c	; 0x193c <__epilogue_restores__>

0000151c <calloc>:
    151c:	0f 93       	push	r16
    151e:	1f 93       	push	r17
    1520:	cf 93       	push	r28
    1522:	df 93       	push	r29
    1524:	86 9f       	mul	r24, r22
    1526:	80 01       	movw	r16, r0
    1528:	87 9f       	mul	r24, r23
    152a:	10 0d       	add	r17, r0
    152c:	96 9f       	mul	r25, r22
    152e:	10 0d       	add	r17, r0
    1530:	11 24       	eor	r1, r1
    1532:	c8 01       	movw	r24, r16
    1534:	0e 94 aa 0a 	call	0x1554	; 0x1554 <malloc>
    1538:	ec 01       	movw	r28, r24
    153a:	00 97       	sbiw	r24, 0x00	; 0
    153c:	29 f0       	breq	.+10     	; 0x1548 <calloc+0x2c>
    153e:	a8 01       	movw	r20, r16
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	70 e0       	ldi	r23, 0x00	; 0
    1544:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <memset>
    1548:	ce 01       	movw	r24, r28
    154a:	df 91       	pop	r29
    154c:	cf 91       	pop	r28
    154e:	1f 91       	pop	r17
    1550:	0f 91       	pop	r16
    1552:	08 95       	ret

00001554 <malloc>:
    1554:	0f 93       	push	r16
    1556:	1f 93       	push	r17
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	82 30       	cpi	r24, 0x02	; 2
    155e:	91 05       	cpc	r25, r1
    1560:	10 f4       	brcc	.+4      	; 0x1566 <malloc+0x12>
    1562:	82 e0       	ldi	r24, 0x02	; 2
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <__flp>
    156a:	f0 91 7c 02 	lds	r31, 0x027C	; 0x80027c <__flp+0x1>
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	a0 e0       	ldi	r26, 0x00	; 0
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	30 97       	sbiw	r30, 0x00	; 0
    1578:	19 f1       	breq	.+70     	; 0x15c0 <malloc+0x6c>
    157a:	40 81       	ld	r20, Z
    157c:	51 81       	ldd	r21, Z+1	; 0x01
    157e:	02 81       	ldd	r16, Z+2	; 0x02
    1580:	13 81       	ldd	r17, Z+3	; 0x03
    1582:	48 17       	cp	r20, r24
    1584:	59 07       	cpc	r21, r25
    1586:	c8 f0       	brcs	.+50     	; 0x15ba <malloc+0x66>
    1588:	84 17       	cp	r24, r20
    158a:	95 07       	cpc	r25, r21
    158c:	69 f4       	brne	.+26     	; 0x15a8 <malloc+0x54>
    158e:	10 97       	sbiw	r26, 0x00	; 0
    1590:	31 f0       	breq	.+12     	; 0x159e <malloc+0x4a>
    1592:	12 96       	adiw	r26, 0x02	; 2
    1594:	0c 93       	st	X, r16
    1596:	12 97       	sbiw	r26, 0x02	; 2
    1598:	13 96       	adiw	r26, 0x03	; 3
    159a:	1c 93       	st	X, r17
    159c:	27 c0       	rjmp	.+78     	; 0x15ec <malloc+0x98>
    159e:	00 93 7b 02 	sts	0x027B, r16	; 0x80027b <__flp>
    15a2:	10 93 7c 02 	sts	0x027C, r17	; 0x80027c <__flp+0x1>
    15a6:	22 c0       	rjmp	.+68     	; 0x15ec <malloc+0x98>
    15a8:	21 15       	cp	r18, r1
    15aa:	31 05       	cpc	r19, r1
    15ac:	19 f0       	breq	.+6      	; 0x15b4 <malloc+0x60>
    15ae:	42 17       	cp	r20, r18
    15b0:	53 07       	cpc	r21, r19
    15b2:	18 f4       	brcc	.+6      	; 0x15ba <malloc+0x66>
    15b4:	9a 01       	movw	r18, r20
    15b6:	bd 01       	movw	r22, r26
    15b8:	ef 01       	movw	r28, r30
    15ba:	df 01       	movw	r26, r30
    15bc:	f8 01       	movw	r30, r16
    15be:	db cf       	rjmp	.-74     	; 0x1576 <malloc+0x22>
    15c0:	21 15       	cp	r18, r1
    15c2:	31 05       	cpc	r19, r1
    15c4:	f9 f0       	breq	.+62     	; 0x1604 <malloc+0xb0>
    15c6:	28 1b       	sub	r18, r24
    15c8:	39 0b       	sbc	r19, r25
    15ca:	24 30       	cpi	r18, 0x04	; 4
    15cc:	31 05       	cpc	r19, r1
    15ce:	80 f4       	brcc	.+32     	; 0x15f0 <malloc+0x9c>
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	9b 81       	ldd	r25, Y+3	; 0x03
    15d4:	61 15       	cp	r22, r1
    15d6:	71 05       	cpc	r23, r1
    15d8:	21 f0       	breq	.+8      	; 0x15e2 <malloc+0x8e>
    15da:	fb 01       	movw	r30, r22
    15dc:	93 83       	std	Z+3, r25	; 0x03
    15de:	82 83       	std	Z+2, r24	; 0x02
    15e0:	04 c0       	rjmp	.+8      	; 0x15ea <malloc+0x96>
    15e2:	90 93 7c 02 	sts	0x027C, r25	; 0x80027c <__flp+0x1>
    15e6:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <__flp>
    15ea:	fe 01       	movw	r30, r28
    15ec:	32 96       	adiw	r30, 0x02	; 2
    15ee:	44 c0       	rjmp	.+136    	; 0x1678 <malloc+0x124>
    15f0:	fe 01       	movw	r30, r28
    15f2:	e2 0f       	add	r30, r18
    15f4:	f3 1f       	adc	r31, r19
    15f6:	81 93       	st	Z+, r24
    15f8:	91 93       	st	Z+, r25
    15fa:	22 50       	subi	r18, 0x02	; 2
    15fc:	31 09       	sbc	r19, r1
    15fe:	39 83       	std	Y+1, r19	; 0x01
    1600:	28 83       	st	Y, r18
    1602:	3a c0       	rjmp	.+116    	; 0x1678 <malloc+0x124>
    1604:	20 91 79 02 	lds	r18, 0x0279	; 0x800279 <__brkval>
    1608:	30 91 7a 02 	lds	r19, 0x027A	; 0x80027a <__brkval+0x1>
    160c:	23 2b       	or	r18, r19
    160e:	41 f4       	brne	.+16     	; 0x1620 <malloc+0xcc>
    1610:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1614:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1618:	30 93 7a 02 	sts	0x027A, r19	; 0x80027a <__brkval+0x1>
    161c:	20 93 79 02 	sts	0x0279, r18	; 0x800279 <__brkval>
    1620:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1624:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1628:	21 15       	cp	r18, r1
    162a:	31 05       	cpc	r19, r1
    162c:	41 f4       	brne	.+16     	; 0x163e <malloc+0xea>
    162e:	2d b7       	in	r18, 0x3d	; 61
    1630:	3e b7       	in	r19, 0x3e	; 62
    1632:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1636:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    163a:	24 1b       	sub	r18, r20
    163c:	35 0b       	sbc	r19, r21
    163e:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <__brkval>
    1642:	f0 91 7a 02 	lds	r31, 0x027A	; 0x80027a <__brkval+0x1>
    1646:	e2 17       	cp	r30, r18
    1648:	f3 07       	cpc	r31, r19
    164a:	a0 f4       	brcc	.+40     	; 0x1674 <malloc+0x120>
    164c:	2e 1b       	sub	r18, r30
    164e:	3f 0b       	sbc	r19, r31
    1650:	28 17       	cp	r18, r24
    1652:	39 07       	cpc	r19, r25
    1654:	78 f0       	brcs	.+30     	; 0x1674 <malloc+0x120>
    1656:	ac 01       	movw	r20, r24
    1658:	4e 5f       	subi	r20, 0xFE	; 254
    165a:	5f 4f       	sbci	r21, 0xFF	; 255
    165c:	24 17       	cp	r18, r20
    165e:	35 07       	cpc	r19, r21
    1660:	48 f0       	brcs	.+18     	; 0x1674 <malloc+0x120>
    1662:	4e 0f       	add	r20, r30
    1664:	5f 1f       	adc	r21, r31
    1666:	50 93 7a 02 	sts	0x027A, r21	; 0x80027a <__brkval+0x1>
    166a:	40 93 79 02 	sts	0x0279, r20	; 0x800279 <__brkval>
    166e:	81 93       	st	Z+, r24
    1670:	91 93       	st	Z+, r25
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <malloc+0x124>
    1674:	e0 e0       	ldi	r30, 0x00	; 0
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	cf 01       	movw	r24, r30
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	1f 91       	pop	r17
    1680:	0f 91       	pop	r16
    1682:	08 95       	ret

00001684 <free>:
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
    1688:	00 97       	sbiw	r24, 0x00	; 0
    168a:	09 f4       	brne	.+2      	; 0x168e <free+0xa>
    168c:	81 c0       	rjmp	.+258    	; 0x1790 <free+0x10c>
    168e:	fc 01       	movw	r30, r24
    1690:	32 97       	sbiw	r30, 0x02	; 2
    1692:	13 82       	std	Z+3, r1	; 0x03
    1694:	12 82       	std	Z+2, r1	; 0x02
    1696:	a0 91 7b 02 	lds	r26, 0x027B	; 0x80027b <__flp>
    169a:	b0 91 7c 02 	lds	r27, 0x027C	; 0x80027c <__flp+0x1>
    169e:	10 97       	sbiw	r26, 0x00	; 0
    16a0:	81 f4       	brne	.+32     	; 0x16c2 <free+0x3e>
    16a2:	20 81       	ld	r18, Z
    16a4:	31 81       	ldd	r19, Z+1	; 0x01
    16a6:	82 0f       	add	r24, r18
    16a8:	93 1f       	adc	r25, r19
    16aa:	20 91 79 02 	lds	r18, 0x0279	; 0x800279 <__brkval>
    16ae:	30 91 7a 02 	lds	r19, 0x027A	; 0x80027a <__brkval+0x1>
    16b2:	28 17       	cp	r18, r24
    16b4:	39 07       	cpc	r19, r25
    16b6:	51 f5       	brne	.+84     	; 0x170c <free+0x88>
    16b8:	f0 93 7a 02 	sts	0x027A, r31	; 0x80027a <__brkval+0x1>
    16bc:	e0 93 79 02 	sts	0x0279, r30	; 0x800279 <__brkval>
    16c0:	67 c0       	rjmp	.+206    	; 0x1790 <free+0x10c>
    16c2:	ed 01       	movw	r28, r26
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	ce 17       	cp	r28, r30
    16ca:	df 07       	cpc	r29, r31
    16cc:	40 f4       	brcc	.+16     	; 0x16de <free+0x5a>
    16ce:	4a 81       	ldd	r20, Y+2	; 0x02
    16d0:	5b 81       	ldd	r21, Y+3	; 0x03
    16d2:	9e 01       	movw	r18, r28
    16d4:	41 15       	cp	r20, r1
    16d6:	51 05       	cpc	r21, r1
    16d8:	f1 f0       	breq	.+60     	; 0x1716 <free+0x92>
    16da:	ea 01       	movw	r28, r20
    16dc:	f5 cf       	rjmp	.-22     	; 0x16c8 <free+0x44>
    16de:	d3 83       	std	Z+3, r29	; 0x03
    16e0:	c2 83       	std	Z+2, r28	; 0x02
    16e2:	40 81       	ld	r20, Z
    16e4:	51 81       	ldd	r21, Z+1	; 0x01
    16e6:	84 0f       	add	r24, r20
    16e8:	95 1f       	adc	r25, r21
    16ea:	c8 17       	cp	r28, r24
    16ec:	d9 07       	cpc	r29, r25
    16ee:	59 f4       	brne	.+22     	; 0x1706 <free+0x82>
    16f0:	88 81       	ld	r24, Y
    16f2:	99 81       	ldd	r25, Y+1	; 0x01
    16f4:	84 0f       	add	r24, r20
    16f6:	95 1f       	adc	r25, r21
    16f8:	02 96       	adiw	r24, 0x02	; 2
    16fa:	91 83       	std	Z+1, r25	; 0x01
    16fc:	80 83       	st	Z, r24
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	9b 81       	ldd	r25, Y+3	; 0x03
    1702:	93 83       	std	Z+3, r25	; 0x03
    1704:	82 83       	std	Z+2, r24	; 0x02
    1706:	21 15       	cp	r18, r1
    1708:	31 05       	cpc	r19, r1
    170a:	29 f4       	brne	.+10     	; 0x1716 <free+0x92>
    170c:	f0 93 7c 02 	sts	0x027C, r31	; 0x80027c <__flp+0x1>
    1710:	e0 93 7b 02 	sts	0x027B, r30	; 0x80027b <__flp>
    1714:	3d c0       	rjmp	.+122    	; 0x1790 <free+0x10c>
    1716:	e9 01       	movw	r28, r18
    1718:	fb 83       	std	Y+3, r31	; 0x03
    171a:	ea 83       	std	Y+2, r30	; 0x02
    171c:	49 91       	ld	r20, Y+
    171e:	59 91       	ld	r21, Y+
    1720:	c4 0f       	add	r28, r20
    1722:	d5 1f       	adc	r29, r21
    1724:	ec 17       	cp	r30, r28
    1726:	fd 07       	cpc	r31, r29
    1728:	61 f4       	brne	.+24     	; 0x1742 <free+0xbe>
    172a:	80 81       	ld	r24, Z
    172c:	91 81       	ldd	r25, Z+1	; 0x01
    172e:	84 0f       	add	r24, r20
    1730:	95 1f       	adc	r25, r21
    1732:	02 96       	adiw	r24, 0x02	; 2
    1734:	e9 01       	movw	r28, r18
    1736:	99 83       	std	Y+1, r25	; 0x01
    1738:	88 83       	st	Y, r24
    173a:	82 81       	ldd	r24, Z+2	; 0x02
    173c:	93 81       	ldd	r25, Z+3	; 0x03
    173e:	9b 83       	std	Y+3, r25	; 0x03
    1740:	8a 83       	std	Y+2, r24	; 0x02
    1742:	e0 e0       	ldi	r30, 0x00	; 0
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	12 96       	adiw	r26, 0x02	; 2
    1748:	8d 91       	ld	r24, X+
    174a:	9c 91       	ld	r25, X
    174c:	13 97       	sbiw	r26, 0x03	; 3
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	19 f0       	breq	.+6      	; 0x1758 <free+0xd4>
    1752:	fd 01       	movw	r30, r26
    1754:	dc 01       	movw	r26, r24
    1756:	f7 cf       	rjmp	.-18     	; 0x1746 <free+0xc2>
    1758:	8d 91       	ld	r24, X+
    175a:	9c 91       	ld	r25, X
    175c:	11 97       	sbiw	r26, 0x01	; 1
    175e:	9d 01       	movw	r18, r26
    1760:	2e 5f       	subi	r18, 0xFE	; 254
    1762:	3f 4f       	sbci	r19, 0xFF	; 255
    1764:	82 0f       	add	r24, r18
    1766:	93 1f       	adc	r25, r19
    1768:	20 91 79 02 	lds	r18, 0x0279	; 0x800279 <__brkval>
    176c:	30 91 7a 02 	lds	r19, 0x027A	; 0x80027a <__brkval+0x1>
    1770:	28 17       	cp	r18, r24
    1772:	39 07       	cpc	r19, r25
    1774:	69 f4       	brne	.+26     	; 0x1790 <free+0x10c>
    1776:	30 97       	sbiw	r30, 0x00	; 0
    1778:	29 f4       	brne	.+10     	; 0x1784 <free+0x100>
    177a:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <__flp+0x1>
    177e:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <__flp>
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <free+0x104>
    1784:	13 82       	std	Z+3, r1	; 0x03
    1786:	12 82       	std	Z+2, r1	; 0x02
    1788:	b0 93 7a 02 	sts	0x027A, r27	; 0x80027a <__brkval+0x1>
    178c:	a0 93 79 02 	sts	0x0279, r26	; 0x800279 <__brkval>
    1790:	df 91       	pop	r29
    1792:	cf 91       	pop	r28
    1794:	08 95       	ret

00001796 <strnlen_P>:
    1796:	fc 01       	movw	r30, r24
    1798:	05 90       	lpm	r0, Z+
    179a:	61 50       	subi	r22, 0x01	; 1
    179c:	70 40       	sbci	r23, 0x00	; 0
    179e:	01 10       	cpse	r0, r1
    17a0:	d8 f7       	brcc	.-10     	; 0x1798 <strnlen_P+0x2>
    17a2:	80 95       	com	r24
    17a4:	90 95       	com	r25
    17a6:	8e 0f       	add	r24, r30
    17a8:	9f 1f       	adc	r25, r31
    17aa:	08 95       	ret

000017ac <memset>:
    17ac:	dc 01       	movw	r26, r24
    17ae:	01 c0       	rjmp	.+2      	; 0x17b2 <memset+0x6>
    17b0:	6d 93       	st	X+, r22
    17b2:	41 50       	subi	r20, 0x01	; 1
    17b4:	50 40       	sbci	r21, 0x00	; 0
    17b6:	e0 f7       	brcc	.-8      	; 0x17b0 <memset+0x4>
    17b8:	08 95       	ret

000017ba <strnlen>:
    17ba:	fc 01       	movw	r30, r24
    17bc:	61 50       	subi	r22, 0x01	; 1
    17be:	70 40       	sbci	r23, 0x00	; 0
    17c0:	01 90       	ld	r0, Z+
    17c2:	01 10       	cpse	r0, r1
    17c4:	d8 f7       	brcc	.-10     	; 0x17bc <strnlen+0x2>
    17c6:	80 95       	com	r24
    17c8:	90 95       	com	r25
    17ca:	8e 0f       	add	r24, r30
    17cc:	9f 1f       	adc	r25, r31
    17ce:	08 95       	ret

000017d0 <fputc>:
    17d0:	0f 93       	push	r16
    17d2:	1f 93       	push	r17
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
    17d8:	fb 01       	movw	r30, r22
    17da:	23 81       	ldd	r18, Z+3	; 0x03
    17dc:	21 fd       	sbrc	r18, 1
    17de:	03 c0       	rjmp	.+6      	; 0x17e6 <fputc+0x16>
    17e0:	8f ef       	ldi	r24, 0xFF	; 255
    17e2:	9f ef       	ldi	r25, 0xFF	; 255
    17e4:	2c c0       	rjmp	.+88     	; 0x183e <fputc+0x6e>
    17e6:	22 ff       	sbrs	r18, 2
    17e8:	16 c0       	rjmp	.+44     	; 0x1816 <fputc+0x46>
    17ea:	46 81       	ldd	r20, Z+6	; 0x06
    17ec:	57 81       	ldd	r21, Z+7	; 0x07
    17ee:	24 81       	ldd	r18, Z+4	; 0x04
    17f0:	35 81       	ldd	r19, Z+5	; 0x05
    17f2:	42 17       	cp	r20, r18
    17f4:	53 07       	cpc	r21, r19
    17f6:	44 f4       	brge	.+16     	; 0x1808 <fputc+0x38>
    17f8:	a0 81       	ld	r26, Z
    17fa:	b1 81       	ldd	r27, Z+1	; 0x01
    17fc:	9d 01       	movw	r18, r26
    17fe:	2f 5f       	subi	r18, 0xFF	; 255
    1800:	3f 4f       	sbci	r19, 0xFF	; 255
    1802:	31 83       	std	Z+1, r19	; 0x01
    1804:	20 83       	st	Z, r18
    1806:	8c 93       	st	X, r24
    1808:	26 81       	ldd	r18, Z+6	; 0x06
    180a:	37 81       	ldd	r19, Z+7	; 0x07
    180c:	2f 5f       	subi	r18, 0xFF	; 255
    180e:	3f 4f       	sbci	r19, 0xFF	; 255
    1810:	37 83       	std	Z+7, r19	; 0x07
    1812:	26 83       	std	Z+6, r18	; 0x06
    1814:	14 c0       	rjmp	.+40     	; 0x183e <fputc+0x6e>
    1816:	8b 01       	movw	r16, r22
    1818:	ec 01       	movw	r28, r24
    181a:	fb 01       	movw	r30, r22
    181c:	00 84       	ldd	r0, Z+8	; 0x08
    181e:	f1 85       	ldd	r31, Z+9	; 0x09
    1820:	e0 2d       	mov	r30, r0
    1822:	09 95       	icall
    1824:	89 2b       	or	r24, r25
    1826:	e1 f6       	brne	.-72     	; 0x17e0 <fputc+0x10>
    1828:	d8 01       	movw	r26, r16
    182a:	16 96       	adiw	r26, 0x06	; 6
    182c:	8d 91       	ld	r24, X+
    182e:	9c 91       	ld	r25, X
    1830:	17 97       	sbiw	r26, 0x07	; 7
    1832:	01 96       	adiw	r24, 0x01	; 1
    1834:	17 96       	adiw	r26, 0x07	; 7
    1836:	9c 93       	st	X, r25
    1838:	8e 93       	st	-X, r24
    183a:	16 97       	sbiw	r26, 0x06	; 6
    183c:	ce 01       	movw	r24, r28
    183e:	df 91       	pop	r29
    1840:	cf 91       	pop	r28
    1842:	1f 91       	pop	r17
    1844:	0f 91       	pop	r16
    1846:	08 95       	ret

00001848 <__ultoa_invert>:
    1848:	fa 01       	movw	r30, r20
    184a:	aa 27       	eor	r26, r26
    184c:	28 30       	cpi	r18, 0x08	; 8
    184e:	51 f1       	breq	.+84     	; 0x18a4 <__ultoa_invert+0x5c>
    1850:	20 31       	cpi	r18, 0x10	; 16
    1852:	81 f1       	breq	.+96     	; 0x18b4 <__ultoa_invert+0x6c>
    1854:	e8 94       	clt
    1856:	6f 93       	push	r22
    1858:	6e 7f       	andi	r22, 0xFE	; 254
    185a:	6e 5f       	subi	r22, 0xFE	; 254
    185c:	7f 4f       	sbci	r23, 0xFF	; 255
    185e:	8f 4f       	sbci	r24, 0xFF	; 255
    1860:	9f 4f       	sbci	r25, 0xFF	; 255
    1862:	af 4f       	sbci	r26, 0xFF	; 255
    1864:	b1 e0       	ldi	r27, 0x01	; 1
    1866:	3e d0       	rcall	.+124    	; 0x18e4 <__ultoa_invert+0x9c>
    1868:	b4 e0       	ldi	r27, 0x04	; 4
    186a:	3c d0       	rcall	.+120    	; 0x18e4 <__ultoa_invert+0x9c>
    186c:	67 0f       	add	r22, r23
    186e:	78 1f       	adc	r23, r24
    1870:	89 1f       	adc	r24, r25
    1872:	9a 1f       	adc	r25, r26
    1874:	a1 1d       	adc	r26, r1
    1876:	68 0f       	add	r22, r24
    1878:	79 1f       	adc	r23, r25
    187a:	8a 1f       	adc	r24, r26
    187c:	91 1d       	adc	r25, r1
    187e:	a1 1d       	adc	r26, r1
    1880:	6a 0f       	add	r22, r26
    1882:	71 1d       	adc	r23, r1
    1884:	81 1d       	adc	r24, r1
    1886:	91 1d       	adc	r25, r1
    1888:	a1 1d       	adc	r26, r1
    188a:	20 d0       	rcall	.+64     	; 0x18cc <__ultoa_invert+0x84>
    188c:	09 f4       	brne	.+2      	; 0x1890 <__ultoa_invert+0x48>
    188e:	68 94       	set
    1890:	3f 91       	pop	r19
    1892:	2a e0       	ldi	r18, 0x0A	; 10
    1894:	26 9f       	mul	r18, r22
    1896:	11 24       	eor	r1, r1
    1898:	30 19       	sub	r19, r0
    189a:	30 5d       	subi	r19, 0xD0	; 208
    189c:	31 93       	st	Z+, r19
    189e:	de f6       	brtc	.-74     	; 0x1856 <__ultoa_invert+0xe>
    18a0:	cf 01       	movw	r24, r30
    18a2:	08 95       	ret
    18a4:	46 2f       	mov	r20, r22
    18a6:	47 70       	andi	r20, 0x07	; 7
    18a8:	40 5d       	subi	r20, 0xD0	; 208
    18aa:	41 93       	st	Z+, r20
    18ac:	b3 e0       	ldi	r27, 0x03	; 3
    18ae:	0f d0       	rcall	.+30     	; 0x18ce <__ultoa_invert+0x86>
    18b0:	c9 f7       	brne	.-14     	; 0x18a4 <__ultoa_invert+0x5c>
    18b2:	f6 cf       	rjmp	.-20     	; 0x18a0 <__ultoa_invert+0x58>
    18b4:	46 2f       	mov	r20, r22
    18b6:	4f 70       	andi	r20, 0x0F	; 15
    18b8:	40 5d       	subi	r20, 0xD0	; 208
    18ba:	4a 33       	cpi	r20, 0x3A	; 58
    18bc:	18 f0       	brcs	.+6      	; 0x18c4 <__ultoa_invert+0x7c>
    18be:	49 5d       	subi	r20, 0xD9	; 217
    18c0:	31 fd       	sbrc	r19, 1
    18c2:	40 52       	subi	r20, 0x20	; 32
    18c4:	41 93       	st	Z+, r20
    18c6:	02 d0       	rcall	.+4      	; 0x18cc <__ultoa_invert+0x84>
    18c8:	a9 f7       	brne	.-22     	; 0x18b4 <__ultoa_invert+0x6c>
    18ca:	ea cf       	rjmp	.-44     	; 0x18a0 <__ultoa_invert+0x58>
    18cc:	b4 e0       	ldi	r27, 0x04	; 4
    18ce:	a6 95       	lsr	r26
    18d0:	97 95       	ror	r25
    18d2:	87 95       	ror	r24
    18d4:	77 95       	ror	r23
    18d6:	67 95       	ror	r22
    18d8:	ba 95       	dec	r27
    18da:	c9 f7       	brne	.-14     	; 0x18ce <__ultoa_invert+0x86>
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	61 05       	cpc	r22, r1
    18e0:	71 05       	cpc	r23, r1
    18e2:	08 95       	ret
    18e4:	9b 01       	movw	r18, r22
    18e6:	ac 01       	movw	r20, r24
    18e8:	0a 2e       	mov	r0, r26
    18ea:	06 94       	lsr	r0
    18ec:	57 95       	ror	r21
    18ee:	47 95       	ror	r20
    18f0:	37 95       	ror	r19
    18f2:	27 95       	ror	r18
    18f4:	ba 95       	dec	r27
    18f6:	c9 f7       	brne	.-14     	; 0x18ea <__ultoa_invert+0xa2>
    18f8:	62 0f       	add	r22, r18
    18fa:	73 1f       	adc	r23, r19
    18fc:	84 1f       	adc	r24, r20
    18fe:	95 1f       	adc	r25, r21
    1900:	a0 1d       	adc	r26, r0
    1902:	08 95       	ret

00001904 <__prologue_saves__>:
    1904:	2f 92       	push	r2
    1906:	3f 92       	push	r3
    1908:	4f 92       	push	r4
    190a:	5f 92       	push	r5
    190c:	6f 92       	push	r6
    190e:	7f 92       	push	r7
    1910:	8f 92       	push	r8
    1912:	9f 92       	push	r9
    1914:	af 92       	push	r10
    1916:	bf 92       	push	r11
    1918:	cf 92       	push	r12
    191a:	df 92       	push	r13
    191c:	ef 92       	push	r14
    191e:	ff 92       	push	r15
    1920:	0f 93       	push	r16
    1922:	1f 93       	push	r17
    1924:	cf 93       	push	r28
    1926:	df 93       	push	r29
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
    192c:	ca 1b       	sub	r28, r26
    192e:	db 0b       	sbc	r29, r27
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	f8 94       	cli
    1934:	de bf       	out	0x3e, r29	; 62
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	cd bf       	out	0x3d, r28	; 61
    193a:	09 94       	ijmp

0000193c <__epilogue_restores__>:
    193c:	2a 88       	ldd	r2, Y+18	; 0x12
    193e:	39 88       	ldd	r3, Y+17	; 0x11
    1940:	48 88       	ldd	r4, Y+16	; 0x10
    1942:	5f 84       	ldd	r5, Y+15	; 0x0f
    1944:	6e 84       	ldd	r6, Y+14	; 0x0e
    1946:	7d 84       	ldd	r7, Y+13	; 0x0d
    1948:	8c 84       	ldd	r8, Y+12	; 0x0c
    194a:	9b 84       	ldd	r9, Y+11	; 0x0b
    194c:	aa 84       	ldd	r10, Y+10	; 0x0a
    194e:	b9 84       	ldd	r11, Y+9	; 0x09
    1950:	c8 84       	ldd	r12, Y+8	; 0x08
    1952:	df 80       	ldd	r13, Y+7	; 0x07
    1954:	ee 80       	ldd	r14, Y+6	; 0x06
    1956:	fd 80       	ldd	r15, Y+5	; 0x05
    1958:	0c 81       	ldd	r16, Y+4	; 0x04
    195a:	1b 81       	ldd	r17, Y+3	; 0x03
    195c:	aa 81       	ldd	r26, Y+2	; 0x02
    195e:	b9 81       	ldd	r27, Y+1	; 0x01
    1960:	ce 0f       	add	r28, r30
    1962:	d1 1d       	adc	r29, r1
    1964:	0f b6       	in	r0, 0x3f	; 63
    1966:	f8 94       	cli
    1968:	de bf       	out	0x3e, r29	; 62
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	cd bf       	out	0x3d, r28	; 61
    196e:	ed 01       	movw	r28, r26
    1970:	08 95       	ret

00001972 <_exit>:
    1972:	f8 94       	cli

00001974 <__stop_program>:
    1974:	ff cf       	rjmp	.-2      	; 0x1974 <__stop_program>
