
NODE_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012c  00800100  000010be  00001152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  0080022c  0080022c  0000127e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000127e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000012dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000214f  00000000  00000000  00001550  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ef2  00000000  00000000  0000369f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001206  00000000  00000000  00004591  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005fc  00000000  00000000  00005798  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f5  00000000  00000000  00005d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001082  00000000  00000000  00006589  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  0000760b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_1>
       8:	0c 94 02 02 	jmp	0x404	; 0x404 <__vector_2>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	12 e0       	ldi	r17, 0x02	; 2
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ee eb       	ldi	r30, 0xBE	; 190
      84:	f0 e1       	ldi	r31, 0x10	; 16
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	ac 32       	cpi	r26, 0x2C	; 44
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	22 e0       	ldi	r18, 0x02	; 2
      94:	ac e2       	ldi	r26, 0x2C	; 44
      96:	b2 e0       	ldi	r27, 0x02	; 2
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a7 33       	cpi	r26, 0x37	; 55
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 2e 02 	call	0x45c	; 0x45c <main>
      a6:	0c 94 5d 08 	jmp	0x10ba	; 0x10ba <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_Init>:
			return LEFT;
		}
	}else{
		return NEUTRAL;
	}
}
      ae:	82 e8       	ldi	r24, 0x82	; 130
      b0:	8f bd       	out	0x2f, r24	; 47
      b2:	89 e1       	ldi	r24, 0x19	; 25
      b4:	8e bd       	out	0x2e, r24	; 46
      b6:	85 e0       	ldi	r24, 0x05	; 5
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	95 bd       	out	0x25, r25	; 37
      bc:	84 bd       	out	0x24, r24	; 36
      be:	82 e0       	ldi	r24, 0x02	; 2
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	9b bd       	out	0x2b, r25	; 43
      c4:	8a bd       	out	0x2a, r24	; 42
      c6:	87 b3       	in	r24, 0x17	; 23
      c8:	8b 7f       	andi	r24, 0xFB	; 251
      ca:	87 bb       	out	0x17, r24	; 23
      cc:	88 b3       	in	r24, 0x18	; 24
      ce:	84 60       	ori	r24, 0x04	; 4
      d0:	88 bb       	out	0x18, r24	; 24
      d2:	81 b3       	in	r24, 0x11	; 17
      d4:	80 62       	ori	r24, 0x20	; 32
      d6:	81 bb       	out	0x11, r24	; 17
      d8:	08 95       	ret

000000da <__vector_1>:

ISR(INT0_vect){
      da:	1f 92       	push	r1
      dc:	0f 92       	push	r0
      de:	0f b6       	in	r0, 0x3f	; 63
      e0:	0f 92       	push	r0
      e2:	11 24       	eor	r1, r1
      e4:	8f 93       	push	r24
    BUSY_flag = 1;
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <__data_end>
}
      ec:	8f 91       	pop	r24
      ee:	0f 90       	pop	r0
      f0:	0f be       	out	0x3f, r0	; 63
      f2:	0f 90       	pop	r0
      f4:	1f 90       	pop	r1
      f6:	18 95       	reti

000000f8 <can_handle_msg>:
#include "CANdrv.h"
#include "../MCP2515/MCP2515drv.h"


can_msg can_handle_msg(uint16_t id, uint8_t size, char msg_data[8]){
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
      fc:	dc 01       	movw	r26, r24
      fe:	e9 01       	movw	r28, r18
    can_msg msg;
    msg.id = id;
     100:	11 96       	adiw	r26, 0x01	; 1
     102:	7c 93       	st	X, r23
     104:	6e 93       	st	-X, r22
    msg.data_len = size;
     106:	12 96       	adiw	r26, 0x02	; 2
     108:	4c 93       	st	X, r20
     10a:	12 97       	sbiw	r26, 0x02	; 2
	//printf("her\n\r");
	for(uint8_t i = 0; i < size; i++){
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	0b c0       	rjmp	.+22     	; 0x126 <can_handle_msg+0x2e>
		msg.data[i] = msg_data[i];
     110:	69 2f       	mov	r22, r25
     112:	70 e0       	ldi	r23, 0x00	; 0
     114:	fe 01       	movw	r30, r28
     116:	e6 0f       	add	r30, r22
     118:	f7 1f       	adc	r31, r23
     11a:	30 81       	ld	r19, Z
     11c:	fd 01       	movw	r30, r26
     11e:	e6 0f       	add	r30, r22
     120:	f7 1f       	adc	r31, r23
     122:	33 83       	std	Z+3, r19	; 0x03
can_msg can_handle_msg(uint16_t id, uint8_t size, char msg_data[8]){
    can_msg msg;
    msg.id = id;
    msg.data_len = size;
	//printf("her\n\r");
	for(uint8_t i = 0; i < size; i++){
     124:	9f 5f       	subi	r25, 0xFF	; 255
     126:	94 17       	cp	r25, r20
     128:	98 f3       	brcs	.-26     	; 0x110 <can_handle_msg+0x18>
		
	}
	//printf("kis %d og %d\n\r", msg.data[0], msg.data[1]);
    return msg;
	
}
     12a:	cd 01       	movw	r24, r26
     12c:	df 91       	pop	r29
     12e:	cf 91       	pop	r28
     130:	08 95       	ret

00000132 <can_send_msg>:

void can_send_msg(can_msg* msg, BUFFER buffer){
     132:	df 92       	push	r13
     134:	ef 92       	push	r14
     136:	ff 92       	push	r15
     138:	0f 93       	push	r16
     13a:	1f 93       	push	r17
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	1f 92       	push	r1
     142:	cd b7       	in	r28, 0x3d	; 61
     144:	de b7       	in	r29, 0x3e	; 62
     146:	7c 01       	movw	r14, r24
     148:	d6 2e       	mov	r13, r22

    uint8_t idLSB = (msg->id & 0x7) << 5;
     14a:	fc 01       	movw	r30, r24
     14c:	60 81       	ld	r22, Z
     14e:	71 81       	ldd	r23, Z+1	; 0x01
     150:	16 2f       	mov	r17, r22
     152:	12 95       	swap	r17
     154:	11 0f       	add	r17, r17
     156:	10 7e       	andi	r17, 0xE0	; 224
    uint8_t idMSB = (msg->id & 0x1F) >> 3;
     158:	6f 71       	andi	r22, 0x1F	; 31
     15a:	77 27       	eor	r23, r23
     15c:	76 95       	lsr	r23
     15e:	67 95       	ror	r22
     160:	76 95       	lsr	r23
     162:	67 95       	ror	r22
     164:	76 95       	lsr	r23
     166:	67 95       	ror	r22
    //uint8_t buffer0stat;

    mcp2515_write(MCP_TXB0SIDH + 16*buffer, idMSB);
     168:	0d 2d       	mov	r16, r13
     16a:	02 95       	swap	r16
     16c:	00 7f       	andi	r16, 0xF0	; 240
     16e:	81 e3       	ldi	r24, 0x31	; 49
     170:	80 0f       	add	r24, r16
     172:	0e 94 7f 02 	call	0x4fe	; 0x4fe <mcp2515_write>
    mcp2515_write(MCP_TXB0SIDL + 16*buffer, idLSB);
     176:	61 2f       	mov	r22, r17
     178:	82 e3       	ldi	r24, 0x32	; 50
     17a:	80 0f       	add	r24, r16
     17c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <mcp2515_write>
    mcp2515_write(MCP_TXB0DLC + 16*buffer, msg->data_len);
     180:	f7 01       	movw	r30, r14
     182:	62 81       	ldd	r22, Z+2	; 0x02
     184:	85 e3       	ldi	r24, 0x35	; 53
     186:	80 0f       	add	r24, r16
     188:	0e 94 7f 02 	call	0x4fe	; 0x4fe <mcp2515_write>
	//printf("length: %d\n\r", msg->data_len);

    // Checking if the MCP is already requesting transmission in buffer 0
	uint8_t value;
	mcp2515_read(MCP_TXB0CTRL, &value);
     18c:	be 01       	movw	r22, r28
     18e:	6f 5f       	subi	r22, 0xFF	; 255
     190:	7f 4f       	sbci	r23, 0xFF	; 255
     192:	80 e3       	ldi	r24, 0x30	; 48
     194:	0e 94 5d 02 	call	0x4ba	; 0x4ba <mcp2515_read>
	//char* data_bytes = msg->data;
    if((value & 0x08) != 0x08){
     198:	89 81       	ldd	r24, Y+1	; 0x01
     19a:	83 ff       	sbrs	r24, 3
     19c:	0c c0       	rjmp	.+24     	; 0x1b6 <can_send_msg+0x84>
     19e:	14 c0       	rjmp	.+40     	; 0x1c8 <can_send_msg+0x96>
        for(uint8_t i = 0; i < msg->data_len; i++){
            mcp2515_write(MCP_TXBD0 + 16*buffer + i, msg->data[i]);
     1a0:	f7 01       	movw	r30, r14
     1a2:	e1 0f       	add	r30, r17
     1a4:	f1 1d       	adc	r31, r1
     1a6:	63 81       	ldd	r22, Z+3	; 0x03
     1a8:	81 2f       	mov	r24, r17
     1aa:	80 0f       	add	r24, r16
     1ac:	8a 5c       	subi	r24, 0xCA	; 202
     1ae:	0e 94 7f 02 	call	0x4fe	; 0x4fe <mcp2515_write>
    // Checking if the MCP is already requesting transmission in buffer 0
	uint8_t value;
	mcp2515_read(MCP_TXB0CTRL, &value);
	//char* data_bytes = msg->data;
    if((value & 0x08) != 0x08){
        for(uint8_t i = 0; i < msg->data_len; i++){
     1b2:	1f 5f       	subi	r17, 0xFF	; 255
     1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <can_send_msg+0x86>
     1b6:	10 e0       	ldi	r17, 0x00	; 0
     1b8:	f7 01       	movw	r30, r14
     1ba:	82 81       	ldd	r24, Z+2	; 0x02
     1bc:	18 17       	cp	r17, r24
     1be:	80 f3       	brcs	.-32     	; 0x1a0 <can_send_msg+0x6e>
            mcp2515_write(MCP_TXBD0 + 16*buffer + i, msg->data[i]);
			//printf("data %d\n\r", msg->data[i]);
			
        }
        mcp2515_request_to_send(MCP_RTS_TX0 + buffer);
     1c0:	81 e8       	ldi	r24, 0x81	; 129
     1c2:	8d 0d       	add	r24, r13
     1c4:	0e 94 95 02 	call	0x52a	; 0x52a <mcp2515_request_to_send>
    }
    //printf("id %d\n\r", msg.id);


}
     1c8:	0f 90       	pop	r0
     1ca:	df 91       	pop	r29
     1cc:	cf 91       	pop	r28
     1ce:	1f 91       	pop	r17
     1d0:	0f 91       	pop	r16
     1d2:	ff 90       	pop	r15
     1d4:	ef 90       	pop	r14
     1d6:	df 90       	pop	r13
     1d8:	08 95       	ret

000001da <can_recieve_msg>:


can_msg can_recieve_msg(BUFFER buffer){
     1da:	cf 92       	push	r12
     1dc:	df 92       	push	r13
     1de:	ff 92       	push	r15
     1e0:	0f 93       	push	r16
     1e2:	1f 93       	push	r17
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	00 d0       	rcall	.+0      	; 0x1ea <can_recieve_msg+0x10>
     1ea:	00 d0       	rcall	.+0      	; 0x1ec <can_recieve_msg+0x12>
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
     1f0:	6c 01       	movw	r12, r24
	//printf("her");
    can_msg msg;
	//printf("buffer%d\n\r", buffer);
    uint8_t idLSB;
	mcp2515_read(MCP_RXB0SIDL + 16*buffer, &idLSB);
     1f2:	f6 2e       	mov	r15, r22
     1f4:	ff 0c       	add	r15, r15
     1f6:	ff 0c       	add	r15, r15
     1f8:	ff 0c       	add	r15, r15
     1fa:	ff 0c       	add	r15, r15
     1fc:	be 01       	movw	r22, r28
     1fe:	6f 5f       	subi	r22, 0xFF	; 255
     200:	7f 4f       	sbci	r23, 0xFF	; 255
     202:	82 e6       	ldi	r24, 0x62	; 98
     204:	8f 0d       	add	r24, r15
     206:	0e 94 5d 02 	call	0x4ba	; 0x4ba <mcp2515_read>
    uint8_t idMSB;
	mcp2515_read(MCP_RXB0SIDH + 16*buffer, &idMSB);
     20a:	be 01       	movw	r22, r28
     20c:	6e 5f       	subi	r22, 0xFE	; 254
     20e:	7f 4f       	sbci	r23, 0xFF	; 255
     210:	81 e6       	ldi	r24, 0x61	; 97
     212:	8f 0d       	add	r24, r15
     214:	0e 94 5d 02 	call	0x4ba	; 0x4ba <mcp2515_read>
    uint8_t msg_length;
	mcp2515_read(MCP_RXB0DLC + 16*buffer, &msg_length);
     218:	be 01       	movw	r22, r28
     21a:	6d 5f       	subi	r22, 0xFD	; 253
     21c:	7f 4f       	sbci	r23, 0xFF	; 255
     21e:	85 e6       	ldi	r24, 0x65	; 101
     220:	8f 0d       	add	r24, r15
     222:	0e 94 5d 02 	call	0x4ba	; 0x4ba <mcp2515_read>
	msg_length = msg_length & 0b00001111;
     226:	0b 81       	ldd	r16, Y+3	; 0x03
     228:	0f 70       	andi	r16, 0x0F	; 15
     22a:	0b 83       	std	Y+3, r16	; 0x03
    msg.id = ((idLSB & 0b11100000) >> 5) | ((idMSB & 0b00011111) << 3);
     22c:	29 81       	ldd	r18, Y+1	; 0x01
     22e:	22 95       	swap	r18
     230:	26 95       	lsr	r18
     232:	27 70       	andi	r18, 0x07	; 7
     234:	8a 81       	ldd	r24, Y+2	; 0x02
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	88 0f       	add	r24, r24
     23a:	99 1f       	adc	r25, r25
     23c:	88 0f       	add	r24, r24
     23e:	99 1f       	adc	r25, r25
     240:	88 0f       	add	r24, r24
     242:	99 1f       	adc	r25, r25
     244:	99 27       	eor	r25, r25
     246:	82 2b       	or	r24, r18
     248:	f6 01       	movw	r30, r12
     24a:	91 83       	std	Z+1, r25	; 0x01
     24c:	80 83       	st	Z, r24
    
	//printf("length %d\n\r", msg_length);

    msg.data_len = msg_length;
     24e:	02 83       	std	Z+2, r16	; 0x02
	
    for(uint8_t i = 0; i < msg.data_len; i++){
     250:	10 e0       	ldi	r17, 0x00	; 0
     252:	0e c0       	rjmp	.+28     	; 0x270 <__EEPROM_REGION_LENGTH__+0x70>
		uint8_t data_tmp;
		mcp2515_read(MCP_RXBD0 + 16*buffer + i, &data_tmp);
     254:	81 2f       	mov	r24, r17
     256:	8f 0d       	add	r24, r15
     258:	be 01       	movw	r22, r28
     25a:	6c 5f       	subi	r22, 0xFC	; 252
     25c:	7f 4f       	sbci	r23, 0xFF	; 255
     25e:	8a 59       	subi	r24, 0x9A	; 154
     260:	0e 94 5d 02 	call	0x4ba	; 0x4ba <mcp2515_read>
        msg.data[i] = data_tmp;
     264:	f6 01       	movw	r30, r12
     266:	e1 0f       	add	r30, r17
     268:	f1 1d       	adc	r31, r1
     26a:	8c 81       	ldd	r24, Y+4	; 0x04
     26c:	83 83       	std	Z+3, r24	; 0x03
    
	//printf("length %d\n\r", msg_length);

    msg.data_len = msg_length;
	
    for(uint8_t i = 0; i < msg.data_len; i++){
     26e:	1f 5f       	subi	r17, 0xFF	; 255
     270:	10 17       	cp	r17, r16
     272:	80 f3       	brcs	.-32     	; 0x254 <__EEPROM_REGION_LENGTH__+0x54>
        msg.data[i] = data_tmp;
    }

    return msg;

}
     274:	c6 01       	movw	r24, r12
     276:	0f 90       	pop	r0
     278:	0f 90       	pop	r0
     27a:	0f 90       	pop	r0
     27c:	0f 90       	pop	r0
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	1f 91       	pop	r17
     284:	0f 91       	pop	r16
     286:	ff 90       	pop	r15
     288:	df 90       	pop	r13
     28a:	cf 90       	pop	r12
     28c:	08 95       	ret

0000028e <interrupt_handler>:

void interrupt_handler(){
     28e:	0f 93       	push	r16
     290:	1f 93       	push	r17
     292:	cf 93       	push	r28
     294:	df 93       	push	r29
     296:	cd b7       	in	r28, 0x3d	; 61
     298:	de b7       	in	r29, 0x3e	; 62
     29a:	66 97       	sbiw	r28, 0x16	; 22
     29c:	0f b6       	in	r0, 0x3f	; 63
     29e:	f8 94       	cli
     2a0:	de bf       	out	0x3e, r29	; 62
     2a2:	0f be       	out	0x3f, r0	; 63
     2a4:	cd bf       	out	0x3d, r28	; 61

    uint8_t status = mcp2515_read_status();
     2a6:	0e 94 9e 02 	call	0x53c	; 0x53c <mcp2515_read_status>
     2aa:	08 2f       	mov	r16, r24
    can_msg msg;

    if((status & stat_buff0_r) == stat_buff0_r){
     2ac:	80 ff       	sbrs	r24, 0
     2ae:	3d c0       	rjmp	.+122    	; 0x32a <interrupt_handler+0x9c>
        msg = can_recieve_msg(BUFFER0);
     2b0:	60 e0       	ldi	r22, 0x00	; 0
     2b2:	ce 01       	movw	r24, r28
     2b4:	0c 96       	adiw	r24, 0x0c	; 12
     2b6:	0e 94 ed 00 	call	0x1da	; 0x1da <can_recieve_msg>
     2ba:	8b e0       	ldi	r24, 0x0B	; 11
     2bc:	fe 01       	movw	r30, r28
     2be:	3c 96       	adiw	r30, 0x0c	; 12
     2c0:	de 01       	movw	r26, r28
     2c2:	11 96       	adiw	r26, 0x01	; 1
     2c4:	01 90       	ld	r0, Z+
     2c6:	0d 92       	st	X+, r0
     2c8:	8a 95       	dec	r24
     2ca:	e1 f7       	brne	.-8      	; 0x2c4 <interrupt_handler+0x36>
        printf("BUFFER0: ID = %d, MESSAGE = ", msg.id);
     2cc:	8a 81       	ldd	r24, Y+2	; 0x02
     2ce:	8f 93       	push	r24
     2d0:	89 81       	ldd	r24, Y+1	; 0x01
     2d2:	8f 93       	push	r24
     2d4:	86 e0       	ldi	r24, 0x06	; 6
     2d6:	91 e0       	ldi	r25, 0x01	; 1
     2d8:	9f 93       	push	r25
     2da:	8f 93       	push	r24
     2dc:	0e 94 3b 04 	call	0x876	; 0x876 <printf>
        for (uint8_t i = 0; i < msg.data_len; i++){
     2e0:	0f 90       	pop	r0
     2e2:	0f 90       	pop	r0
     2e4:	0f 90       	pop	r0
     2e6:	0f 90       	pop	r0
     2e8:	10 e0       	ldi	r17, 0x00	; 0
     2ea:	14 c0       	rjmp	.+40     	; 0x314 <interrupt_handler+0x86>
            printf("%d", msg.data[i]);
     2ec:	e4 e0       	ldi	r30, 0x04	; 4
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	ec 0f       	add	r30, r28
     2f2:	fd 1f       	adc	r31, r29
     2f4:	e1 0f       	add	r30, r17
     2f6:	f1 1d       	adc	r31, r1
     2f8:	80 81       	ld	r24, Z
     2fa:	1f 92       	push	r1
     2fc:	8f 93       	push	r24
     2fe:	83 e2       	ldi	r24, 0x23	; 35
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	9f 93       	push	r25
     304:	8f 93       	push	r24
     306:	0e 94 3b 04 	call	0x876	; 0x876 <printf>
    can_msg msg;

    if((status & stat_buff0_r) == stat_buff0_r){
        msg = can_recieve_msg(BUFFER0);
        printf("BUFFER0: ID = %d, MESSAGE = ", msg.id);
        for (uint8_t i = 0; i < msg.data_len; i++){
     30a:	1f 5f       	subi	r17, 0xFF	; 255
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	0f 90       	pop	r0
     312:	0f 90       	pop	r0
     314:	8b 81       	ldd	r24, Y+3	; 0x03
     316:	18 17       	cp	r17, r24
     318:	48 f3       	brcs	.-46     	; 0x2ec <interrupt_handler+0x5e>
            printf("%d", msg.data[i]);
        }
        printf("\n\r");
     31a:	83 e6       	ldi	r24, 0x63	; 99
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	9f 93       	push	r25
     320:	8f 93       	push	r24
     322:	0e 94 3b 04 	call	0x876	; 0x876 <printf>
     326:	0f 90       	pop	r0
     328:	0f 90       	pop	r0
    }
    
    if((status & stat_buff1_r) == stat_buff1_r){
     32a:	01 ff       	sbrs	r16, 1
     32c:	3d c0       	rjmp	.+122    	; 0x3a8 <interrupt_handler+0x11a>
        msg = can_recieve_msg(BUFFER1);
     32e:	61 e0       	ldi	r22, 0x01	; 1
     330:	ce 01       	movw	r24, r28
     332:	0c 96       	adiw	r24, 0x0c	; 12
     334:	0e 94 ed 00 	call	0x1da	; 0x1da <can_recieve_msg>
     338:	8b e0       	ldi	r24, 0x0B	; 11
     33a:	fe 01       	movw	r30, r28
     33c:	3c 96       	adiw	r30, 0x0c	; 12
     33e:	de 01       	movw	r26, r28
     340:	11 96       	adiw	r26, 0x01	; 1
     342:	01 90       	ld	r0, Z+
     344:	0d 92       	st	X+, r0
     346:	8a 95       	dec	r24
     348:	e1 f7       	brne	.-8      	; 0x342 <interrupt_handler+0xb4>
        printf("BUFFER1: ID = %d, MESSAGE = ", msg.id);
     34a:	8a 81       	ldd	r24, Y+2	; 0x02
     34c:	8f 93       	push	r24
     34e:	89 81       	ldd	r24, Y+1	; 0x01
     350:	8f 93       	push	r24
     352:	86 e2       	ldi	r24, 0x26	; 38
     354:	91 e0       	ldi	r25, 0x01	; 1
     356:	9f 93       	push	r25
     358:	8f 93       	push	r24
     35a:	0e 94 3b 04 	call	0x876	; 0x876 <printf>
        for (uint8_t i = 0; i < msg.data_len; i++){
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	10 e0       	ldi	r17, 0x00	; 0
     368:	14 c0       	rjmp	.+40     	; 0x392 <interrupt_handler+0x104>
            printf("%d", msg.data[i]);
     36a:	e4 e0       	ldi	r30, 0x04	; 4
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	ec 0f       	add	r30, r28
     370:	fd 1f       	adc	r31, r29
     372:	e1 0f       	add	r30, r17
     374:	f1 1d       	adc	r31, r1
     376:	80 81       	ld	r24, Z
     378:	1f 92       	push	r1
     37a:	8f 93       	push	r24
     37c:	83 e2       	ldi	r24, 0x23	; 35
     37e:	91 e0       	ldi	r25, 0x01	; 1
     380:	9f 93       	push	r25
     382:	8f 93       	push	r24
     384:	0e 94 3b 04 	call	0x876	; 0x876 <printf>
    }
    
    if((status & stat_buff1_r) == stat_buff1_r){
        msg = can_recieve_msg(BUFFER1);
        printf("BUFFER1: ID = %d, MESSAGE = ", msg.id);
        for (uint8_t i = 0; i < msg.data_len; i++){
     388:	1f 5f       	subi	r17, 0xFF	; 255
     38a:	0f 90       	pop	r0
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
     392:	8b 81       	ldd	r24, Y+3	; 0x03
     394:	18 17       	cp	r17, r24
     396:	48 f3       	brcs	.-46     	; 0x36a <interrupt_handler+0xdc>
            printf("%d", msg.data[i]);
        }
        printf("\n\r");
     398:	83 e6       	ldi	r24, 0x63	; 99
     39a:	91 e0       	ldi	r25, 0x01	; 1
     39c:	9f 93       	push	r25
     39e:	8f 93       	push	r24
     3a0:	0e 94 3b 04 	call	0x876	; 0x876 <printf>
     3a4:	0f 90       	pop	r0
     3a6:	0f 90       	pop	r0
    }

    if((status & stat_buff0_tx) == stat_buff0_tx){
     3a8:	03 ff       	sbrs	r16, 3
     3aa:	08 c0       	rjmp	.+16     	; 0x3bc <interrupt_handler+0x12e>
        //transmission successfull
		printf("yo\n\r");
     3ac:	83 e4       	ldi	r24, 0x43	; 67
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	9f 93       	push	r25
     3b2:	8f 93       	push	r24
     3b4:	0e 94 3b 04 	call	0x876	; 0x876 <printf>
     3b8:	0f 90       	pop	r0
     3ba:	0f 90       	pop	r0
    }
    if((status & stat_buff1_tx) == stat_buff1_tx){
        //transmission successfull
    }
    if((status & stat_buff0_busy) == stat_buff0_busy){
     3bc:	02 ff       	sbrs	r16, 2
     3be:	08 c0       	rjmp	.+16     	; 0x3d0 <interrupt_handler+0x142>
        printf("BUFFER 0 is currently busy \n\r");
     3c0:	88 e4       	ldi	r24, 0x48	; 72
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	9f 93       	push	r25
     3c6:	8f 93       	push	r24
     3c8:	0e 94 3b 04 	call	0x876	; 0x876 <printf>
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
    }
    if((status & stat_buff1_busy) == stat_buff1_busy){
     3d0:	04 ff       	sbrs	r16, 4
     3d2:	08 c0       	rjmp	.+16     	; 0x3e4 <interrupt_handler+0x156>
        printf("BUFFER 1 is currently busy \n\r");
     3d4:	86 e6       	ldi	r24, 0x66	; 102
     3d6:	91 e0       	ldi	r25, 0x01	; 1
     3d8:	9f 93       	push	r25
     3da:	8f 93       	push	r24
     3dc:	0e 94 3b 04 	call	0x876	; 0x876 <printf>
     3e0:	0f 90       	pop	r0
     3e2:	0f 90       	pop	r0
    }
   mcp2515_bit_modify(MCP_CANINTF, 0xFF, 0x00); 
     3e4:	40 e0       	ldi	r20, 0x00	; 0
     3e6:	6f ef       	ldi	r22, 0xFF	; 255
     3e8:	8c e2       	ldi	r24, 0x2C	; 44
     3ea:	0e 94 aa 02 	call	0x554	; 0x554 <mcp2515_bit_modify>

}
     3ee:	66 96       	adiw	r28, 0x16	; 22
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	f8 94       	cli
     3f4:	de bf       	out	0x3e, r29	; 62
     3f6:	0f be       	out	0x3f, r0	; 63
     3f8:	cd bf       	out	0x3d, r28	; 61
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	1f 91       	pop	r17
     400:	0f 91       	pop	r16
     402:	08 95       	ret

00000404 <__vector_2>:

ISR(INT1_vect){
     404:	1f 92       	push	r1
     406:	0f 92       	push	r0
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	0f 92       	push	r0
     40c:	11 24       	eor	r1, r1
     40e:	2f 93       	push	r18
     410:	3f 93       	push	r19
     412:	4f 93       	push	r20
     414:	5f 93       	push	r21
     416:	6f 93       	push	r22
     418:	7f 93       	push	r23
     41a:	8f 93       	push	r24
     41c:	9f 93       	push	r25
     41e:	af 93       	push	r26
     420:	bf 93       	push	r27
     422:	ef 93       	push	r30
     424:	ff 93       	push	r31
    interrupt_handler();
     426:	0e 94 47 01 	call	0x28e	; 0x28e <interrupt_handler>
	printf("nei\n\r");
     42a:	84 e8       	ldi	r24, 0x84	; 132
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	9f 93       	push	r25
     430:	8f 93       	push	r24
     432:	0e 94 3b 04 	call	0x876	; 0x876 <printf>
     436:	0f 90       	pop	r0
     438:	0f 90       	pop	r0
     43a:	ff 91       	pop	r31
     43c:	ef 91       	pop	r30
     43e:	bf 91       	pop	r27
     440:	af 91       	pop	r26
     442:	9f 91       	pop	r25
     444:	8f 91       	pop	r24
     446:	7f 91       	pop	r23
     448:	6f 91       	pop	r22
     44a:	5f 91       	pop	r21
     44c:	4f 91       	pop	r20
     44e:	3f 91       	pop	r19
     450:	2f 91       	pop	r18
     452:	0f 90       	pop	r0
     454:	0f be       	out	0x3f, r0	; 63
     456:	0f 90       	pop	r0
     458:	1f 90       	pop	r1
     45a:	18 95       	reti

0000045c <main>:
#include "MCP2515/MCP2515drv.h"
//#include "MENU/MENUdrv.h"
#include "CAN/CANdrv.h"

int main(void)
{
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	cd b7       	in	r28, 0x3d	; 61
     462:	de b7       	in	r29, 0x3e	; 62
     464:	66 97       	sbiw	r28, 0x16	; 22
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	f8 94       	cli
     46a:	de bf       	out	0x3e, r29	; 62
     46c:	0f be       	out	0x3f, r0	; 63
     46e:	cd bf       	out	0x3d, r28	; 61
	USART_Init(MYUBRR);
     470:	8f e1       	ldi	r24, 0x1F	; 31
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <USART_Init>
	XMEM_init();
     478:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <XMEM_init>
	//Int_INIT();
	ADC_Init();
     47c:	0e 94 57 00 	call	0xae	; 0xae <ADC_Init>
	oled_init();
     480:	0e 94 76 03 	call	0x6ec	; 0x6ec <oled_init>
	//LAB 4
	//oled_refresh_rate_init();
	
	
	//LAB 5
	mcp2515_init();
     484:	0e 94 2a 03 	call	0x654	; 0x654 <mcp2515_init>
	sei();
     488:	78 94       	sei
	can_msg melding;
	melding = can_handle_msg(0, 3, "Hei");
     48a:	2a e8       	ldi	r18, 0x8A	; 138
     48c:	31 e0       	ldi	r19, 0x01	; 1
     48e:	43 e0       	ldi	r20, 0x03	; 3
     490:	60 e0       	ldi	r22, 0x00	; 0
     492:	70 e0       	ldi	r23, 0x00	; 0
     494:	ce 01       	movw	r24, r28
     496:	0c 96       	adiw	r24, 0x0c	; 12
     498:	0e 94 7c 00 	call	0xf8	; 0xf8 <can_handle_msg>
     49c:	8b e0       	ldi	r24, 0x0B	; 11
     49e:	fe 01       	movw	r30, r28
     4a0:	3c 96       	adiw	r30, 0x0c	; 12
     4a2:	de 01       	movw	r26, r28
     4a4:	11 96       	adiw	r26, 0x01	; 1
     4a6:	01 90       	ld	r0, Z+
     4a8:	0d 92       	st	X+, r0
     4aa:	8a 95       	dec	r24
     4ac:	e1 f7       	brne	.-8      	; 0x4a6 <main+0x4a>
	can_send_msg(&melding, BUFFER0);
     4ae:	60 e0       	ldi	r22, 0x00	; 0
     4b0:	ce 01       	movw	r24, r28
     4b2:	01 96       	adiw	r24, 0x01	; 1
     4b4:	0e 94 99 00 	call	0x132	; 0x132 <can_send_msg>
     4b8:	ff cf       	rjmp	.-2      	; 0x4b8 <main+0x5c>

000004ba <mcp2515_read>:

    return 0;
}


void mcp2515_read(uint8_t address, uint8_t *value){
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	18 2f       	mov	r17, r24
     4c2:	eb 01       	movw	r28, r22

    PORTB &= ~(1 << PB4); // Select CAN - controller
     4c4:	88 b3       	in	r24, 0x18	; 24
     4c6:	8f 7e       	andi	r24, 0xEF	; 239
     4c8:	88 bb       	out	0x18, r24	; 24

    spi_write_char(MCP_READ); // Send read instruction
     4ca:	83 e0       	ldi	r24, 0x03	; 3
     4cc:	0e 94 bf 03 	call	0x77e	; 0x77e <spi_write_char>
    spi_write_char(address); // Send address
     4d0:	81 2f       	mov	r24, r17
     4d2:	0e 94 bf 03 	call	0x77e	; 0x77e <spi_write_char>
	
    *value = spi_read_char() ; // Read result
     4d6:	0e 94 c3 03 	call	0x786	; 0x786 <spi_read_char>
     4da:	88 83       	st	Y, r24
	
	//printf("value %d\n\r", value);
    
	PORTB |= (1 << PB4); // Deselect CAN - controller
     4dc:	88 b3       	in	r24, 0x18	; 24
     4de:	80 61       	ori	r24, 0x10	; 16
     4e0:	88 bb       	out	0x18, r24	; 24
	//*value = result;
}
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	08 95       	ret

000004ea <mcp2515_reset>:

void mcp2515_reset(){
    PORTB &= ~(1 << PB4); // Select CAN - controller
     4ea:	88 b3       	in	r24, 0x18	; 24
     4ec:	8f 7e       	andi	r24, 0xEF	; 239
     4ee:	88 bb       	out	0x18, r24	; 24
    spi_write_char(MCP_RESET);   //Write reset bit to SPI
     4f0:	80 ec       	ldi	r24, 0xC0	; 192
     4f2:	0e 94 bf 03 	call	0x77e	; 0x77e <spi_write_char>
    PORTB |= (1 << PB4); // Deselect CAN - controller
     4f6:	88 b3       	in	r24, 0x18	; 24
     4f8:	80 61       	ori	r24, 0x10	; 16
     4fa:	88 bb       	out	0x18, r24	; 24
     4fc:	08 95       	ret

000004fe <mcp2515_write>:
}

void mcp2515_write(uint8_t address, uint8_t data){
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	d8 2f       	mov	r29, r24
     504:	c6 2f       	mov	r28, r22
    PORTB &= ~(1 << PB4); // Select CAN - controller
     506:	88 b3       	in	r24, 0x18	; 24
     508:	8f 7e       	andi	r24, 0xEF	; 239
     50a:	88 bb       	out	0x18, r24	; 24
    spi_write_char(MCP_WRITE); // Send write instruction
     50c:	82 e0       	ldi	r24, 0x02	; 2
     50e:	0e 94 bf 03 	call	0x77e	; 0x77e <spi_write_char>
    spi_write_char(address); // Send address
     512:	8d 2f       	mov	r24, r29
     514:	0e 94 bf 03 	call	0x77e	; 0x77e <spi_write_char>
    spi_write_char(data); // Send data
     518:	8c 2f       	mov	r24, r28
     51a:	0e 94 bf 03 	call	0x77e	; 0x77e <spi_write_char>
    PORTB |= (1 << PB4); // Deselect CAN - controller
     51e:	88 b3       	in	r24, 0x18	; 24
     520:	80 61       	ori	r24, 0x10	; 16
     522:	88 bb       	out	0x18, r24	; 24
}
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	08 95       	ret

0000052a <mcp2515_request_to_send>:

void mcp2515_request_to_send(uint8_t buffer){
    PORTB &= ~(1 << PB4); // Select CAN - controller
     52a:	98 b3       	in	r25, 0x18	; 24
     52c:	9f 7e       	andi	r25, 0xEF	; 239
     52e:	98 bb       	out	0x18, r25	; 24
    //spi_write_char(MCP_RTS_ALL);   Write RTS bit to SPI
    spi_write_char(buffer);
     530:	0e 94 bf 03 	call	0x77e	; 0x77e <spi_write_char>
    PORTB |= (1 << PB4); // Deselect CAN - controller
     534:	88 b3       	in	r24, 0x18	; 24
     536:	80 61       	ori	r24, 0x10	; 16
     538:	88 bb       	out	0x18, r24	; 24
     53a:	08 95       	ret

0000053c <mcp2515_read_status>:
}

uint8_t mcp2515_read_status(){
    uint8_t status;
    PORTB &= ~(1 << PB4); // Select CAN - controller
     53c:	88 b3       	in	r24, 0x18	; 24
     53e:	8f 7e       	andi	r24, 0xEF	; 239
     540:	88 bb       	out	0x18, r24	; 24
    spi_write_char(MCP_READ_STATUS);   //Write read_status bit to SPI
     542:	80 ea       	ldi	r24, 0xA0	; 160
     544:	0e 94 bf 03 	call	0x77e	; 0x77e <spi_write_char>
    status = spi_read_char();
     548:	0e 94 c3 03 	call	0x786	; 0x786 <spi_read_char>
	PORTB |= (1 << PB4); // Deselect CAN - controller
     54c:	98 b3       	in	r25, 0x18	; 24
     54e:	90 61       	ori	r25, 0x10	; 16
     550:	98 bb       	out	0x18, r25	; 24

    return status;

}
     552:	08 95       	ret

00000554 <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
     554:	1f 93       	push	r17
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	18 2f       	mov	r17, r24
     55c:	d6 2f       	mov	r29, r22
     55e:	c4 2f       	mov	r28, r20
    PORTB &= ~(1 << DD_SS); // Select CAN - controller
     560:	88 b3       	in	r24, 0x18	; 24
     562:	8f 7e       	andi	r24, 0xEF	; 239
     564:	88 bb       	out	0x18, r24	; 24
    spi_write_char(MCP_BITMOD);   //Write read_status bit to SPI
     566:	85 e0       	ldi	r24, 0x05	; 5
     568:	0e 94 bf 03 	call	0x77e	; 0x77e <spi_write_char>
    spi_write_char(address); // Send address
     56c:	81 2f       	mov	r24, r17
     56e:	0e 94 bf 03 	call	0x77e	; 0x77e <spi_write_char>
    spi_write_char(mask); // Send mask
     572:	8d 2f       	mov	r24, r29
     574:	0e 94 bf 03 	call	0x77e	; 0x77e <spi_write_char>
    spi_write_char(data); // Send data
     578:	8c 2f       	mov	r24, r28
     57a:	0e 94 bf 03 	call	0x77e	; 0x77e <spi_write_char>
    PORTB |= (1 << DD_SS); // Deselect CAN - controller
     57e:	88 b3       	in	r24, 0x18	; 24
     580:	80 61       	ori	r24, 0x10	; 16
     582:	88 bb       	out	0x18, r24	; 24
}
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	1f 91       	pop	r17
     58a:	08 95       	ret

0000058c <can_interrupt_en>:
}

void can_interrupt_en(){
	
    // making pd3 input
    DDRD &= ~(1<<PD3);
     58c:	81 b3       	in	r24, 0x11	; 17
     58e:	87 7f       	andi	r24, 0xF7	; 247
     590:	81 bb       	out	0x11, r24	; 17
    // Enablign external interrupt on MCU on INT1
    GICR |= (1<<INT1);
     592:	8b b7       	in	r24, 0x3b	; 59
     594:	80 68       	ori	r24, 0x80	; 128
     596:	8b bf       	out	0x3b, r24	; 59
	
	MCUCR &= ~(1<<ISC10);
     598:	85 b7       	in	r24, 0x35	; 53
     59a:	8b 7f       	andi	r24, 0xFB	; 251
     59c:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<ISC11);
     59e:	85 b7       	in	r24, 0x35	; 53
     5a0:	88 60       	ori	r24, 0x08	; 8
     5a2:	85 bf       	out	0x35, r24	; 53
	
	mcp2515_bit_modify(MCP_CANINTE, 0xFF, 0x0F);
     5a4:	4f e0       	ldi	r20, 0x0F	; 15
     5a6:	6f ef       	ldi	r22, 0xFF	; 255
     5a8:	8b e2       	ldi	r24, 0x2B	; 43
     5aa:	0e 94 aa 02 	call	0x554	; 0x554 <mcp2515_bit_modify>
     5ae:	08 95       	ret

000005b0 <mcp2515_brp_init>:

}

uint8_t mcp2515_brp_init(){
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	1f 92       	push	r1
     5b6:	cd b7       	in	r28, 0x3d	; 61
     5b8:	de b7       	in	r29, 0x3e	; 62
	uint8_t value;
    // SJW<2:0> = 0b000 (0)-> 1 * Tq
    // BRP<5:0> = 0b00100 (4) -> BRP * Tosc
    mcp2515_bit_modify(MCP_CNF1, MCP_CNF1_MASK, MCP_CNF1_VAL);
     5ba:	43 e0       	ldi	r20, 0x03	; 3
     5bc:	6f ef       	ldi	r22, 0xFF	; 255
     5be:	8a e2       	ldi	r24, 0x2A	; 42
     5c0:	0e 94 aa 02 	call	0x554	; 0x554 <mcp2515_bit_modify>
	mcp2515_read(MCP_CNF1, &value);
     5c4:	be 01       	movw	r22, r28
     5c6:	6f 5f       	subi	r22, 0xFF	; 255
     5c8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ca:	8a e2       	ldi	r24, 0x2A	; 42
     5cc:	0e 94 5d 02 	call	0x4ba	; 0x4ba <mcp2515_read>
	//printf("value: %d\n\r", value);
    if ((value & MCP_CNF1_MASK) != MCP_CNF1_VAL) {
     5d0:	89 81       	ldd	r24, Y+1	; 0x01
     5d2:	83 30       	cpi	r24, 0x03	; 3
     5d4:	51 f0       	breq	.+20     	; 0x5ea <mcp2515_brp_init+0x3a>
        printf ("Wrong CNF1 value !\n\r");
     5d6:	8e e8       	ldi	r24, 0x8E	; 142
     5d8:	91 e0       	ldi	r25, 0x01	; 1
     5da:	9f 93       	push	r25
     5dc:	8f 93       	push	r24
     5de:	0e 94 3b 04 	call	0x876	; 0x876 <printf>
		return -1;
     5e2:	0f 90       	pop	r0
     5e4:	0f 90       	pop	r0
     5e6:	8f ef       	ldi	r24, 0xFF	; 255
     5e8:	31 c0       	rjmp	.+98     	; 0x64c <mcp2515_brp_init+0x9c>
    }

    // PHSEG1<5:3> = 0b110 (6) -> PS1 = (PHSEG + 1) * Tq
    // PHSEG2<2:0> = 0b001 (1) -> Progseg = (PHSEG2 + 1) * Tq
    mcp2515_bit_modify(MCP_CNF2, MCP_CNF2_MASK, MCP_CNF2_VAL);
     5ea:	41 e3       	ldi	r20, 0x31	; 49
     5ec:	6f e3       	ldi	r22, 0x3F	; 63
     5ee:	89 e2       	ldi	r24, 0x29	; 41
     5f0:	0e 94 aa 02 	call	0x554	; 0x554 <mcp2515_bit_modify>
	mcp2515_read(MCP_CNF1, &value);	//printf("value: %d\n\r", value);
     5f4:	be 01       	movw	r22, r28
     5f6:	6f 5f       	subi	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	8a e2       	ldi	r24, 0x2A	; 42
     5fc:	0e 94 5d 02 	call	0x4ba	; 0x4ba <mcp2515_read>
    if ((value & MCP_CNF1_MASK) != MCP_CNF1_VAL) {
     600:	89 81       	ldd	r24, Y+1	; 0x01
     602:	83 30       	cpi	r24, 0x03	; 3
     604:	51 f0       	breq	.+20     	; 0x61a <mcp2515_brp_init+0x6a>
        printf ("Wrong CNF2 value !\n\r");
     606:	83 ea       	ldi	r24, 0xA3	; 163
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	9f 93       	push	r25
     60c:	8f 93       	push	r24
     60e:	0e 94 3b 04 	call	0x876	; 0x876 <printf>
		return -1;
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
     616:	8f ef       	ldi	r24, 0xFF	; 255
     618:	19 c0       	rjmp	.+50     	; 0x64c <mcp2515_brp_init+0x9c>
    }
    
    // PHSEG2<2:0> = 0b101 (5) -> PS2 = (PHSEG2 + 1) * Tq
    mcp2515_bit_modify(MCP_CNF3, MCP_CNF3_MASK, MCP_CNF3_VAL);
     61a:	45 e0       	ldi	r20, 0x05	; 5
     61c:	67 e0       	ldi	r22, 0x07	; 7
     61e:	88 e2       	ldi	r24, 0x28	; 40
     620:	0e 94 aa 02 	call	0x554	; 0x554 <mcp2515_bit_modify>
	mcp2515_read(MCP_CNF1, &value);	//printf("value: %d\n\r", value);
     624:	be 01       	movw	r22, r28
     626:	6f 5f       	subi	r22, 0xFF	; 255
     628:	7f 4f       	sbci	r23, 0xFF	; 255
     62a:	8a e2       	ldi	r24, 0x2A	; 42
     62c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <mcp2515_read>
    if ((value & MCP_CNF1_MASK) != MCP_CNF1_VAL) {
     630:	89 81       	ldd	r24, Y+1	; 0x01
     632:	83 30       	cpi	r24, 0x03	; 3
     634:	51 f0       	breq	.+20     	; 0x64a <mcp2515_brp_init+0x9a>
        printf ("Wrong CNF3 value !\n\r");
     636:	88 eb       	ldi	r24, 0xB8	; 184
     638:	91 e0       	ldi	r25, 0x01	; 1
     63a:	9f 93       	push	r25
     63c:	8f 93       	push	r24
     63e:	0e 94 3b 04 	call	0x876	; 0x876 <printf>
		return -1;
     642:	0f 90       	pop	r0
     644:	0f 90       	pop	r0
     646:	8f ef       	ldi	r24, 0xFF	; 255
     648:	01 c0       	rjmp	.+2      	; 0x64c <mcp2515_brp_init+0x9c>
    }

    return 0;
     64a:	80 e0       	ldi	r24, 0x00	; 0
}
     64c:	0f 90       	pop	r0
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	08 95       	ret

00000654 <mcp2515_init>:
#include "../SPI/SPIdrv.h"




uint8_t mcp2515_init(){
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	1f 92       	push	r1
     65a:	cd b7       	in	r28, 0x3d	; 61
     65c:	de b7       	in	r29, 0x3e	; 62
    uint8_t value;
	spi_init_master(); // Initialize SPI
     65e:	0e 94 cd 03 	call	0x79a	; 0x79a <spi_init_master>
    mcp2515_reset(); // end reset - command
     662:	0e 94 75 02 	call	0x4ea	; 0x4ea <mcp2515_reset>
    // Self - testS
	//mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);


	mcp2515_read(MCP_CANSTAT, &value);	//printf("value: %d\n\r", value);
     666:	be 01       	movw	r22, r28
     668:	6f 5f       	subi	r22, 0xFF	; 255
     66a:	7f 4f       	sbci	r23, 0xFF	; 255
     66c:	8e e0       	ldi	r24, 0x0E	; 14
     66e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <mcp2515_read>
	//printf("val %d\n\r", value);
    if ((value & MODE_MASK) != MODE_CONFIG) {
     672:	89 81       	ldd	r24, Y+1	; 0x01
     674:	80 7e       	andi	r24, 0xE0	; 224
     676:	80 38       	cpi	r24, 0x80	; 128
     678:	51 f0       	breq	.+20     	; 0x68e <mcp2515_init+0x3a>
        printf ("MCP2515 is NOT in config mode after reset !\n\r");
     67a:	8d ec       	ldi	r24, 0xCD	; 205
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	9f 93       	push	r25
     680:	8f 93       	push	r24
     682:	0e 94 3b 04 	call	0x876	; 0x876 <printf>
		return -1;
     686:	0f 90       	pop	r0
     688:	0f 90       	pop	r0
     68a:	8f ef       	ldi	r24, 0xFF	; 255
     68c:	28 c0       	rjmp	.+80     	; 0x6de <mcp2515_init+0x8a>
    }
	
	
    if(mcp2515_brp_init() < 0){
     68e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <mcp2515_brp_init>
        return -2;
    } 
	
    can_interrupt_en();
     692:	0e 94 c6 02 	call	0x58c	; 0x58c <can_interrupt_en>
	//mcp2515_bit_modify(MCP_CANINTF, 0xFF, 0x00);
		
	mcp2515_bit_modify(MCP_RXB0CTRL, 0x60, 0x60);
     696:	40 e6       	ldi	r20, 0x60	; 96
     698:	60 e6       	ldi	r22, 0x60	; 96
     69a:	80 e6       	ldi	r24, 0x60	; 96
     69c:	0e 94 aa 02 	call	0x554	; 0x554 <mcp2515_bit_modify>
    mcp2515_bit_modify(MCP_RXB1CTRL, 0x60, 0x60);
     6a0:	40 e6       	ldi	r20, 0x60	; 96
     6a2:	60 e6       	ldi	r22, 0x60	; 96
     6a4:	80 e7       	ldi	r24, 0x70	; 112
     6a6:	0e 94 aa 02 	call	0x554	; 0x554 <mcp2515_bit_modify>


	
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);
     6aa:	40 e4       	ldi	r20, 0x40	; 64
     6ac:	60 ee       	ldi	r22, 0xE0	; 224
     6ae:	8f e0       	ldi	r24, 0x0F	; 15
     6b0:	0e 94 aa 02 	call	0x554	; 0x554 <mcp2515_bit_modify>
	mcp2515_read(MCP_CANSTAT, &value);
     6b4:	be 01       	movw	r22, r28
     6b6:	6f 5f       	subi	r22, 0xFF	; 255
     6b8:	7f 4f       	sbci	r23, 0xFF	; 255
     6ba:	8e e0       	ldi	r24, 0x0E	; 14
     6bc:	0e 94 5d 02 	call	0x4ba	; 0x4ba <mcp2515_read>
	//printf("value: %d\n\r", value);
	if ((value & MODE_MASK) != MODE_LOOPBACK) {
     6c0:	89 81       	ldd	r24, Y+1	; 0x01
     6c2:	80 7e       	andi	r24, 0xE0	; 224
     6c4:	80 34       	cpi	r24, 0x40	; 64
     6c6:	51 f0       	breq	.+20     	; 0x6dc <mcp2515_init+0x88>
        printf ("MCP2515 is NOT in LOOPBACK mode after reset !\n\r");
     6c8:	8b ef       	ldi	r24, 0xFB	; 251
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	9f 93       	push	r25
     6ce:	8f 93       	push	r24
     6d0:	0e 94 3b 04 	call	0x876	; 0x876 <printf>
		return -1;
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	01 c0       	rjmp	.+2      	; 0x6de <mcp2515_init+0x8a>
    }
	
    return 0;
     6dc:	80 e0       	ldi	r24, 0x00	; 0
}
     6de:	0f 90       	pop	r0
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	08 95       	ret

000006e6 <oled_write_command>:
	ext_mem[0]= data;
}

void oled_write_data(uint8_t data){
	volatile char *ext_mem = (char *) OLED_DATA_ADDRESS;
	ext_mem[0]= data;
     6e6:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xdc9>
     6ea:	08 95       	ret

000006ec <oled_init>:
}

void oled_init(){
    //Set inits according to datasheet
    oled_write_command(0xae); // display off
     6ec:	8e ea       	ldi	r24, 0xAE	; 174
     6ee:	0e 94 73 03 	call	0x6e6	; 0x6e6 <oled_write_command>
    oled_write_command(0xa1); //segment remap
     6f2:	81 ea       	ldi	r24, 0xA1	; 161
     6f4:	0e 94 73 03 	call	0x6e6	; 0x6e6 <oled_write_command>
    oled_write_command(0xda); //common pads hardware: alternative
     6f8:	8a ed       	ldi	r24, 0xDA	; 218
     6fa:	0e 94 73 03 	call	0x6e6	; 0x6e6 <oled_write_command>
    oled_write_command(0x12);
     6fe:	82 e1       	ldi	r24, 0x12	; 18
     700:	0e 94 73 03 	call	0x6e6	; 0x6e6 <oled_write_command>
    oled_write_command(0xc8); //common output scan direction:com63~com0
     704:	88 ec       	ldi	r24, 0xC8	; 200
     706:	0e 94 73 03 	call	0x6e6	; 0x6e6 <oled_write_command>
    oled_write_command(0xa8); //multiplex ration mode:63
     70a:	88 ea       	ldi	r24, 0xA8	; 168
     70c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <oled_write_command>
    oled_write_command(0x3f);
     710:	8f e3       	ldi	r24, 0x3F	; 63
     712:	0e 94 73 03 	call	0x6e6	; 0x6e6 <oled_write_command>
    oled_write_command(0xd5); //display divide ratio/osc. freq. mode
     716:	85 ed       	ldi	r24, 0xD5	; 213
     718:	0e 94 73 03 	call	0x6e6	; 0x6e6 <oled_write_command>
    oled_write_command(0x80);
     71c:	80 e8       	ldi	r24, 0x80	; 128
     71e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <oled_write_command>
    oled_write_command(0x81); //contrast control
     722:	81 e8       	ldi	r24, 0x81	; 129
     724:	0e 94 73 03 	call	0x6e6	; 0x6e6 <oled_write_command>
    oled_write_command(0x50);
     728:	80 e5       	ldi	r24, 0x50	; 80
     72a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <oled_write_command>
    oled_write_command(0xd9); //set pre-charge period
     72e:	89 ed       	ldi	r24, 0xD9	; 217
     730:	0e 94 73 03 	call	0x6e6	; 0x6e6 <oled_write_command>
    oled_write_command(0x21);
     734:	81 e2       	ldi	r24, 0x21	; 33
     736:	0e 94 73 03 	call	0x6e6	; 0x6e6 <oled_write_command>
    oled_write_command(0x20); //Set Memory Addressing Mode
     73a:	80 e2       	ldi	r24, 0x20	; 32
     73c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <oled_write_command>
    oled_write_command(0x02);
     740:	82 e0       	ldi	r24, 0x02	; 2
     742:	0e 94 73 03 	call	0x6e6	; 0x6e6 <oled_write_command>
    oled_write_command(0xdb); //VCOM deselect level mode
     746:	8b ed       	ldi	r24, 0xDB	; 219
     748:	0e 94 73 03 	call	0x6e6	; 0x6e6 <oled_write_command>
    oled_write_command(0x30);
     74c:	80 e3       	ldi	r24, 0x30	; 48
     74e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <oled_write_command>
    oled_write_command(0xad); //master configuration
     752:	8d ea       	ldi	r24, 0xAD	; 173
     754:	0e 94 73 03 	call	0x6e6	; 0x6e6 <oled_write_command>
    oled_write_command(0x00);
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <oled_write_command>
    oled_write_command(0xa4); //out follows RAM content
     75e:	84 ea       	ldi	r24, 0xA4	; 164
     760:	0e 94 73 03 	call	0x6e6	; 0x6e6 <oled_write_command>
    oled_write_command(0xa6); //set normal display
     764:	86 ea       	ldi	r24, 0xA6	; 166
     766:	0e 94 73 03 	call	0x6e6	; 0x6e6 <oled_write_command>
    oled_write_command(0xaf); // display on
     76a:	8f ea       	ldi	r24, 0xAF	; 175
     76c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <oled_write_command>

    //Set to page adressing mode
    oled_write_command(0x20);
     770:	80 e2       	ldi	r24, 0x20	; 32
     772:	0e 94 73 03 	call	0x6e6	; 0x6e6 <oled_write_command>
	oled_write_command(0b10);
     776:	82 e0       	ldi	r24, 0x02	; 2
     778:	0e 94 73 03 	call	0x6e6	; 0x6e6 <oled_write_command>
     77c:	08 95       	ret

0000077e <spi_write_char>:
	SPCR = (1<<SPE);
}
*/
void spi_write_char(char cData){
	//char flushbuffer;
    SPDR = cData;
     77e:	8f b9       	out	0x0f, r24	; 15
    //Wait for send to complete

	loop_until_bit_is_set(SPSR, SPIF);
     780:	77 9b       	sbis	0x0e, 7	; 14
     782:	fe cf       	rjmp	.-4      	; 0x780 <spi_write_char+0x2>
	//while(!(SPSR & (1<<SPIF)));
	//flushbuffer = SPDR;
}
     784:	08 95       	ret

00000786 <spi_read_char>:

char spi_read_char(){
    SPDR = 0xAA;
     786:	8a ea       	ldi	r24, 0xAA	; 170
     788:	8f b9       	out	0x0f, r24	; 15
	// Wait for reception to complete

    loop_until_bit_is_set(SPSR, SPIF);
     78a:	77 9b       	sbis	0x0e, 7	; 14
     78c:	fe cf       	rjmp	.-4      	; 0x78a <spi_read_char+0x4>
	//while(!(SPSR & (1<<SPIF)));
	// Return char in data register
	return SPDR;
     78e:	8f b1       	in	r24, 0x0f	; 15

}
     790:	08 95       	ret

00000792 <spi_set_ss_high>:

void spi_set_ss_high(){
    PORTB |= (1<<DD_SS);
     792:	88 b3       	in	r24, 0x18	; 24
     794:	80 61       	ori	r24, 0x10	; 16
     796:	88 bb       	out	0x18, r24	; 24
     798:	08 95       	ret

0000079a <spi_init_master>:
#include "SPIdrv.h"


void spi_init_master(){
    // Set MOSI and SCK - og SS - output, all others input
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS);
     79a:	80 eb       	ldi	r24, 0xB0	; 176
     79c:	87 bb       	out	0x17, r24	; 23
	
	//DDR_SPI &= ~(1<<DD_MISO);
	
	// Enable SPI, Master, set clock rate fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);//|(1<<SPIE);
     79e:	81 e5       	ldi	r24, 0x51	; 81
     7a0:	8d b9       	out	0x0d, r24	; 13
	//SPCR &= ~((1<<CPOL)|(1<<CPHA));
	spi_set_ss_high();
     7a2:	0e 94 c9 03 	call	0x792	; 0x792 <spi_set_ss_high>
     7a6:	08 95       	ret

000007a8 <XMEM_init>:
#include "SRAMdrv.h"

void XMEM_init(void){
	MCUCR |= (1<<SRE); //enable XMEM
     7a8:	85 b7       	in	r24, 0x35	; 53
     7aa:	80 68       	ori	r24, 0x80	; 128
     7ac:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2); // Masking P7-P4
     7ae:	80 b7       	in	r24, 0x30	; 48
     7b0:	80 62       	ori	r24, 0x20	; 32
     7b2:	80 bf       	out	0x30, r24	; 48
     7b4:	08 95       	ret

000007b6 <USART_Transmit>:
#include "UARTdrv.h"

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
     7b6:	5d 9b       	sbis	0x0b, 5	; 11
     7b8:	fe cf       	rjmp	.-4      	; 0x7b6 <USART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     7ba:	8c b9       	out	0x0c, r24	; 12
     7bc:	08 95       	ret

000007be <USART_Receive>:
}
unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
     7be:	5f 9b       	sbis	0x0b, 7	; 11
     7c0:	fe cf       	rjmp	.-4      	; 0x7be <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR0;
     7c2:	8c b1       	in	r24, 0x0c	; 12
}
     7c4:	08 95       	ret

000007c6 <USART_Init>:
void USART_Init( unsigned int ubrr )
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     7c6:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     7c8:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     7ca:	88 e1       	ldi	r24, 0x18	; 24
     7cc:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     7ce:	8e e8       	ldi	r24, 0x8E	; 142
     7d0:	80 bd       	out	0x20, r24	; 32
	fdevopen(USART_Transmit,USART_Receive);
     7d2:	6f ed       	ldi	r22, 0xDF	; 223
     7d4:	73 e0       	ldi	r23, 0x03	; 3
     7d6:	8b ed       	ldi	r24, 0xDB	; 219
     7d8:	93 e0       	ldi	r25, 0x03	; 3
     7da:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <fdevopen>
     7de:	08 95       	ret

000007e0 <fdevopen>:
     7e0:	0f 93       	push	r16
     7e2:	1f 93       	push	r17
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	00 97       	sbiw	r24, 0x00	; 0
     7ea:	31 f4       	brne	.+12     	; 0x7f8 <fdevopen+0x18>
     7ec:	61 15       	cp	r22, r1
     7ee:	71 05       	cpc	r23, r1
     7f0:	19 f4       	brne	.+6      	; 0x7f8 <fdevopen+0x18>
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	3a c0       	rjmp	.+116    	; 0x86c <fdevopen+0x8c>
     7f8:	8b 01       	movw	r16, r22
     7fa:	ec 01       	movw	r28, r24
     7fc:	6e e0       	ldi	r22, 0x0E	; 14
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	0e 94 32 06 	call	0xc64	; 0xc64 <calloc>
     808:	fc 01       	movw	r30, r24
     80a:	89 2b       	or	r24, r25
     80c:	91 f3       	breq	.-28     	; 0x7f2 <fdevopen+0x12>
     80e:	80 e8       	ldi	r24, 0x80	; 128
     810:	83 83       	std	Z+3, r24	; 0x03
     812:	01 15       	cp	r16, r1
     814:	11 05       	cpc	r17, r1
     816:	71 f0       	breq	.+28     	; 0x834 <fdevopen+0x54>
     818:	13 87       	std	Z+11, r17	; 0x0b
     81a:	02 87       	std	Z+10, r16	; 0x0a
     81c:	81 e8       	ldi	r24, 0x81	; 129
     81e:	83 83       	std	Z+3, r24	; 0x03
     820:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <__iob>
     824:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <__iob+0x1>
     828:	89 2b       	or	r24, r25
     82a:	21 f4       	brne	.+8      	; 0x834 <fdevopen+0x54>
     82c:	f0 93 2e 02 	sts	0x022E, r31	; 0x80022e <__iob+0x1>
     830:	e0 93 2d 02 	sts	0x022D, r30	; 0x80022d <__iob>
     834:	20 97       	sbiw	r28, 0x00	; 0
     836:	c9 f0       	breq	.+50     	; 0x86a <fdevopen+0x8a>
     838:	d1 87       	std	Z+9, r29	; 0x09
     83a:	c0 87       	std	Z+8, r28	; 0x08
     83c:	83 81       	ldd	r24, Z+3	; 0x03
     83e:	82 60       	ori	r24, 0x02	; 2
     840:	83 83       	std	Z+3, r24	; 0x03
     842:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <__iob+0x2>
     846:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <__iob+0x3>
     84a:	89 2b       	or	r24, r25
     84c:	71 f4       	brne	.+28     	; 0x86a <fdevopen+0x8a>
     84e:	f0 93 30 02 	sts	0x0230, r31	; 0x800230 <__iob+0x3>
     852:	e0 93 2f 02 	sts	0x022F, r30	; 0x80022f <__iob+0x2>
     856:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <__iob+0x4>
     85a:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <__iob+0x5>
     85e:	89 2b       	or	r24, r25
     860:	21 f4       	brne	.+8      	; 0x86a <fdevopen+0x8a>
     862:	f0 93 32 02 	sts	0x0232, r31	; 0x800232 <__iob+0x5>
     866:	e0 93 31 02 	sts	0x0231, r30	; 0x800231 <__iob+0x4>
     86a:	cf 01       	movw	r24, r30
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	08 95       	ret

00000876 <printf>:
     876:	a0 e0       	ldi	r26, 0x00	; 0
     878:	b0 e0       	ldi	r27, 0x00	; 0
     87a:	e1 e4       	ldi	r30, 0x41	; 65
     87c:	f4 e0       	ldi	r31, 0x04	; 4
     87e:	0c 94 36 08 	jmp	0x106c	; 0x106c <__prologue_saves__+0x20>
     882:	ae 01       	movw	r20, r28
     884:	4b 5f       	subi	r20, 0xFB	; 251
     886:	5f 4f       	sbci	r21, 0xFF	; 255
     888:	fa 01       	movw	r30, r20
     88a:	61 91       	ld	r22, Z+
     88c:	71 91       	ld	r23, Z+
     88e:	af 01       	movw	r20, r30
     890:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <__iob+0x2>
     894:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <__iob+0x3>
     898:	0e 94 51 04 	call	0x8a2	; 0x8a2 <vfprintf>
     89c:	e2 e0       	ldi	r30, 0x02	; 2
     89e:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__epilogue_restores__+0x20>

000008a2 <vfprintf>:
     8a2:	ab e0       	ldi	r26, 0x0B	; 11
     8a4:	b0 e0       	ldi	r27, 0x00	; 0
     8a6:	e7 e5       	ldi	r30, 0x57	; 87
     8a8:	f4 e0       	ldi	r31, 0x04	; 4
     8aa:	0c 94 26 08 	jmp	0x104c	; 0x104c <__prologue_saves__>
     8ae:	6c 01       	movw	r12, r24
     8b0:	7b 01       	movw	r14, r22
     8b2:	8a 01       	movw	r16, r20
     8b4:	fc 01       	movw	r30, r24
     8b6:	17 82       	std	Z+7, r1	; 0x07
     8b8:	16 82       	std	Z+6, r1	; 0x06
     8ba:	83 81       	ldd	r24, Z+3	; 0x03
     8bc:	81 ff       	sbrs	r24, 1
     8be:	cc c1       	rjmp	.+920    	; 0xc58 <vfprintf+0x3b6>
     8c0:	ce 01       	movw	r24, r28
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	3c 01       	movw	r6, r24
     8c6:	f6 01       	movw	r30, r12
     8c8:	93 81       	ldd	r25, Z+3	; 0x03
     8ca:	f7 01       	movw	r30, r14
     8cc:	93 fd       	sbrc	r25, 3
     8ce:	85 91       	lpm	r24, Z+
     8d0:	93 ff       	sbrs	r25, 3
     8d2:	81 91       	ld	r24, Z+
     8d4:	7f 01       	movw	r14, r30
     8d6:	88 23       	and	r24, r24
     8d8:	09 f4       	brne	.+2      	; 0x8dc <vfprintf+0x3a>
     8da:	ba c1       	rjmp	.+884    	; 0xc50 <vfprintf+0x3ae>
     8dc:	85 32       	cpi	r24, 0x25	; 37
     8de:	39 f4       	brne	.+14     	; 0x8ee <vfprintf+0x4c>
     8e0:	93 fd       	sbrc	r25, 3
     8e2:	85 91       	lpm	r24, Z+
     8e4:	93 ff       	sbrs	r25, 3
     8e6:	81 91       	ld	r24, Z+
     8e8:	7f 01       	movw	r14, r30
     8ea:	85 32       	cpi	r24, 0x25	; 37
     8ec:	29 f4       	brne	.+10     	; 0x8f8 <vfprintf+0x56>
     8ee:	b6 01       	movw	r22, r12
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	0e 94 8c 07 	call	0xf18	; 0xf18 <fputc>
     8f6:	e7 cf       	rjmp	.-50     	; 0x8c6 <vfprintf+0x24>
     8f8:	91 2c       	mov	r9, r1
     8fa:	21 2c       	mov	r2, r1
     8fc:	31 2c       	mov	r3, r1
     8fe:	ff e1       	ldi	r31, 0x1F	; 31
     900:	f3 15       	cp	r31, r3
     902:	d8 f0       	brcs	.+54     	; 0x93a <vfprintf+0x98>
     904:	8b 32       	cpi	r24, 0x2B	; 43
     906:	79 f0       	breq	.+30     	; 0x926 <vfprintf+0x84>
     908:	38 f4       	brcc	.+14     	; 0x918 <vfprintf+0x76>
     90a:	80 32       	cpi	r24, 0x20	; 32
     90c:	79 f0       	breq	.+30     	; 0x92c <vfprintf+0x8a>
     90e:	83 32       	cpi	r24, 0x23	; 35
     910:	a1 f4       	brne	.+40     	; 0x93a <vfprintf+0x98>
     912:	23 2d       	mov	r18, r3
     914:	20 61       	ori	r18, 0x10	; 16
     916:	1d c0       	rjmp	.+58     	; 0x952 <vfprintf+0xb0>
     918:	8d 32       	cpi	r24, 0x2D	; 45
     91a:	61 f0       	breq	.+24     	; 0x934 <vfprintf+0x92>
     91c:	80 33       	cpi	r24, 0x30	; 48
     91e:	69 f4       	brne	.+26     	; 0x93a <vfprintf+0x98>
     920:	23 2d       	mov	r18, r3
     922:	21 60       	ori	r18, 0x01	; 1
     924:	16 c0       	rjmp	.+44     	; 0x952 <vfprintf+0xb0>
     926:	83 2d       	mov	r24, r3
     928:	82 60       	ori	r24, 0x02	; 2
     92a:	38 2e       	mov	r3, r24
     92c:	e3 2d       	mov	r30, r3
     92e:	e4 60       	ori	r30, 0x04	; 4
     930:	3e 2e       	mov	r3, r30
     932:	2a c0       	rjmp	.+84     	; 0x988 <vfprintf+0xe6>
     934:	f3 2d       	mov	r31, r3
     936:	f8 60       	ori	r31, 0x08	; 8
     938:	1d c0       	rjmp	.+58     	; 0x974 <vfprintf+0xd2>
     93a:	37 fc       	sbrc	r3, 7
     93c:	2d c0       	rjmp	.+90     	; 0x998 <vfprintf+0xf6>
     93e:	20 ed       	ldi	r18, 0xD0	; 208
     940:	28 0f       	add	r18, r24
     942:	2a 30       	cpi	r18, 0x0A	; 10
     944:	40 f0       	brcs	.+16     	; 0x956 <vfprintf+0xb4>
     946:	8e 32       	cpi	r24, 0x2E	; 46
     948:	b9 f4       	brne	.+46     	; 0x978 <vfprintf+0xd6>
     94a:	36 fc       	sbrc	r3, 6
     94c:	81 c1       	rjmp	.+770    	; 0xc50 <vfprintf+0x3ae>
     94e:	23 2d       	mov	r18, r3
     950:	20 64       	ori	r18, 0x40	; 64
     952:	32 2e       	mov	r3, r18
     954:	19 c0       	rjmp	.+50     	; 0x988 <vfprintf+0xe6>
     956:	36 fe       	sbrs	r3, 6
     958:	06 c0       	rjmp	.+12     	; 0x966 <vfprintf+0xc4>
     95a:	8a e0       	ldi	r24, 0x0A	; 10
     95c:	98 9e       	mul	r9, r24
     95e:	20 0d       	add	r18, r0
     960:	11 24       	eor	r1, r1
     962:	92 2e       	mov	r9, r18
     964:	11 c0       	rjmp	.+34     	; 0x988 <vfprintf+0xe6>
     966:	ea e0       	ldi	r30, 0x0A	; 10
     968:	2e 9e       	mul	r2, r30
     96a:	20 0d       	add	r18, r0
     96c:	11 24       	eor	r1, r1
     96e:	22 2e       	mov	r2, r18
     970:	f3 2d       	mov	r31, r3
     972:	f0 62       	ori	r31, 0x20	; 32
     974:	3f 2e       	mov	r3, r31
     976:	08 c0       	rjmp	.+16     	; 0x988 <vfprintf+0xe6>
     978:	8c 36       	cpi	r24, 0x6C	; 108
     97a:	21 f4       	brne	.+8      	; 0x984 <vfprintf+0xe2>
     97c:	83 2d       	mov	r24, r3
     97e:	80 68       	ori	r24, 0x80	; 128
     980:	38 2e       	mov	r3, r24
     982:	02 c0       	rjmp	.+4      	; 0x988 <vfprintf+0xe6>
     984:	88 36       	cpi	r24, 0x68	; 104
     986:	41 f4       	brne	.+16     	; 0x998 <vfprintf+0xf6>
     988:	f7 01       	movw	r30, r14
     98a:	93 fd       	sbrc	r25, 3
     98c:	85 91       	lpm	r24, Z+
     98e:	93 ff       	sbrs	r25, 3
     990:	81 91       	ld	r24, Z+
     992:	7f 01       	movw	r14, r30
     994:	81 11       	cpse	r24, r1
     996:	b3 cf       	rjmp	.-154    	; 0x8fe <vfprintf+0x5c>
     998:	98 2f       	mov	r25, r24
     99a:	9f 7d       	andi	r25, 0xDF	; 223
     99c:	95 54       	subi	r25, 0x45	; 69
     99e:	93 30       	cpi	r25, 0x03	; 3
     9a0:	28 f4       	brcc	.+10     	; 0x9ac <vfprintf+0x10a>
     9a2:	0c 5f       	subi	r16, 0xFC	; 252
     9a4:	1f 4f       	sbci	r17, 0xFF	; 255
     9a6:	9f e3       	ldi	r25, 0x3F	; 63
     9a8:	99 83       	std	Y+1, r25	; 0x01
     9aa:	0d c0       	rjmp	.+26     	; 0x9c6 <vfprintf+0x124>
     9ac:	83 36       	cpi	r24, 0x63	; 99
     9ae:	31 f0       	breq	.+12     	; 0x9bc <vfprintf+0x11a>
     9b0:	83 37       	cpi	r24, 0x73	; 115
     9b2:	71 f0       	breq	.+28     	; 0x9d0 <vfprintf+0x12e>
     9b4:	83 35       	cpi	r24, 0x53	; 83
     9b6:	09 f0       	breq	.+2      	; 0x9ba <vfprintf+0x118>
     9b8:	59 c0       	rjmp	.+178    	; 0xa6c <vfprintf+0x1ca>
     9ba:	21 c0       	rjmp	.+66     	; 0x9fe <vfprintf+0x15c>
     9bc:	f8 01       	movw	r30, r16
     9be:	80 81       	ld	r24, Z
     9c0:	89 83       	std	Y+1, r24	; 0x01
     9c2:	0e 5f       	subi	r16, 0xFE	; 254
     9c4:	1f 4f       	sbci	r17, 0xFF	; 255
     9c6:	88 24       	eor	r8, r8
     9c8:	83 94       	inc	r8
     9ca:	91 2c       	mov	r9, r1
     9cc:	53 01       	movw	r10, r6
     9ce:	13 c0       	rjmp	.+38     	; 0x9f6 <vfprintf+0x154>
     9d0:	28 01       	movw	r4, r16
     9d2:	f2 e0       	ldi	r31, 0x02	; 2
     9d4:	4f 0e       	add	r4, r31
     9d6:	51 1c       	adc	r5, r1
     9d8:	f8 01       	movw	r30, r16
     9da:	a0 80       	ld	r10, Z
     9dc:	b1 80       	ldd	r11, Z+1	; 0x01
     9de:	36 fe       	sbrs	r3, 6
     9e0:	03 c0       	rjmp	.+6      	; 0x9e8 <vfprintf+0x146>
     9e2:	69 2d       	mov	r22, r9
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	02 c0       	rjmp	.+4      	; 0x9ec <vfprintf+0x14a>
     9e8:	6f ef       	ldi	r22, 0xFF	; 255
     9ea:	7f ef       	ldi	r23, 0xFF	; 255
     9ec:	c5 01       	movw	r24, r10
     9ee:	0e 94 81 07 	call	0xf02	; 0xf02 <strnlen>
     9f2:	4c 01       	movw	r8, r24
     9f4:	82 01       	movw	r16, r4
     9f6:	f3 2d       	mov	r31, r3
     9f8:	ff 77       	andi	r31, 0x7F	; 127
     9fa:	3f 2e       	mov	r3, r31
     9fc:	16 c0       	rjmp	.+44     	; 0xa2a <vfprintf+0x188>
     9fe:	28 01       	movw	r4, r16
     a00:	22 e0       	ldi	r18, 0x02	; 2
     a02:	42 0e       	add	r4, r18
     a04:	51 1c       	adc	r5, r1
     a06:	f8 01       	movw	r30, r16
     a08:	a0 80       	ld	r10, Z
     a0a:	b1 80       	ldd	r11, Z+1	; 0x01
     a0c:	36 fe       	sbrs	r3, 6
     a0e:	03 c0       	rjmp	.+6      	; 0xa16 <vfprintf+0x174>
     a10:	69 2d       	mov	r22, r9
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	02 c0       	rjmp	.+4      	; 0xa1a <vfprintf+0x178>
     a16:	6f ef       	ldi	r22, 0xFF	; 255
     a18:	7f ef       	ldi	r23, 0xFF	; 255
     a1a:	c5 01       	movw	r24, r10
     a1c:	0e 94 6f 07 	call	0xede	; 0xede <strnlen_P>
     a20:	4c 01       	movw	r8, r24
     a22:	f3 2d       	mov	r31, r3
     a24:	f0 68       	ori	r31, 0x80	; 128
     a26:	3f 2e       	mov	r3, r31
     a28:	82 01       	movw	r16, r4
     a2a:	33 fc       	sbrc	r3, 3
     a2c:	1b c0       	rjmp	.+54     	; 0xa64 <vfprintf+0x1c2>
     a2e:	82 2d       	mov	r24, r2
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	88 16       	cp	r8, r24
     a34:	99 06       	cpc	r9, r25
     a36:	b0 f4       	brcc	.+44     	; 0xa64 <vfprintf+0x1c2>
     a38:	b6 01       	movw	r22, r12
     a3a:	80 e2       	ldi	r24, 0x20	; 32
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	0e 94 8c 07 	call	0xf18	; 0xf18 <fputc>
     a42:	2a 94       	dec	r2
     a44:	f4 cf       	rjmp	.-24     	; 0xa2e <vfprintf+0x18c>
     a46:	f5 01       	movw	r30, r10
     a48:	37 fc       	sbrc	r3, 7
     a4a:	85 91       	lpm	r24, Z+
     a4c:	37 fe       	sbrs	r3, 7
     a4e:	81 91       	ld	r24, Z+
     a50:	5f 01       	movw	r10, r30
     a52:	b6 01       	movw	r22, r12
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 8c 07 	call	0xf18	; 0xf18 <fputc>
     a5a:	21 10       	cpse	r2, r1
     a5c:	2a 94       	dec	r2
     a5e:	21 e0       	ldi	r18, 0x01	; 1
     a60:	82 1a       	sub	r8, r18
     a62:	91 08       	sbc	r9, r1
     a64:	81 14       	cp	r8, r1
     a66:	91 04       	cpc	r9, r1
     a68:	71 f7       	brne	.-36     	; 0xa46 <vfprintf+0x1a4>
     a6a:	e8 c0       	rjmp	.+464    	; 0xc3c <vfprintf+0x39a>
     a6c:	84 36       	cpi	r24, 0x64	; 100
     a6e:	11 f0       	breq	.+4      	; 0xa74 <vfprintf+0x1d2>
     a70:	89 36       	cpi	r24, 0x69	; 105
     a72:	41 f5       	brne	.+80     	; 0xac4 <vfprintf+0x222>
     a74:	f8 01       	movw	r30, r16
     a76:	37 fe       	sbrs	r3, 7
     a78:	07 c0       	rjmp	.+14     	; 0xa88 <vfprintf+0x1e6>
     a7a:	60 81       	ld	r22, Z
     a7c:	71 81       	ldd	r23, Z+1	; 0x01
     a7e:	82 81       	ldd	r24, Z+2	; 0x02
     a80:	93 81       	ldd	r25, Z+3	; 0x03
     a82:	0c 5f       	subi	r16, 0xFC	; 252
     a84:	1f 4f       	sbci	r17, 0xFF	; 255
     a86:	08 c0       	rjmp	.+16     	; 0xa98 <vfprintf+0x1f6>
     a88:	60 81       	ld	r22, Z
     a8a:	71 81       	ldd	r23, Z+1	; 0x01
     a8c:	07 2e       	mov	r0, r23
     a8e:	00 0c       	add	r0, r0
     a90:	88 0b       	sbc	r24, r24
     a92:	99 0b       	sbc	r25, r25
     a94:	0e 5f       	subi	r16, 0xFE	; 254
     a96:	1f 4f       	sbci	r17, 0xFF	; 255
     a98:	f3 2d       	mov	r31, r3
     a9a:	ff 76       	andi	r31, 0x6F	; 111
     a9c:	3f 2e       	mov	r3, r31
     a9e:	97 ff       	sbrs	r25, 7
     aa0:	09 c0       	rjmp	.+18     	; 0xab4 <vfprintf+0x212>
     aa2:	90 95       	com	r25
     aa4:	80 95       	com	r24
     aa6:	70 95       	com	r23
     aa8:	61 95       	neg	r22
     aaa:	7f 4f       	sbci	r23, 0xFF	; 255
     aac:	8f 4f       	sbci	r24, 0xFF	; 255
     aae:	9f 4f       	sbci	r25, 0xFF	; 255
     ab0:	f0 68       	ori	r31, 0x80	; 128
     ab2:	3f 2e       	mov	r3, r31
     ab4:	2a e0       	ldi	r18, 0x0A	; 10
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	a3 01       	movw	r20, r6
     aba:	0e 94 c8 07 	call	0xf90	; 0xf90 <__ultoa_invert>
     abe:	88 2e       	mov	r8, r24
     ac0:	86 18       	sub	r8, r6
     ac2:	45 c0       	rjmp	.+138    	; 0xb4e <vfprintf+0x2ac>
     ac4:	85 37       	cpi	r24, 0x75	; 117
     ac6:	31 f4       	brne	.+12     	; 0xad4 <vfprintf+0x232>
     ac8:	23 2d       	mov	r18, r3
     aca:	2f 7e       	andi	r18, 0xEF	; 239
     acc:	b2 2e       	mov	r11, r18
     ace:	2a e0       	ldi	r18, 0x0A	; 10
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	25 c0       	rjmp	.+74     	; 0xb1e <vfprintf+0x27c>
     ad4:	93 2d       	mov	r25, r3
     ad6:	99 7f       	andi	r25, 0xF9	; 249
     ad8:	b9 2e       	mov	r11, r25
     ada:	8f 36       	cpi	r24, 0x6F	; 111
     adc:	c1 f0       	breq	.+48     	; 0xb0e <vfprintf+0x26c>
     ade:	18 f4       	brcc	.+6      	; 0xae6 <vfprintf+0x244>
     ae0:	88 35       	cpi	r24, 0x58	; 88
     ae2:	79 f0       	breq	.+30     	; 0xb02 <vfprintf+0x260>
     ae4:	b5 c0       	rjmp	.+362    	; 0xc50 <vfprintf+0x3ae>
     ae6:	80 37       	cpi	r24, 0x70	; 112
     ae8:	19 f0       	breq	.+6      	; 0xaf0 <vfprintf+0x24e>
     aea:	88 37       	cpi	r24, 0x78	; 120
     aec:	21 f0       	breq	.+8      	; 0xaf6 <vfprintf+0x254>
     aee:	b0 c0       	rjmp	.+352    	; 0xc50 <vfprintf+0x3ae>
     af0:	e9 2f       	mov	r30, r25
     af2:	e0 61       	ori	r30, 0x10	; 16
     af4:	be 2e       	mov	r11, r30
     af6:	b4 fe       	sbrs	r11, 4
     af8:	0d c0       	rjmp	.+26     	; 0xb14 <vfprintf+0x272>
     afa:	fb 2d       	mov	r31, r11
     afc:	f4 60       	ori	r31, 0x04	; 4
     afe:	bf 2e       	mov	r11, r31
     b00:	09 c0       	rjmp	.+18     	; 0xb14 <vfprintf+0x272>
     b02:	34 fe       	sbrs	r3, 4
     b04:	0a c0       	rjmp	.+20     	; 0xb1a <vfprintf+0x278>
     b06:	29 2f       	mov	r18, r25
     b08:	26 60       	ori	r18, 0x06	; 6
     b0a:	b2 2e       	mov	r11, r18
     b0c:	06 c0       	rjmp	.+12     	; 0xb1a <vfprintf+0x278>
     b0e:	28 e0       	ldi	r18, 0x08	; 8
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	05 c0       	rjmp	.+10     	; 0xb1e <vfprintf+0x27c>
     b14:	20 e1       	ldi	r18, 0x10	; 16
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	02 c0       	rjmp	.+4      	; 0xb1e <vfprintf+0x27c>
     b1a:	20 e1       	ldi	r18, 0x10	; 16
     b1c:	32 e0       	ldi	r19, 0x02	; 2
     b1e:	f8 01       	movw	r30, r16
     b20:	b7 fe       	sbrs	r11, 7
     b22:	07 c0       	rjmp	.+14     	; 0xb32 <vfprintf+0x290>
     b24:	60 81       	ld	r22, Z
     b26:	71 81       	ldd	r23, Z+1	; 0x01
     b28:	82 81       	ldd	r24, Z+2	; 0x02
     b2a:	93 81       	ldd	r25, Z+3	; 0x03
     b2c:	0c 5f       	subi	r16, 0xFC	; 252
     b2e:	1f 4f       	sbci	r17, 0xFF	; 255
     b30:	06 c0       	rjmp	.+12     	; 0xb3e <vfprintf+0x29c>
     b32:	60 81       	ld	r22, Z
     b34:	71 81       	ldd	r23, Z+1	; 0x01
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	0e 5f       	subi	r16, 0xFE	; 254
     b3c:	1f 4f       	sbci	r17, 0xFF	; 255
     b3e:	a3 01       	movw	r20, r6
     b40:	0e 94 c8 07 	call	0xf90	; 0xf90 <__ultoa_invert>
     b44:	88 2e       	mov	r8, r24
     b46:	86 18       	sub	r8, r6
     b48:	fb 2d       	mov	r31, r11
     b4a:	ff 77       	andi	r31, 0x7F	; 127
     b4c:	3f 2e       	mov	r3, r31
     b4e:	36 fe       	sbrs	r3, 6
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <vfprintf+0x2ca>
     b52:	23 2d       	mov	r18, r3
     b54:	2e 7f       	andi	r18, 0xFE	; 254
     b56:	a2 2e       	mov	r10, r18
     b58:	89 14       	cp	r8, r9
     b5a:	58 f4       	brcc	.+22     	; 0xb72 <vfprintf+0x2d0>
     b5c:	34 fe       	sbrs	r3, 4
     b5e:	0b c0       	rjmp	.+22     	; 0xb76 <vfprintf+0x2d4>
     b60:	32 fc       	sbrc	r3, 2
     b62:	09 c0       	rjmp	.+18     	; 0xb76 <vfprintf+0x2d4>
     b64:	83 2d       	mov	r24, r3
     b66:	8e 7e       	andi	r24, 0xEE	; 238
     b68:	a8 2e       	mov	r10, r24
     b6a:	05 c0       	rjmp	.+10     	; 0xb76 <vfprintf+0x2d4>
     b6c:	b8 2c       	mov	r11, r8
     b6e:	a3 2c       	mov	r10, r3
     b70:	03 c0       	rjmp	.+6      	; 0xb78 <vfprintf+0x2d6>
     b72:	b8 2c       	mov	r11, r8
     b74:	01 c0       	rjmp	.+2      	; 0xb78 <vfprintf+0x2d6>
     b76:	b9 2c       	mov	r11, r9
     b78:	a4 fe       	sbrs	r10, 4
     b7a:	0f c0       	rjmp	.+30     	; 0xb9a <vfprintf+0x2f8>
     b7c:	fe 01       	movw	r30, r28
     b7e:	e8 0d       	add	r30, r8
     b80:	f1 1d       	adc	r31, r1
     b82:	80 81       	ld	r24, Z
     b84:	80 33       	cpi	r24, 0x30	; 48
     b86:	21 f4       	brne	.+8      	; 0xb90 <vfprintf+0x2ee>
     b88:	9a 2d       	mov	r25, r10
     b8a:	99 7e       	andi	r25, 0xE9	; 233
     b8c:	a9 2e       	mov	r10, r25
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <vfprintf+0x300>
     b90:	a2 fe       	sbrs	r10, 2
     b92:	06 c0       	rjmp	.+12     	; 0xba0 <vfprintf+0x2fe>
     b94:	b3 94       	inc	r11
     b96:	b3 94       	inc	r11
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <vfprintf+0x300>
     b9a:	8a 2d       	mov	r24, r10
     b9c:	86 78       	andi	r24, 0x86	; 134
     b9e:	09 f0       	breq	.+2      	; 0xba2 <vfprintf+0x300>
     ba0:	b3 94       	inc	r11
     ba2:	a3 fc       	sbrc	r10, 3
     ba4:	11 c0       	rjmp	.+34     	; 0xbc8 <vfprintf+0x326>
     ba6:	a0 fe       	sbrs	r10, 0
     ba8:	06 c0       	rjmp	.+12     	; 0xbb6 <vfprintf+0x314>
     baa:	b2 14       	cp	r11, r2
     bac:	88 f4       	brcc	.+34     	; 0xbd0 <vfprintf+0x32e>
     bae:	28 0c       	add	r2, r8
     bb0:	92 2c       	mov	r9, r2
     bb2:	9b 18       	sub	r9, r11
     bb4:	0e c0       	rjmp	.+28     	; 0xbd2 <vfprintf+0x330>
     bb6:	b2 14       	cp	r11, r2
     bb8:	60 f4       	brcc	.+24     	; 0xbd2 <vfprintf+0x330>
     bba:	b6 01       	movw	r22, r12
     bbc:	80 e2       	ldi	r24, 0x20	; 32
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	0e 94 8c 07 	call	0xf18	; 0xf18 <fputc>
     bc4:	b3 94       	inc	r11
     bc6:	f7 cf       	rjmp	.-18     	; 0xbb6 <vfprintf+0x314>
     bc8:	b2 14       	cp	r11, r2
     bca:	18 f4       	brcc	.+6      	; 0xbd2 <vfprintf+0x330>
     bcc:	2b 18       	sub	r2, r11
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <vfprintf+0x332>
     bd0:	98 2c       	mov	r9, r8
     bd2:	21 2c       	mov	r2, r1
     bd4:	a4 fe       	sbrs	r10, 4
     bd6:	10 c0       	rjmp	.+32     	; 0xbf8 <vfprintf+0x356>
     bd8:	b6 01       	movw	r22, r12
     bda:	80 e3       	ldi	r24, 0x30	; 48
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	0e 94 8c 07 	call	0xf18	; 0xf18 <fputc>
     be2:	a2 fe       	sbrs	r10, 2
     be4:	17 c0       	rjmp	.+46     	; 0xc14 <vfprintf+0x372>
     be6:	a1 fc       	sbrc	r10, 1
     be8:	03 c0       	rjmp	.+6      	; 0xbf0 <vfprintf+0x34e>
     bea:	88 e7       	ldi	r24, 0x78	; 120
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	02 c0       	rjmp	.+4      	; 0xbf4 <vfprintf+0x352>
     bf0:	88 e5       	ldi	r24, 0x58	; 88
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	b6 01       	movw	r22, r12
     bf6:	0c c0       	rjmp	.+24     	; 0xc10 <vfprintf+0x36e>
     bf8:	8a 2d       	mov	r24, r10
     bfa:	86 78       	andi	r24, 0x86	; 134
     bfc:	59 f0       	breq	.+22     	; 0xc14 <vfprintf+0x372>
     bfe:	a1 fe       	sbrs	r10, 1
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <vfprintf+0x364>
     c02:	8b e2       	ldi	r24, 0x2B	; 43
     c04:	01 c0       	rjmp	.+2      	; 0xc08 <vfprintf+0x366>
     c06:	80 e2       	ldi	r24, 0x20	; 32
     c08:	a7 fc       	sbrc	r10, 7
     c0a:	8d e2       	ldi	r24, 0x2D	; 45
     c0c:	b6 01       	movw	r22, r12
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	0e 94 8c 07 	call	0xf18	; 0xf18 <fputc>
     c14:	89 14       	cp	r8, r9
     c16:	38 f4       	brcc	.+14     	; 0xc26 <vfprintf+0x384>
     c18:	b6 01       	movw	r22, r12
     c1a:	80 e3       	ldi	r24, 0x30	; 48
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	0e 94 8c 07 	call	0xf18	; 0xf18 <fputc>
     c22:	9a 94       	dec	r9
     c24:	f7 cf       	rjmp	.-18     	; 0xc14 <vfprintf+0x372>
     c26:	8a 94       	dec	r8
     c28:	f3 01       	movw	r30, r6
     c2a:	e8 0d       	add	r30, r8
     c2c:	f1 1d       	adc	r31, r1
     c2e:	80 81       	ld	r24, Z
     c30:	b6 01       	movw	r22, r12
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 8c 07 	call	0xf18	; 0xf18 <fputc>
     c38:	81 10       	cpse	r8, r1
     c3a:	f5 cf       	rjmp	.-22     	; 0xc26 <vfprintf+0x384>
     c3c:	22 20       	and	r2, r2
     c3e:	09 f4       	brne	.+2      	; 0xc42 <vfprintf+0x3a0>
     c40:	42 ce       	rjmp	.-892    	; 0x8c6 <vfprintf+0x24>
     c42:	b6 01       	movw	r22, r12
     c44:	80 e2       	ldi	r24, 0x20	; 32
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	0e 94 8c 07 	call	0xf18	; 0xf18 <fputc>
     c4c:	2a 94       	dec	r2
     c4e:	f6 cf       	rjmp	.-20     	; 0xc3c <vfprintf+0x39a>
     c50:	f6 01       	movw	r30, r12
     c52:	86 81       	ldd	r24, Z+6	; 0x06
     c54:	97 81       	ldd	r25, Z+7	; 0x07
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <vfprintf+0x3ba>
     c58:	8f ef       	ldi	r24, 0xFF	; 255
     c5a:	9f ef       	ldi	r25, 0xFF	; 255
     c5c:	2b 96       	adiw	r28, 0x0b	; 11
     c5e:	e2 e1       	ldi	r30, 0x12	; 18
     c60:	0c 94 42 08 	jmp	0x1084	; 0x1084 <__epilogue_restores__>

00000c64 <calloc>:
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	86 9f       	mul	r24, r22
     c6e:	80 01       	movw	r16, r0
     c70:	87 9f       	mul	r24, r23
     c72:	10 0d       	add	r17, r0
     c74:	96 9f       	mul	r25, r22
     c76:	10 0d       	add	r17, r0
     c78:	11 24       	eor	r1, r1
     c7a:	c8 01       	movw	r24, r16
     c7c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <malloc>
     c80:	ec 01       	movw	r28, r24
     c82:	00 97       	sbiw	r24, 0x00	; 0
     c84:	29 f0       	breq	.+10     	; 0xc90 <calloc+0x2c>
     c86:	a8 01       	movw	r20, r16
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	0e 94 7a 07 	call	0xef4	; 0xef4 <memset>
     c90:	ce 01       	movw	r24, r28
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	1f 91       	pop	r17
     c98:	0f 91       	pop	r16
     c9a:	08 95       	ret

00000c9c <malloc>:
     c9c:	0f 93       	push	r16
     c9e:	1f 93       	push	r17
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	82 30       	cpi	r24, 0x02	; 2
     ca6:	91 05       	cpc	r25, r1
     ca8:	10 f4       	brcc	.+4      	; 0xcae <malloc+0x12>
     caa:	82 e0       	ldi	r24, 0x02	; 2
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	e0 91 35 02 	lds	r30, 0x0235	; 0x800235 <__flp>
     cb2:	f0 91 36 02 	lds	r31, 0x0236	; 0x800236 <__flp+0x1>
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	a0 e0       	ldi	r26, 0x00	; 0
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	30 97       	sbiw	r30, 0x00	; 0
     cc0:	19 f1       	breq	.+70     	; 0xd08 <malloc+0x6c>
     cc2:	40 81       	ld	r20, Z
     cc4:	51 81       	ldd	r21, Z+1	; 0x01
     cc6:	02 81       	ldd	r16, Z+2	; 0x02
     cc8:	13 81       	ldd	r17, Z+3	; 0x03
     cca:	48 17       	cp	r20, r24
     ccc:	59 07       	cpc	r21, r25
     cce:	c8 f0       	brcs	.+50     	; 0xd02 <malloc+0x66>
     cd0:	84 17       	cp	r24, r20
     cd2:	95 07       	cpc	r25, r21
     cd4:	69 f4       	brne	.+26     	; 0xcf0 <malloc+0x54>
     cd6:	10 97       	sbiw	r26, 0x00	; 0
     cd8:	31 f0       	breq	.+12     	; 0xce6 <malloc+0x4a>
     cda:	12 96       	adiw	r26, 0x02	; 2
     cdc:	0c 93       	st	X, r16
     cde:	12 97       	sbiw	r26, 0x02	; 2
     ce0:	13 96       	adiw	r26, 0x03	; 3
     ce2:	1c 93       	st	X, r17
     ce4:	27 c0       	rjmp	.+78     	; 0xd34 <malloc+0x98>
     ce6:	00 93 35 02 	sts	0x0235, r16	; 0x800235 <__flp>
     cea:	10 93 36 02 	sts	0x0236, r17	; 0x800236 <__flp+0x1>
     cee:	22 c0       	rjmp	.+68     	; 0xd34 <malloc+0x98>
     cf0:	21 15       	cp	r18, r1
     cf2:	31 05       	cpc	r19, r1
     cf4:	19 f0       	breq	.+6      	; 0xcfc <malloc+0x60>
     cf6:	42 17       	cp	r20, r18
     cf8:	53 07       	cpc	r21, r19
     cfa:	18 f4       	brcc	.+6      	; 0xd02 <malloc+0x66>
     cfc:	9a 01       	movw	r18, r20
     cfe:	bd 01       	movw	r22, r26
     d00:	ef 01       	movw	r28, r30
     d02:	df 01       	movw	r26, r30
     d04:	f8 01       	movw	r30, r16
     d06:	db cf       	rjmp	.-74     	; 0xcbe <malloc+0x22>
     d08:	21 15       	cp	r18, r1
     d0a:	31 05       	cpc	r19, r1
     d0c:	f9 f0       	breq	.+62     	; 0xd4c <malloc+0xb0>
     d0e:	28 1b       	sub	r18, r24
     d10:	39 0b       	sbc	r19, r25
     d12:	24 30       	cpi	r18, 0x04	; 4
     d14:	31 05       	cpc	r19, r1
     d16:	80 f4       	brcc	.+32     	; 0xd38 <malloc+0x9c>
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	9b 81       	ldd	r25, Y+3	; 0x03
     d1c:	61 15       	cp	r22, r1
     d1e:	71 05       	cpc	r23, r1
     d20:	21 f0       	breq	.+8      	; 0xd2a <malloc+0x8e>
     d22:	fb 01       	movw	r30, r22
     d24:	93 83       	std	Z+3, r25	; 0x03
     d26:	82 83       	std	Z+2, r24	; 0x02
     d28:	04 c0       	rjmp	.+8      	; 0xd32 <malloc+0x96>
     d2a:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <__flp+0x1>
     d2e:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <__flp>
     d32:	fe 01       	movw	r30, r28
     d34:	32 96       	adiw	r30, 0x02	; 2
     d36:	44 c0       	rjmp	.+136    	; 0xdc0 <malloc+0x124>
     d38:	fe 01       	movw	r30, r28
     d3a:	e2 0f       	add	r30, r18
     d3c:	f3 1f       	adc	r31, r19
     d3e:	81 93       	st	Z+, r24
     d40:	91 93       	st	Z+, r25
     d42:	22 50       	subi	r18, 0x02	; 2
     d44:	31 09       	sbc	r19, r1
     d46:	39 83       	std	Y+1, r19	; 0x01
     d48:	28 83       	st	Y, r18
     d4a:	3a c0       	rjmp	.+116    	; 0xdc0 <malloc+0x124>
     d4c:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <__brkval>
     d50:	30 91 34 02 	lds	r19, 0x0234	; 0x800234 <__brkval+0x1>
     d54:	23 2b       	or	r18, r19
     d56:	41 f4       	brne	.+16     	; 0xd68 <malloc+0xcc>
     d58:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     d5c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     d60:	30 93 34 02 	sts	0x0234, r19	; 0x800234 <__brkval+0x1>
     d64:	20 93 33 02 	sts	0x0233, r18	; 0x800233 <__brkval>
     d68:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     d6c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     d70:	21 15       	cp	r18, r1
     d72:	31 05       	cpc	r19, r1
     d74:	41 f4       	brne	.+16     	; 0xd86 <malloc+0xea>
     d76:	2d b7       	in	r18, 0x3d	; 61
     d78:	3e b7       	in	r19, 0x3e	; 62
     d7a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     d7e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     d82:	24 1b       	sub	r18, r20
     d84:	35 0b       	sbc	r19, r21
     d86:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <__brkval>
     d8a:	f0 91 34 02 	lds	r31, 0x0234	; 0x800234 <__brkval+0x1>
     d8e:	e2 17       	cp	r30, r18
     d90:	f3 07       	cpc	r31, r19
     d92:	a0 f4       	brcc	.+40     	; 0xdbc <malloc+0x120>
     d94:	2e 1b       	sub	r18, r30
     d96:	3f 0b       	sbc	r19, r31
     d98:	28 17       	cp	r18, r24
     d9a:	39 07       	cpc	r19, r25
     d9c:	78 f0       	brcs	.+30     	; 0xdbc <malloc+0x120>
     d9e:	ac 01       	movw	r20, r24
     da0:	4e 5f       	subi	r20, 0xFE	; 254
     da2:	5f 4f       	sbci	r21, 0xFF	; 255
     da4:	24 17       	cp	r18, r20
     da6:	35 07       	cpc	r19, r21
     da8:	48 f0       	brcs	.+18     	; 0xdbc <malloc+0x120>
     daa:	4e 0f       	add	r20, r30
     dac:	5f 1f       	adc	r21, r31
     dae:	50 93 34 02 	sts	0x0234, r21	; 0x800234 <__brkval+0x1>
     db2:	40 93 33 02 	sts	0x0233, r20	; 0x800233 <__brkval>
     db6:	81 93       	st	Z+, r24
     db8:	91 93       	st	Z+, r25
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <malloc+0x124>
     dbc:	e0 e0       	ldi	r30, 0x00	; 0
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	cf 01       	movw	r24, r30
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	1f 91       	pop	r17
     dc8:	0f 91       	pop	r16
     dca:	08 95       	ret

00000dcc <free>:
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	00 97       	sbiw	r24, 0x00	; 0
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <free+0xa>
     dd4:	81 c0       	rjmp	.+258    	; 0xed8 <free+0x10c>
     dd6:	fc 01       	movw	r30, r24
     dd8:	32 97       	sbiw	r30, 0x02	; 2
     dda:	13 82       	std	Z+3, r1	; 0x03
     ddc:	12 82       	std	Z+2, r1	; 0x02
     dde:	a0 91 35 02 	lds	r26, 0x0235	; 0x800235 <__flp>
     de2:	b0 91 36 02 	lds	r27, 0x0236	; 0x800236 <__flp+0x1>
     de6:	10 97       	sbiw	r26, 0x00	; 0
     de8:	81 f4       	brne	.+32     	; 0xe0a <free+0x3e>
     dea:	20 81       	ld	r18, Z
     dec:	31 81       	ldd	r19, Z+1	; 0x01
     dee:	82 0f       	add	r24, r18
     df0:	93 1f       	adc	r25, r19
     df2:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <__brkval>
     df6:	30 91 34 02 	lds	r19, 0x0234	; 0x800234 <__brkval+0x1>
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	51 f5       	brne	.+84     	; 0xe54 <free+0x88>
     e00:	f0 93 34 02 	sts	0x0234, r31	; 0x800234 <__brkval+0x1>
     e04:	e0 93 33 02 	sts	0x0233, r30	; 0x800233 <__brkval>
     e08:	67 c0       	rjmp	.+206    	; 0xed8 <free+0x10c>
     e0a:	ed 01       	movw	r28, r26
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	ce 17       	cp	r28, r30
     e12:	df 07       	cpc	r29, r31
     e14:	40 f4       	brcc	.+16     	; 0xe26 <free+0x5a>
     e16:	4a 81       	ldd	r20, Y+2	; 0x02
     e18:	5b 81       	ldd	r21, Y+3	; 0x03
     e1a:	9e 01       	movw	r18, r28
     e1c:	41 15       	cp	r20, r1
     e1e:	51 05       	cpc	r21, r1
     e20:	f1 f0       	breq	.+60     	; 0xe5e <free+0x92>
     e22:	ea 01       	movw	r28, r20
     e24:	f5 cf       	rjmp	.-22     	; 0xe10 <free+0x44>
     e26:	d3 83       	std	Z+3, r29	; 0x03
     e28:	c2 83       	std	Z+2, r28	; 0x02
     e2a:	40 81       	ld	r20, Z
     e2c:	51 81       	ldd	r21, Z+1	; 0x01
     e2e:	84 0f       	add	r24, r20
     e30:	95 1f       	adc	r25, r21
     e32:	c8 17       	cp	r28, r24
     e34:	d9 07       	cpc	r29, r25
     e36:	59 f4       	brne	.+22     	; 0xe4e <free+0x82>
     e38:	88 81       	ld	r24, Y
     e3a:	99 81       	ldd	r25, Y+1	; 0x01
     e3c:	84 0f       	add	r24, r20
     e3e:	95 1f       	adc	r25, r21
     e40:	02 96       	adiw	r24, 0x02	; 2
     e42:	91 83       	std	Z+1, r25	; 0x01
     e44:	80 83       	st	Z, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	9b 81       	ldd	r25, Y+3	; 0x03
     e4a:	93 83       	std	Z+3, r25	; 0x03
     e4c:	82 83       	std	Z+2, r24	; 0x02
     e4e:	21 15       	cp	r18, r1
     e50:	31 05       	cpc	r19, r1
     e52:	29 f4       	brne	.+10     	; 0xe5e <free+0x92>
     e54:	f0 93 36 02 	sts	0x0236, r31	; 0x800236 <__flp+0x1>
     e58:	e0 93 35 02 	sts	0x0235, r30	; 0x800235 <__flp>
     e5c:	3d c0       	rjmp	.+122    	; 0xed8 <free+0x10c>
     e5e:	e9 01       	movw	r28, r18
     e60:	fb 83       	std	Y+3, r31	; 0x03
     e62:	ea 83       	std	Y+2, r30	; 0x02
     e64:	49 91       	ld	r20, Y+
     e66:	59 91       	ld	r21, Y+
     e68:	c4 0f       	add	r28, r20
     e6a:	d5 1f       	adc	r29, r21
     e6c:	ec 17       	cp	r30, r28
     e6e:	fd 07       	cpc	r31, r29
     e70:	61 f4       	brne	.+24     	; 0xe8a <free+0xbe>
     e72:	80 81       	ld	r24, Z
     e74:	91 81       	ldd	r25, Z+1	; 0x01
     e76:	84 0f       	add	r24, r20
     e78:	95 1f       	adc	r25, r21
     e7a:	02 96       	adiw	r24, 0x02	; 2
     e7c:	e9 01       	movw	r28, r18
     e7e:	99 83       	std	Y+1, r25	; 0x01
     e80:	88 83       	st	Y, r24
     e82:	82 81       	ldd	r24, Z+2	; 0x02
     e84:	93 81       	ldd	r25, Z+3	; 0x03
     e86:	9b 83       	std	Y+3, r25	; 0x03
     e88:	8a 83       	std	Y+2, r24	; 0x02
     e8a:	e0 e0       	ldi	r30, 0x00	; 0
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	12 96       	adiw	r26, 0x02	; 2
     e90:	8d 91       	ld	r24, X+
     e92:	9c 91       	ld	r25, X
     e94:	13 97       	sbiw	r26, 0x03	; 3
     e96:	00 97       	sbiw	r24, 0x00	; 0
     e98:	19 f0       	breq	.+6      	; 0xea0 <free+0xd4>
     e9a:	fd 01       	movw	r30, r26
     e9c:	dc 01       	movw	r26, r24
     e9e:	f7 cf       	rjmp	.-18     	; 0xe8e <free+0xc2>
     ea0:	8d 91       	ld	r24, X+
     ea2:	9c 91       	ld	r25, X
     ea4:	11 97       	sbiw	r26, 0x01	; 1
     ea6:	9d 01       	movw	r18, r26
     ea8:	2e 5f       	subi	r18, 0xFE	; 254
     eaa:	3f 4f       	sbci	r19, 0xFF	; 255
     eac:	82 0f       	add	r24, r18
     eae:	93 1f       	adc	r25, r19
     eb0:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <__brkval>
     eb4:	30 91 34 02 	lds	r19, 0x0234	; 0x800234 <__brkval+0x1>
     eb8:	28 17       	cp	r18, r24
     eba:	39 07       	cpc	r19, r25
     ebc:	69 f4       	brne	.+26     	; 0xed8 <free+0x10c>
     ebe:	30 97       	sbiw	r30, 0x00	; 0
     ec0:	29 f4       	brne	.+10     	; 0xecc <free+0x100>
     ec2:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <__flp+0x1>
     ec6:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <__flp>
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <free+0x104>
     ecc:	13 82       	std	Z+3, r1	; 0x03
     ece:	12 82       	std	Z+2, r1	; 0x02
     ed0:	b0 93 34 02 	sts	0x0234, r27	; 0x800234 <__brkval+0x1>
     ed4:	a0 93 33 02 	sts	0x0233, r26	; 0x800233 <__brkval>
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	08 95       	ret

00000ede <strnlen_P>:
     ede:	fc 01       	movw	r30, r24
     ee0:	05 90       	lpm	r0, Z+
     ee2:	61 50       	subi	r22, 0x01	; 1
     ee4:	70 40       	sbci	r23, 0x00	; 0
     ee6:	01 10       	cpse	r0, r1
     ee8:	d8 f7       	brcc	.-10     	; 0xee0 <strnlen_P+0x2>
     eea:	80 95       	com	r24
     eec:	90 95       	com	r25
     eee:	8e 0f       	add	r24, r30
     ef0:	9f 1f       	adc	r25, r31
     ef2:	08 95       	ret

00000ef4 <memset>:
     ef4:	dc 01       	movw	r26, r24
     ef6:	01 c0       	rjmp	.+2      	; 0xefa <memset+0x6>
     ef8:	6d 93       	st	X+, r22
     efa:	41 50       	subi	r20, 0x01	; 1
     efc:	50 40       	sbci	r21, 0x00	; 0
     efe:	e0 f7       	brcc	.-8      	; 0xef8 <memset+0x4>
     f00:	08 95       	ret

00000f02 <strnlen>:
     f02:	fc 01       	movw	r30, r24
     f04:	61 50       	subi	r22, 0x01	; 1
     f06:	70 40       	sbci	r23, 0x00	; 0
     f08:	01 90       	ld	r0, Z+
     f0a:	01 10       	cpse	r0, r1
     f0c:	d8 f7       	brcc	.-10     	; 0xf04 <strnlen+0x2>
     f0e:	80 95       	com	r24
     f10:	90 95       	com	r25
     f12:	8e 0f       	add	r24, r30
     f14:	9f 1f       	adc	r25, r31
     f16:	08 95       	ret

00000f18 <fputc>:
     f18:	0f 93       	push	r16
     f1a:	1f 93       	push	r17
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	fb 01       	movw	r30, r22
     f22:	23 81       	ldd	r18, Z+3	; 0x03
     f24:	21 fd       	sbrc	r18, 1
     f26:	03 c0       	rjmp	.+6      	; 0xf2e <fputc+0x16>
     f28:	8f ef       	ldi	r24, 0xFF	; 255
     f2a:	9f ef       	ldi	r25, 0xFF	; 255
     f2c:	2c c0       	rjmp	.+88     	; 0xf86 <fputc+0x6e>
     f2e:	22 ff       	sbrs	r18, 2
     f30:	16 c0       	rjmp	.+44     	; 0xf5e <fputc+0x46>
     f32:	46 81       	ldd	r20, Z+6	; 0x06
     f34:	57 81       	ldd	r21, Z+7	; 0x07
     f36:	24 81       	ldd	r18, Z+4	; 0x04
     f38:	35 81       	ldd	r19, Z+5	; 0x05
     f3a:	42 17       	cp	r20, r18
     f3c:	53 07       	cpc	r21, r19
     f3e:	44 f4       	brge	.+16     	; 0xf50 <fputc+0x38>
     f40:	a0 81       	ld	r26, Z
     f42:	b1 81       	ldd	r27, Z+1	; 0x01
     f44:	9d 01       	movw	r18, r26
     f46:	2f 5f       	subi	r18, 0xFF	; 255
     f48:	3f 4f       	sbci	r19, 0xFF	; 255
     f4a:	31 83       	std	Z+1, r19	; 0x01
     f4c:	20 83       	st	Z, r18
     f4e:	8c 93       	st	X, r24
     f50:	26 81       	ldd	r18, Z+6	; 0x06
     f52:	37 81       	ldd	r19, Z+7	; 0x07
     f54:	2f 5f       	subi	r18, 0xFF	; 255
     f56:	3f 4f       	sbci	r19, 0xFF	; 255
     f58:	37 83       	std	Z+7, r19	; 0x07
     f5a:	26 83       	std	Z+6, r18	; 0x06
     f5c:	14 c0       	rjmp	.+40     	; 0xf86 <fputc+0x6e>
     f5e:	8b 01       	movw	r16, r22
     f60:	ec 01       	movw	r28, r24
     f62:	fb 01       	movw	r30, r22
     f64:	00 84       	ldd	r0, Z+8	; 0x08
     f66:	f1 85       	ldd	r31, Z+9	; 0x09
     f68:	e0 2d       	mov	r30, r0
     f6a:	09 95       	icall
     f6c:	89 2b       	or	r24, r25
     f6e:	e1 f6       	brne	.-72     	; 0xf28 <fputc+0x10>
     f70:	d8 01       	movw	r26, r16
     f72:	16 96       	adiw	r26, 0x06	; 6
     f74:	8d 91       	ld	r24, X+
     f76:	9c 91       	ld	r25, X
     f78:	17 97       	sbiw	r26, 0x07	; 7
     f7a:	01 96       	adiw	r24, 0x01	; 1
     f7c:	17 96       	adiw	r26, 0x07	; 7
     f7e:	9c 93       	st	X, r25
     f80:	8e 93       	st	-X, r24
     f82:	16 97       	sbiw	r26, 0x06	; 6
     f84:	ce 01       	movw	r24, r28
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	08 95       	ret

00000f90 <__ultoa_invert>:
     f90:	fa 01       	movw	r30, r20
     f92:	aa 27       	eor	r26, r26
     f94:	28 30       	cpi	r18, 0x08	; 8
     f96:	51 f1       	breq	.+84     	; 0xfec <__ultoa_invert+0x5c>
     f98:	20 31       	cpi	r18, 0x10	; 16
     f9a:	81 f1       	breq	.+96     	; 0xffc <__ultoa_invert+0x6c>
     f9c:	e8 94       	clt
     f9e:	6f 93       	push	r22
     fa0:	6e 7f       	andi	r22, 0xFE	; 254
     fa2:	6e 5f       	subi	r22, 0xFE	; 254
     fa4:	7f 4f       	sbci	r23, 0xFF	; 255
     fa6:	8f 4f       	sbci	r24, 0xFF	; 255
     fa8:	9f 4f       	sbci	r25, 0xFF	; 255
     faa:	af 4f       	sbci	r26, 0xFF	; 255
     fac:	b1 e0       	ldi	r27, 0x01	; 1
     fae:	3e d0       	rcall	.+124    	; 0x102c <__ultoa_invert+0x9c>
     fb0:	b4 e0       	ldi	r27, 0x04	; 4
     fb2:	3c d0       	rcall	.+120    	; 0x102c <__ultoa_invert+0x9c>
     fb4:	67 0f       	add	r22, r23
     fb6:	78 1f       	adc	r23, r24
     fb8:	89 1f       	adc	r24, r25
     fba:	9a 1f       	adc	r25, r26
     fbc:	a1 1d       	adc	r26, r1
     fbe:	68 0f       	add	r22, r24
     fc0:	79 1f       	adc	r23, r25
     fc2:	8a 1f       	adc	r24, r26
     fc4:	91 1d       	adc	r25, r1
     fc6:	a1 1d       	adc	r26, r1
     fc8:	6a 0f       	add	r22, r26
     fca:	71 1d       	adc	r23, r1
     fcc:	81 1d       	adc	r24, r1
     fce:	91 1d       	adc	r25, r1
     fd0:	a1 1d       	adc	r26, r1
     fd2:	20 d0       	rcall	.+64     	; 0x1014 <__ultoa_invert+0x84>
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <__ultoa_invert+0x48>
     fd6:	68 94       	set
     fd8:	3f 91       	pop	r19
     fda:	2a e0       	ldi	r18, 0x0A	; 10
     fdc:	26 9f       	mul	r18, r22
     fde:	11 24       	eor	r1, r1
     fe0:	30 19       	sub	r19, r0
     fe2:	30 5d       	subi	r19, 0xD0	; 208
     fe4:	31 93       	st	Z+, r19
     fe6:	de f6       	brtc	.-74     	; 0xf9e <__ultoa_invert+0xe>
     fe8:	cf 01       	movw	r24, r30
     fea:	08 95       	ret
     fec:	46 2f       	mov	r20, r22
     fee:	47 70       	andi	r20, 0x07	; 7
     ff0:	40 5d       	subi	r20, 0xD0	; 208
     ff2:	41 93       	st	Z+, r20
     ff4:	b3 e0       	ldi	r27, 0x03	; 3
     ff6:	0f d0       	rcall	.+30     	; 0x1016 <__ultoa_invert+0x86>
     ff8:	c9 f7       	brne	.-14     	; 0xfec <__ultoa_invert+0x5c>
     ffa:	f6 cf       	rjmp	.-20     	; 0xfe8 <__ultoa_invert+0x58>
     ffc:	46 2f       	mov	r20, r22
     ffe:	4f 70       	andi	r20, 0x0F	; 15
    1000:	40 5d       	subi	r20, 0xD0	; 208
    1002:	4a 33       	cpi	r20, 0x3A	; 58
    1004:	18 f0       	brcs	.+6      	; 0x100c <__ultoa_invert+0x7c>
    1006:	49 5d       	subi	r20, 0xD9	; 217
    1008:	31 fd       	sbrc	r19, 1
    100a:	40 52       	subi	r20, 0x20	; 32
    100c:	41 93       	st	Z+, r20
    100e:	02 d0       	rcall	.+4      	; 0x1014 <__ultoa_invert+0x84>
    1010:	a9 f7       	brne	.-22     	; 0xffc <__ultoa_invert+0x6c>
    1012:	ea cf       	rjmp	.-44     	; 0xfe8 <__ultoa_invert+0x58>
    1014:	b4 e0       	ldi	r27, 0x04	; 4
    1016:	a6 95       	lsr	r26
    1018:	97 95       	ror	r25
    101a:	87 95       	ror	r24
    101c:	77 95       	ror	r23
    101e:	67 95       	ror	r22
    1020:	ba 95       	dec	r27
    1022:	c9 f7       	brne	.-14     	; 0x1016 <__ultoa_invert+0x86>
    1024:	00 97       	sbiw	r24, 0x00	; 0
    1026:	61 05       	cpc	r22, r1
    1028:	71 05       	cpc	r23, r1
    102a:	08 95       	ret
    102c:	9b 01       	movw	r18, r22
    102e:	ac 01       	movw	r20, r24
    1030:	0a 2e       	mov	r0, r26
    1032:	06 94       	lsr	r0
    1034:	57 95       	ror	r21
    1036:	47 95       	ror	r20
    1038:	37 95       	ror	r19
    103a:	27 95       	ror	r18
    103c:	ba 95       	dec	r27
    103e:	c9 f7       	brne	.-14     	; 0x1032 <__ultoa_invert+0xa2>
    1040:	62 0f       	add	r22, r18
    1042:	73 1f       	adc	r23, r19
    1044:	84 1f       	adc	r24, r20
    1046:	95 1f       	adc	r25, r21
    1048:	a0 1d       	adc	r26, r0
    104a:	08 95       	ret

0000104c <__prologue_saves__>:
    104c:	2f 92       	push	r2
    104e:	3f 92       	push	r3
    1050:	4f 92       	push	r4
    1052:	5f 92       	push	r5
    1054:	6f 92       	push	r6
    1056:	7f 92       	push	r7
    1058:	8f 92       	push	r8
    105a:	9f 92       	push	r9
    105c:	af 92       	push	r10
    105e:	bf 92       	push	r11
    1060:	cf 92       	push	r12
    1062:	df 92       	push	r13
    1064:	ef 92       	push	r14
    1066:	ff 92       	push	r15
    1068:	0f 93       	push	r16
    106a:	1f 93       	push	r17
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
    1074:	ca 1b       	sub	r28, r26
    1076:	db 0b       	sbc	r29, r27
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	de bf       	out	0x3e, r29	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	cd bf       	out	0x3d, r28	; 61
    1082:	09 94       	ijmp

00001084 <__epilogue_restores__>:
    1084:	2a 88       	ldd	r2, Y+18	; 0x12
    1086:	39 88       	ldd	r3, Y+17	; 0x11
    1088:	48 88       	ldd	r4, Y+16	; 0x10
    108a:	5f 84       	ldd	r5, Y+15	; 0x0f
    108c:	6e 84       	ldd	r6, Y+14	; 0x0e
    108e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1090:	8c 84       	ldd	r8, Y+12	; 0x0c
    1092:	9b 84       	ldd	r9, Y+11	; 0x0b
    1094:	aa 84       	ldd	r10, Y+10	; 0x0a
    1096:	b9 84       	ldd	r11, Y+9	; 0x09
    1098:	c8 84       	ldd	r12, Y+8	; 0x08
    109a:	df 80       	ldd	r13, Y+7	; 0x07
    109c:	ee 80       	ldd	r14, Y+6	; 0x06
    109e:	fd 80       	ldd	r15, Y+5	; 0x05
    10a0:	0c 81       	ldd	r16, Y+4	; 0x04
    10a2:	1b 81       	ldd	r17, Y+3	; 0x03
    10a4:	aa 81       	ldd	r26, Y+2	; 0x02
    10a6:	b9 81       	ldd	r27, Y+1	; 0x01
    10a8:	ce 0f       	add	r28, r30
    10aa:	d1 1d       	adc	r29, r1
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	de bf       	out	0x3e, r29	; 62
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	cd bf       	out	0x3d, r28	; 61
    10b6:	ed 01       	movw	r28, r26
    10b8:	08 95       	ret

000010ba <_exit>:
    10ba:	f8 94       	cli

000010bc <__stop_program>:
    10bc:	ff cf       	rjmp	.-2      	; 0x10bc <__stop_program>
