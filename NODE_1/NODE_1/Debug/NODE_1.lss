
NODE_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800100  00000d10  00000da4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  0080020c  0080020c  00000eb0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020a1  00000000  00000000  00001180  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f24  00000000  00000000  00003221  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011de  00000000  00000000  00004145  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005ac  00000000  00000000  00005324  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f6  00000000  00000000  000058d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fa6  00000000  00000000  000060c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_1>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 e1       	ldi	r30, 0x10	; 16
  84:	fd e0       	ldi	r31, 0x0D	; 13
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ac 30       	cpi	r26, 0x0C	; 12
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	ac e0       	ldi	r26, 0x0C	; 12
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a7 31       	cpi	r26, 0x17	; 23
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 ed 00 	call	0x1da	; 0x1da <main>
  a6:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_Init>:
			return LEFT;
		}
	}else{
		return NEUTRAL;
	}
}
  ae:	82 e8       	ldi	r24, 0x82	; 130
  b0:	8f bd       	out	0x2f, r24	; 47
  b2:	89 e1       	ldi	r24, 0x19	; 25
  b4:	8e bd       	out	0x2e, r24	; 46
  b6:	85 e0       	ldi	r24, 0x05	; 5
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	95 bd       	out	0x25, r25	; 37
  bc:	84 bd       	out	0x24, r24	; 36
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	9b bd       	out	0x2b, r25	; 43
  c4:	8a bd       	out	0x2a, r24	; 42
  c6:	87 b3       	in	r24, 0x17	; 23
  c8:	8b 7f       	andi	r24, 0xFB	; 251
  ca:	87 bb       	out	0x17, r24	; 23
  cc:	88 b3       	in	r24, 0x18	; 24
  ce:	84 60       	ori	r24, 0x04	; 4
  d0:	88 bb       	out	0x18, r24	; 24
  d2:	81 b3       	in	r24, 0x11	; 17
  d4:	80 62       	ori	r24, 0x20	; 32
  d6:	81 bb       	out	0x11, r24	; 17
  d8:	08 95       	ret

000000da <__vector_1>:

ISR(INT0_vect){
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	8f 93       	push	r24
    BUSY_flag = 1;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
}
  ec:	8f 91       	pop	r24
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <can_handle_msg>:
#include "CANdrv.h"
#include "../MCP2515/MCP2515drv.h"


can_msg can_handle_msg(uint16_t id, uint8_t size, char msg_data[8]){
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	dc 01       	movw	r26, r24
  fe:	e9 01       	movw	r28, r18
    can_msg msg;
    msg.id = id;
 100:	11 96       	adiw	r26, 0x01	; 1
 102:	7c 93       	st	X, r23
 104:	6e 93       	st	-X, r22
    msg.data_len = size;
 106:	12 96       	adiw	r26, 0x02	; 2
 108:	4c 93       	st	X, r20
 10a:	12 97       	sbiw	r26, 0x02	; 2
	for(uint8_t i = 0; i < size; i++){
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0b c0       	rjmp	.+22     	; 0x126 <can_handle_msg+0x2e>
		msg.data[i] = msg_data[i];
 110:	69 2f       	mov	r22, r25
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	fe 01       	movw	r30, r28
 116:	e6 0f       	add	r30, r22
 118:	f7 1f       	adc	r31, r23
 11a:	30 81       	ld	r19, Z
 11c:	fd 01       	movw	r30, r26
 11e:	e6 0f       	add	r30, r22
 120:	f7 1f       	adc	r31, r23
 122:	33 83       	std	Z+3, r19	; 0x03

can_msg can_handle_msg(uint16_t id, uint8_t size, char msg_data[8]){
    can_msg msg;
    msg.id = id;
    msg.data_len = size;
	for(uint8_t i = 0; i < size; i++){
 124:	9f 5f       	subi	r25, 0xFF	; 255
 126:	94 17       	cp	r25, r20
 128:	98 f3       	brcs	.-26     	; 0x110 <can_handle_msg+0x18>
		msg.data[i] = msg_data[i];
	}
    return msg;
}
 12a:	cd 01       	movw	r24, r26
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <can_send_msg>:

void can_send_msg(can_msg* msg, BUFFER buffer){
 132:	df 92       	push	r13
 134:	ef 92       	push	r14
 136:	ff 92       	push	r15
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	1f 92       	push	r1
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
 146:	7c 01       	movw	r14, r24
 148:	d6 2e       	mov	r13, r22

    uint8_t idLSB = (msg->id & 0x7) << 5;
 14a:	fc 01       	movw	r30, r24
 14c:	60 81       	ld	r22, Z
 14e:	71 81       	ldd	r23, Z+1	; 0x01
 150:	16 2f       	mov	r17, r22
 152:	12 95       	swap	r17
 154:	11 0f       	add	r17, r17
 156:	10 7e       	andi	r17, 0xE0	; 224
    uint8_t idMSB = (msg->id & 0x7F8) >> 3;
 158:	68 7f       	andi	r22, 0xF8	; 248
 15a:	77 70       	andi	r23, 0x07	; 7
 15c:	76 95       	lsr	r23
 15e:	67 95       	ror	r22
 160:	76 95       	lsr	r23
 162:	67 95       	ror	r22
 164:	76 95       	lsr	r23
 166:	67 95       	ror	r22
    //uint8_t buffer0stat;

    mcp2515_write(MCP_TXB0SIDH + 16*buffer, idMSB);
 168:	0d 2d       	mov	r16, r13
 16a:	02 95       	swap	r16
 16c:	00 7f       	andi	r16, 0xF0	; 240
 16e:	81 e3       	ldi	r24, 0x31	; 49
 170:	80 0f       	add	r24, r16
 172:	0e 94 7d 01 	call	0x2fa	; 0x2fa <mcp2515_write>
    mcp2515_write(MCP_TXB0SIDL + 16*buffer, idLSB);
 176:	61 2f       	mov	r22, r17
 178:	82 e3       	ldi	r24, 0x32	; 50
 17a:	80 0f       	add	r24, r16
 17c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <mcp2515_write>
    mcp2515_write(MCP_TXB0DLC + 16*buffer, msg->data_len);
 180:	f7 01       	movw	r30, r14
 182:	62 81       	ldd	r22, Z+2	; 0x02
 184:	85 e3       	ldi	r24, 0x35	; 53
 186:	80 0f       	add	r24, r16
 188:	0e 94 7d 01 	call	0x2fa	; 0x2fa <mcp2515_write>

    // Checcking if the MCP is already requesting transmission in bffer 0
	uint8_t value;
	mcp2515_read(MCP_TXB0CTRL, &value);
 18c:	be 01       	movw	r22, r28
 18e:	6f 5f       	subi	r22, 0xFF	; 255
 190:	7f 4f       	sbci	r23, 0xFF	; 255
 192:	80 e3       	ldi	r24, 0x30	; 48
 194:	0e 94 1e 01 	call	0x23c	; 0x23c <mcp2515_read>
    if((value & 0x08) != 0x08){
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	83 ff       	sbrs	r24, 3
 19c:	0c c0       	rjmp	.+24     	; 0x1b6 <can_send_msg+0x84>
 19e:	14 c0       	rjmp	.+40     	; 0x1c8 <can_send_msg+0x96>
        for(uint8_t i = 0; i < msg->data_len; i++){
            mcp2515_write(MCP_TXBD0 + 16*buffer + i, msg->data[i]);
 1a0:	f7 01       	movw	r30, r14
 1a2:	e1 0f       	add	r30, r17
 1a4:	f1 1d       	adc	r31, r1
 1a6:	63 81       	ldd	r22, Z+3	; 0x03
 1a8:	81 2f       	mov	r24, r17
 1aa:	80 0f       	add	r24, r16
 1ac:	8a 5c       	subi	r24, 0xCA	; 202
 1ae:	0e 94 7d 01 	call	0x2fa	; 0x2fa <mcp2515_write>

    // Checcking if the MCP is already requesting transmission in bffer 0
	uint8_t value;
	mcp2515_read(MCP_TXB0CTRL, &value);
    if((value & 0x08) != 0x08){
        for(uint8_t i = 0; i < msg->data_len; i++){
 1b2:	1f 5f       	subi	r17, 0xFF	; 255
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <can_send_msg+0x86>
 1b6:	10 e0       	ldi	r17, 0x00	; 0
 1b8:	f7 01       	movw	r30, r14
 1ba:	82 81       	ldd	r24, Z+2	; 0x02
 1bc:	18 17       	cp	r17, r24
 1be:	80 f3       	brcs	.-32     	; 0x1a0 <can_send_msg+0x6e>
            mcp2515_write(MCP_TXBD0 + 16*buffer + i, msg->data[i]);
        }
        mcp2515_request_to_send(MCP_RTS_TX0 + buffer);
 1c0:	81 e8       	ldi	r24, 0x81	; 129
 1c2:	8d 0d       	add	r24, r13
 1c4:	0e 94 93 01 	call	0x326	; 0x326 <mcp2515_request_to_send>
    }
    

}
 1c8:	0f 90       	pop	r0
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	ff 90       	pop	r15
 1d4:	ef 90       	pop	r14
 1d6:	df 90       	pop	r13
 1d8:	08 95       	ret

000001da <main>:
#include "MCP2515/MCP2515drv.h"
//#include "MENU/MENUdrv.h"
#include "CAN/CANdrv.h"

int main(void)
{
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	cd b7       	in	r28, 0x3d	; 61
 1e0:	de b7       	in	r29, 0x3e	; 62
 1e2:	66 97       	sbiw	r28, 0x16	; 22
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	f8 94       	cli
 1e8:	de bf       	out	0x3e, r29	; 62
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	cd bf       	out	0x3d, r28	; 61
	USART_Init(MYUBRR);
 1ee:	8f e1       	ldi	r24, 0x1F	; 31
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 0c 02 	call	0x418	; 0x418 <USART_Init>
	XMEM_init();
 1f6:	0e 94 fd 01 	call	0x3fa	; 0x3fa <XMEM_init>
	//Int_INIT();
	ADC_Init();
 1fa:	0e 94 57 00 	call	0xae	; 0xae <ADC_Init>
	oled_init();
 1fe:	0e 94 9f 01 	call	0x33e	; 0x33e <oled_init>
	spi_init_master();
 202:	0e 94 f6 01 	call	0x3ec	; 0x3ec <spi_init_master>
	//mcp2515_init();

	//printf("her\n\r");
	//spi_init_master();
	//oled_refresh_rate_init();
	sei();	
 206:	78 94       	sei

	//LAB 4
	//oled_refresh_rate_init();

	//LAB 5
	mcp2515_init();
 208:	0e 94 3a 01 	call	0x274	; 0x274 <mcp2515_init>
	can_msg melding;
	melding = can_handle_msg(69, 1, "h");
 20c:	26 e0       	ldi	r18, 0x06	; 6
 20e:	31 e0       	ldi	r19, 0x01	; 1
 210:	41 e0       	ldi	r20, 0x01	; 1
 212:	65 e4       	ldi	r22, 0x45	; 69
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	ce 01       	movw	r24, r28
 218:	0c 96       	adiw	r24, 0x0c	; 12
 21a:	0e 94 7c 00 	call	0xf8	; 0xf8 <can_handle_msg>
 21e:	8b e0       	ldi	r24, 0x0B	; 11
 220:	fe 01       	movw	r30, r28
 222:	3c 96       	adiw	r30, 0x0c	; 12
 224:	de 01       	movw	r26, r28
 226:	11 96       	adiw	r26, 0x01	; 1
 228:	01 90       	ld	r0, Z+
 22a:	0d 92       	st	X+, r0
 22c:	8a 95       	dec	r24
 22e:	e1 f7       	brne	.-8      	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
	can_send_msg(&melding, BUFFER0);
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	ce 01       	movw	r24, r28
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	0e 94 99 00 	call	0x132	; 0x132 <can_send_msg>
 23a:	ff cf       	rjmp	.-2      	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>

0000023c <mcp2515_read>:

    return 0;
}


void mcp2515_read(uint8_t address, uint8_t *value){
 23c:	cf 93       	push	r28
 23e:	c8 2f       	mov	r28, r24

    PORTB &= ~(1 << PB4); // Select CAN - controller
 240:	88 b3       	in	r24, 0x18	; 24
 242:	8f 7e       	andi	r24, 0xEF	; 239
 244:	88 bb       	out	0x18, r24	; 24

    spi_write_char(MCP_READ); // Send read instruction
 246:	83 e0       	ldi	r24, 0x03	; 3
 248:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <spi_write_char>
    spi_write_char(address); // Send address
 24c:	8c 2f       	mov	r24, r28
 24e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <spi_write_char>
	
    value = spi_read_char() ; // Read result
 252:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <spi_read_char>
    
	PORTB |= (1 << PB4); // Deselect CAN - controller
 256:	88 b3       	in	r24, 0x18	; 24
 258:	80 61       	ori	r24, 0x10	; 16
 25a:	88 bb       	out	0x18, r24	; 24
	//*value = result;
}
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <mcp2515_reset>:

void mcp2515_reset(){
    PORTB &= ~(1 << PB4); // Select CAN - controller
 260:	88 b3       	in	r24, 0x18	; 24
 262:	8f 7e       	andi	r24, 0xEF	; 239
 264:	88 bb       	out	0x18, r24	; 24
    spi_write_char(MCP_RESET);   //Write reset bit to SPI
 266:	80 ec       	ldi	r24, 0xC0	; 192
 268:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <spi_write_char>
    PORTB |= (1 << PB4); // Deselect CAN - controller
 26c:	88 b3       	in	r24, 0x18	; 24
 26e:	80 61       	ori	r24, 0x10	; 16
 270:	88 bb       	out	0x18, r24	; 24
 272:	08 95       	ret

00000274 <mcp2515_init>:
#include "../SPI/SPIdrv.h"




uint8_t mcp2515_init(){
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	1f 92       	push	r1
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
    uint8_t value;
	spi_init_master(); // Initialize SPI
 27e:	0e 94 f6 01 	call	0x3ec	; 0x3ec <spi_init_master>
    mcp2515_reset(); // end reset - command
 282:	0e 94 30 01 	call	0x260	; 0x260 <mcp2515_reset>
    // Self - testS
	//mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_CONFIG);


	mcp2515_read(MCP_CANCTRL, &value);	//printf("value: %d\n\r", value);
 286:	be 01       	movw	r22, r28
 288:	6f 5f       	subi	r22, 0xFF	; 255
 28a:	7f 4f       	sbci	r23, 0xFF	; 255
 28c:	8f e0       	ldi	r24, 0x0F	; 15
 28e:	0e 94 1e 01 	call	0x23c	; 0x23c <mcp2515_read>
    if ((value & MODE_MASK) != MODE_CONFIG) {
 292:	89 81       	ldd	r24, Y+1	; 0x01
 294:	80 7e       	andi	r24, 0xE0	; 224
 296:	80 38       	cpi	r24, 0x80	; 128
 298:	41 f0       	breq	.+16     	; 0x2aa <mcp2515_init+0x36>
        printf ("MCP2515 is NOT in config mode after reset !\n\r");
 29a:	88 e0       	ldi	r24, 0x08	; 8
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	9f 93       	push	r25
 2a0:	8f 93       	push	r24
 2a2:	0e 94 64 02 	call	0x4c8	; 0x4c8 <printf>
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
		//return -1;
    }
	if ((value & MODE_MASK) != MODE_NORMAL) {
 2aa:	89 81       	ldd	r24, Y+1	; 0x01
 2ac:	80 7e       	andi	r24, 0xE0	; 224
 2ae:	41 f0       	breq	.+16     	; 0x2c0 <mcp2515_init+0x4c>
        printf ("MCP2515 is NOT in connormfig mode after reset !\n\r");
 2b0:	86 e3       	ldi	r24, 0x36	; 54
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	9f 93       	push	r25
 2b6:	8f 93       	push	r24
 2b8:	0e 94 64 02 	call	0x4c8	; 0x4c8 <printf>
 2bc:	0f 90       	pop	r0
 2be:	0f 90       	pop	r0
		//return -1;
    }
	if ((value & MODE_MASK) != MODE_LOOPBACK) {
 2c0:	89 81       	ldd	r24, Y+1	; 0x01
 2c2:	80 7e       	andi	r24, 0xE0	; 224
 2c4:	80 34       	cpi	r24, 0x40	; 64
 2c6:	41 f0       	breq	.+16     	; 0x2d8 <mcp2515_init+0x64>
        printf ("MCP2515 is NOT in clooonfig mode after reset !\n\r");
 2c8:	88 e6       	ldi	r24, 0x68	; 104
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	9f 93       	push	r25
 2ce:	8f 93       	push	r24
 2d0:	0e 94 64 02 	call	0x4c8	; 0x4c8 <printf>
 2d4:	0f 90       	pop	r0
 2d6:	0f 90       	pop	r0
		//return -1;
    }
	if ((value & MODE_MASK) != MODE_SLEEP) {
 2d8:	89 81       	ldd	r24, Y+1	; 0x01
 2da:	80 7e       	andi	r24, 0xE0	; 224
 2dc:	80 32       	cpi	r24, 0x20	; 32
 2de:	41 f0       	breq	.+16     	; 0x2f0 <mcp2515_init+0x7c>
        printf ("MCP2515 is NOT in confsleppig mode after reset !\n\r");
 2e0:	89 e9       	ldi	r24, 0x99	; 153
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	9f 93       	push	r25
 2e6:	8f 93       	push	r24
 2e8:	0e 94 64 02 	call	0x4c8	; 0x4c8 <printf>
 2ec:	0f 90       	pop	r0
 2ee:	0f 90       	pop	r0
        printf ("MCP2515 is NOT in config mode after reset !\n\r");
		return -1;
    }

    return 0;
}
 2f0:	8f ef       	ldi	r24, 0xFF	; 255
 2f2:	0f 90       	pop	r0
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	08 95       	ret

000002fa <mcp2515_write>:
    PORTB &= ~(1 << PB4); // Select CAN - controller
    spi_write_char(MCP_RESET);   //Write reset bit to SPI
    PORTB |= (1 << PB4); // Deselect CAN - controller
}

void mcp2515_write(uint8_t address, uint8_t data){
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	d8 2f       	mov	r29, r24
 300:	c6 2f       	mov	r28, r22
    PORTB &= ~(1 << PB4); // Select CAN - controller
 302:	88 b3       	in	r24, 0x18	; 24
 304:	8f 7e       	andi	r24, 0xEF	; 239
 306:	88 bb       	out	0x18, r24	; 24
    spi_write_char(MCP_WRITE); // Send write instruction
 308:	82 e0       	ldi	r24, 0x02	; 2
 30a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <spi_write_char>
    spi_write_char(address); // Send address
 30e:	8d 2f       	mov	r24, r29
 310:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <spi_write_char>
    spi_write_char(data); // Send data
 314:	8c 2f       	mov	r24, r28
 316:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <spi_write_char>
    PORTB |= (1 << PB4); // Deselect CAN - controller
 31a:	88 b3       	in	r24, 0x18	; 24
 31c:	80 61       	ori	r24, 0x10	; 16
 31e:	88 bb       	out	0x18, r24	; 24
}
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <mcp2515_request_to_send>:

void mcp2515_request_to_send(uint8_t buffer){
    PORTB &= ~(1 << PB4); // Select CAN - controller
 326:	98 b3       	in	r25, 0x18	; 24
 328:	9f 7e       	andi	r25, 0xEF	; 239
 32a:	98 bb       	out	0x18, r25	; 24
    //spi_write_char(MCP_RTS_ALL);   Write RTS bit to SPI
    spi_write_char(buffer);
 32c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <spi_write_char>
    PORTB |= (1 << PB4); // Deselect CAN - controller
 330:	88 b3       	in	r24, 0x18	; 24
 332:	80 61       	ori	r24, 0x10	; 16
 334:	88 bb       	out	0x18, r24	; 24
 336:	08 95       	ret

00000338 <oled_write_command>:
	ext_mem[0]= data;
}

void oled_write_data(uint8_t data){
	volatile char *ext_mem = (char *) OLED_DATA_ADDRESS;
	ext_mem[0]= data;
 338:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xde9>
 33c:	08 95       	ret

0000033e <oled_init>:
}

void oled_init(){
    //Set inits according to datasheet
    oled_write_command(0xae); // display off
 33e:	8e ea       	ldi	r24, 0xAE	; 174
 340:	0e 94 9c 01 	call	0x338	; 0x338 <oled_write_command>
    oled_write_command(0xa1); //segment remap
 344:	81 ea       	ldi	r24, 0xA1	; 161
 346:	0e 94 9c 01 	call	0x338	; 0x338 <oled_write_command>
    oled_write_command(0xda); //common pads hardware: alternative
 34a:	8a ed       	ldi	r24, 0xDA	; 218
 34c:	0e 94 9c 01 	call	0x338	; 0x338 <oled_write_command>
    oled_write_command(0x12);
 350:	82 e1       	ldi	r24, 0x12	; 18
 352:	0e 94 9c 01 	call	0x338	; 0x338 <oled_write_command>
    oled_write_command(0xc8); //common output scan direction:com63~com0
 356:	88 ec       	ldi	r24, 0xC8	; 200
 358:	0e 94 9c 01 	call	0x338	; 0x338 <oled_write_command>
    oled_write_command(0xa8); //multiplex ration mode:63
 35c:	88 ea       	ldi	r24, 0xA8	; 168
 35e:	0e 94 9c 01 	call	0x338	; 0x338 <oled_write_command>
    oled_write_command(0x3f);
 362:	8f e3       	ldi	r24, 0x3F	; 63
 364:	0e 94 9c 01 	call	0x338	; 0x338 <oled_write_command>
    oled_write_command(0xd5); //display divide ratio/osc. freq. mode
 368:	85 ed       	ldi	r24, 0xD5	; 213
 36a:	0e 94 9c 01 	call	0x338	; 0x338 <oled_write_command>
    oled_write_command(0x80);
 36e:	80 e8       	ldi	r24, 0x80	; 128
 370:	0e 94 9c 01 	call	0x338	; 0x338 <oled_write_command>
    oled_write_command(0x81); //contrast control
 374:	81 e8       	ldi	r24, 0x81	; 129
 376:	0e 94 9c 01 	call	0x338	; 0x338 <oled_write_command>
    oled_write_command(0x50);
 37a:	80 e5       	ldi	r24, 0x50	; 80
 37c:	0e 94 9c 01 	call	0x338	; 0x338 <oled_write_command>
    oled_write_command(0xd9); //set pre-charge period
 380:	89 ed       	ldi	r24, 0xD9	; 217
 382:	0e 94 9c 01 	call	0x338	; 0x338 <oled_write_command>
    oled_write_command(0x21);
 386:	81 e2       	ldi	r24, 0x21	; 33
 388:	0e 94 9c 01 	call	0x338	; 0x338 <oled_write_command>
    oled_write_command(0x20); //Set Memory Addressing Mode
 38c:	80 e2       	ldi	r24, 0x20	; 32
 38e:	0e 94 9c 01 	call	0x338	; 0x338 <oled_write_command>
    oled_write_command(0x02);
 392:	82 e0       	ldi	r24, 0x02	; 2
 394:	0e 94 9c 01 	call	0x338	; 0x338 <oled_write_command>
    oled_write_command(0xdb); //VCOM deselect level mode
 398:	8b ed       	ldi	r24, 0xDB	; 219
 39a:	0e 94 9c 01 	call	0x338	; 0x338 <oled_write_command>
    oled_write_command(0x30);
 39e:	80 e3       	ldi	r24, 0x30	; 48
 3a0:	0e 94 9c 01 	call	0x338	; 0x338 <oled_write_command>
    oled_write_command(0xad); //master configuration
 3a4:	8d ea       	ldi	r24, 0xAD	; 173
 3a6:	0e 94 9c 01 	call	0x338	; 0x338 <oled_write_command>
    oled_write_command(0x00);
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	0e 94 9c 01 	call	0x338	; 0x338 <oled_write_command>
    oled_write_command(0xa4); //out follows RAM content
 3b0:	84 ea       	ldi	r24, 0xA4	; 164
 3b2:	0e 94 9c 01 	call	0x338	; 0x338 <oled_write_command>
    oled_write_command(0xa6); //set normal display
 3b6:	86 ea       	ldi	r24, 0xA6	; 166
 3b8:	0e 94 9c 01 	call	0x338	; 0x338 <oled_write_command>
    oled_write_command(0xaf); // display on
 3bc:	8f ea       	ldi	r24, 0xAF	; 175
 3be:	0e 94 9c 01 	call	0x338	; 0x338 <oled_write_command>

    //Set to page adressing mode
    oled_write_command(0x20);
 3c2:	80 e2       	ldi	r24, 0x20	; 32
 3c4:	0e 94 9c 01 	call	0x338	; 0x338 <oled_write_command>
	oled_write_command(0b10);
 3c8:	82 e0       	ldi	r24, 0x02	; 2
 3ca:	0e 94 9c 01 	call	0x338	; 0x338 <oled_write_command>
 3ce:	08 95       	ret

000003d0 <spi_write_char>:
	SPCR = (1<<SPE);
}
*/
void spi_write_char(char cData){
	//char flushbuffer;
    SPDR = cData;
 3d0:	8f b9       	out	0x0f, r24	; 15
    //Wait for send to complete

	loop_until_bit_is_set(SPSR, SPIF);
 3d2:	77 9b       	sbis	0x0e, 7	; 14
 3d4:	fe cf       	rjmp	.-4      	; 0x3d2 <spi_write_char+0x2>
	//while(!(SPSR & (1<<SPIF)));
	//flushbuffer = SPDR;
}
 3d6:	08 95       	ret

000003d8 <spi_read_char>:

char spi_read_char(){
    SPDR = 0xAA;
 3d8:	8a ea       	ldi	r24, 0xAA	; 170
 3da:	8f b9       	out	0x0f, r24	; 15
	// Wait for reception to complete

    loop_until_bit_is_set(SPSR, SPIF);
 3dc:	77 9b       	sbis	0x0e, 7	; 14
 3de:	fe cf       	rjmp	.-4      	; 0x3dc <spi_read_char+0x4>
	//while(!(SPSR & (1<<SPIF)));
	// Return char in data register
	return SPDR;
 3e0:	8f b1       	in	r24, 0x0f	; 15

}
 3e2:	08 95       	ret

000003e4 <spi_set_ss_high>:

void spi_set_ss_high(){
    PORTB |= (1<<DD_SS);
 3e4:	88 b3       	in	r24, 0x18	; 24
 3e6:	80 61       	ori	r24, 0x10	; 16
 3e8:	88 bb       	out	0x18, r24	; 24
 3ea:	08 95       	ret

000003ec <spi_init_master>:
#include "SPIdrv.h"


void spi_init_master(){
    // Set MOSI and SCK - og SS - output, all others input
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS);
 3ec:	80 eb       	ldi	r24, 0xB0	; 176
 3ee:	87 bb       	out	0x17, r24	; 23
	
	//DDR_SPI &= ~(1<<DD_MISO);
	
	// Enable SPI, Master, set clock rate fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);//|(1<<SPIE);
 3f0:	81 e5       	ldi	r24, 0x51	; 81
 3f2:	8d b9       	out	0x0d, r24	; 13
	//SPCR &= ~((1<<CPOL)|(1<<CPHA));
	spi_set_ss_high();
 3f4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <spi_set_ss_high>
 3f8:	08 95       	ret

000003fa <XMEM_init>:
#include "SRAMdrv.h"

void XMEM_init(void){
	MCUCR |= (1<<SRE); //enable XMEM
 3fa:	85 b7       	in	r24, 0x35	; 53
 3fc:	80 68       	ori	r24, 0x80	; 128
 3fe:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2); // Masking P7-P4
 400:	80 b7       	in	r24, 0x30	; 48
 402:	80 62       	ori	r24, 0x20	; 32
 404:	80 bf       	out	0x30, r24	; 48
 406:	08 95       	ret

00000408 <USART_Transmit>:
#include "UARTdrv.h"

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
 408:	5d 9b       	sbis	0x0b, 5	; 11
 40a:	fe cf       	rjmp	.-4      	; 0x408 <USART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 40c:	8c b9       	out	0x0c, r24	; 12
 40e:	08 95       	ret

00000410 <USART_Receive>:
}
unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
 410:	5f 9b       	sbis	0x0b, 7	; 11
 412:	fe cf       	rjmp	.-4      	; 0x410 <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR0;
 414:	8c b1       	in	r24, 0x0c	; 12
}
 416:	08 95       	ret

00000418 <USART_Init>:
void USART_Init( unsigned int ubrr )
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 418:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
 41a:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 41c:	88 e1       	ldi	r24, 0x18	; 24
 41e:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
 420:	8e e8       	ldi	r24, 0x8E	; 142
 422:	80 bd       	out	0x20, r24	; 32
	fdevopen(USART_Transmit,USART_Receive);
 424:	68 e0       	ldi	r22, 0x08	; 8
 426:	72 e0       	ldi	r23, 0x02	; 2
 428:	84 e0       	ldi	r24, 0x04	; 4
 42a:	92 e0       	ldi	r25, 0x02	; 2
 42c:	0e 94 19 02 	call	0x432	; 0x432 <fdevopen>
 430:	08 95       	ret

00000432 <fdevopen>:
 432:	0f 93       	push	r16
 434:	1f 93       	push	r17
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	00 97       	sbiw	r24, 0x00	; 0
 43c:	31 f4       	brne	.+12     	; 0x44a <fdevopen+0x18>
 43e:	61 15       	cp	r22, r1
 440:	71 05       	cpc	r23, r1
 442:	19 f4       	brne	.+6      	; 0x44a <fdevopen+0x18>
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	3a c0       	rjmp	.+116    	; 0x4be <fdevopen+0x8c>
 44a:	8b 01       	movw	r16, r22
 44c:	ec 01       	movw	r28, r24
 44e:	6e e0       	ldi	r22, 0x0E	; 14
 450:	70 e0       	ldi	r23, 0x00	; 0
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <calloc>
 45a:	fc 01       	movw	r30, r24
 45c:	89 2b       	or	r24, r25
 45e:	91 f3       	breq	.-28     	; 0x444 <fdevopen+0x12>
 460:	80 e8       	ldi	r24, 0x80	; 128
 462:	83 83       	std	Z+3, r24	; 0x03
 464:	01 15       	cp	r16, r1
 466:	11 05       	cpc	r17, r1
 468:	71 f0       	breq	.+28     	; 0x486 <fdevopen+0x54>
 46a:	13 87       	std	Z+11, r17	; 0x0b
 46c:	02 87       	std	Z+10, r16	; 0x0a
 46e:	81 e8       	ldi	r24, 0x81	; 129
 470:	83 83       	std	Z+3, r24	; 0x03
 472:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <__iob>
 476:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <__iob+0x1>
 47a:	89 2b       	or	r24, r25
 47c:	21 f4       	brne	.+8      	; 0x486 <fdevopen+0x54>
 47e:	f0 93 0e 02 	sts	0x020E, r31	; 0x80020e <__iob+0x1>
 482:	e0 93 0d 02 	sts	0x020D, r30	; 0x80020d <__iob>
 486:	20 97       	sbiw	r28, 0x00	; 0
 488:	c9 f0       	breq	.+50     	; 0x4bc <fdevopen+0x8a>
 48a:	d1 87       	std	Z+9, r29	; 0x09
 48c:	c0 87       	std	Z+8, r28	; 0x08
 48e:	83 81       	ldd	r24, Z+3	; 0x03
 490:	82 60       	ori	r24, 0x02	; 2
 492:	83 83       	std	Z+3, r24	; 0x03
 494:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <__iob+0x2>
 498:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <__iob+0x3>
 49c:	89 2b       	or	r24, r25
 49e:	71 f4       	brne	.+28     	; 0x4bc <fdevopen+0x8a>
 4a0:	f0 93 10 02 	sts	0x0210, r31	; 0x800210 <__iob+0x3>
 4a4:	e0 93 0f 02 	sts	0x020F, r30	; 0x80020f <__iob+0x2>
 4a8:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <__iob+0x4>
 4ac:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <__iob+0x5>
 4b0:	89 2b       	or	r24, r25
 4b2:	21 f4       	brne	.+8      	; 0x4bc <fdevopen+0x8a>
 4b4:	f0 93 12 02 	sts	0x0212, r31	; 0x800212 <__iob+0x5>
 4b8:	e0 93 11 02 	sts	0x0211, r30	; 0x800211 <__iob+0x4>
 4bc:	cf 01       	movw	r24, r30
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	1f 91       	pop	r17
 4c4:	0f 91       	pop	r16
 4c6:	08 95       	ret

000004c8 <printf>:
 4c8:	a0 e0       	ldi	r26, 0x00	; 0
 4ca:	b0 e0       	ldi	r27, 0x00	; 0
 4cc:	ea e6       	ldi	r30, 0x6A	; 106
 4ce:	f2 e0       	ldi	r31, 0x02	; 2
 4d0:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__prologue_saves__+0x20>
 4d4:	ae 01       	movw	r20, r28
 4d6:	4b 5f       	subi	r20, 0xFB	; 251
 4d8:	5f 4f       	sbci	r21, 0xFF	; 255
 4da:	fa 01       	movw	r30, r20
 4dc:	61 91       	ld	r22, Z+
 4de:	71 91       	ld	r23, Z+
 4e0:	af 01       	movw	r20, r30
 4e2:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <__iob+0x2>
 4e6:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <__iob+0x3>
 4ea:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <vfprintf>
 4ee:	e2 e0       	ldi	r30, 0x02	; 2
 4f0:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__epilogue_restores__+0x20>

000004f4 <vfprintf>:
 4f4:	ab e0       	ldi	r26, 0x0B	; 11
 4f6:	b0 e0       	ldi	r27, 0x00	; 0
 4f8:	e0 e8       	ldi	r30, 0x80	; 128
 4fa:	f2 e0       	ldi	r31, 0x02	; 2
 4fc:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__prologue_saves__>
 500:	6c 01       	movw	r12, r24
 502:	7b 01       	movw	r14, r22
 504:	8a 01       	movw	r16, r20
 506:	fc 01       	movw	r30, r24
 508:	17 82       	std	Z+7, r1	; 0x07
 50a:	16 82       	std	Z+6, r1	; 0x06
 50c:	83 81       	ldd	r24, Z+3	; 0x03
 50e:	81 ff       	sbrs	r24, 1
 510:	cc c1       	rjmp	.+920    	; 0x8aa <__stack+0x3ab>
 512:	ce 01       	movw	r24, r28
 514:	01 96       	adiw	r24, 0x01	; 1
 516:	3c 01       	movw	r6, r24
 518:	f6 01       	movw	r30, r12
 51a:	93 81       	ldd	r25, Z+3	; 0x03
 51c:	f7 01       	movw	r30, r14
 51e:	93 fd       	sbrc	r25, 3
 520:	85 91       	lpm	r24, Z+
 522:	93 ff       	sbrs	r25, 3
 524:	81 91       	ld	r24, Z+
 526:	7f 01       	movw	r14, r30
 528:	88 23       	and	r24, r24
 52a:	09 f4       	brne	.+2      	; 0x52e <__stack+0x2f>
 52c:	ba c1       	rjmp	.+884    	; 0x8a2 <__stack+0x3a3>
 52e:	85 32       	cpi	r24, 0x25	; 37
 530:	39 f4       	brne	.+14     	; 0x540 <__stack+0x41>
 532:	93 fd       	sbrc	r25, 3
 534:	85 91       	lpm	r24, Z+
 536:	93 ff       	sbrs	r25, 3
 538:	81 91       	ld	r24, Z+
 53a:	7f 01       	movw	r14, r30
 53c:	85 32       	cpi	r24, 0x25	; 37
 53e:	29 f4       	brne	.+10     	; 0x54a <__stack+0x4b>
 540:	b6 01       	movw	r22, r12
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 b5 05 	call	0xb6a	; 0xb6a <fputc>
 548:	e7 cf       	rjmp	.-50     	; 0x518 <__stack+0x19>
 54a:	91 2c       	mov	r9, r1
 54c:	21 2c       	mov	r2, r1
 54e:	31 2c       	mov	r3, r1
 550:	ff e1       	ldi	r31, 0x1F	; 31
 552:	f3 15       	cp	r31, r3
 554:	d8 f0       	brcs	.+54     	; 0x58c <__stack+0x8d>
 556:	8b 32       	cpi	r24, 0x2B	; 43
 558:	79 f0       	breq	.+30     	; 0x578 <__stack+0x79>
 55a:	38 f4       	brcc	.+14     	; 0x56a <__stack+0x6b>
 55c:	80 32       	cpi	r24, 0x20	; 32
 55e:	79 f0       	breq	.+30     	; 0x57e <__stack+0x7f>
 560:	83 32       	cpi	r24, 0x23	; 35
 562:	a1 f4       	brne	.+40     	; 0x58c <__stack+0x8d>
 564:	23 2d       	mov	r18, r3
 566:	20 61       	ori	r18, 0x10	; 16
 568:	1d c0       	rjmp	.+58     	; 0x5a4 <__stack+0xa5>
 56a:	8d 32       	cpi	r24, 0x2D	; 45
 56c:	61 f0       	breq	.+24     	; 0x586 <__stack+0x87>
 56e:	80 33       	cpi	r24, 0x30	; 48
 570:	69 f4       	brne	.+26     	; 0x58c <__stack+0x8d>
 572:	23 2d       	mov	r18, r3
 574:	21 60       	ori	r18, 0x01	; 1
 576:	16 c0       	rjmp	.+44     	; 0x5a4 <__stack+0xa5>
 578:	83 2d       	mov	r24, r3
 57a:	82 60       	ori	r24, 0x02	; 2
 57c:	38 2e       	mov	r3, r24
 57e:	e3 2d       	mov	r30, r3
 580:	e4 60       	ori	r30, 0x04	; 4
 582:	3e 2e       	mov	r3, r30
 584:	2a c0       	rjmp	.+84     	; 0x5da <__stack+0xdb>
 586:	f3 2d       	mov	r31, r3
 588:	f8 60       	ori	r31, 0x08	; 8
 58a:	1d c0       	rjmp	.+58     	; 0x5c6 <__stack+0xc7>
 58c:	37 fc       	sbrc	r3, 7
 58e:	2d c0       	rjmp	.+90     	; 0x5ea <__stack+0xeb>
 590:	20 ed       	ldi	r18, 0xD0	; 208
 592:	28 0f       	add	r18, r24
 594:	2a 30       	cpi	r18, 0x0A	; 10
 596:	40 f0       	brcs	.+16     	; 0x5a8 <__stack+0xa9>
 598:	8e 32       	cpi	r24, 0x2E	; 46
 59a:	b9 f4       	brne	.+46     	; 0x5ca <__stack+0xcb>
 59c:	36 fc       	sbrc	r3, 6
 59e:	81 c1       	rjmp	.+770    	; 0x8a2 <__stack+0x3a3>
 5a0:	23 2d       	mov	r18, r3
 5a2:	20 64       	ori	r18, 0x40	; 64
 5a4:	32 2e       	mov	r3, r18
 5a6:	19 c0       	rjmp	.+50     	; 0x5da <__stack+0xdb>
 5a8:	36 fe       	sbrs	r3, 6
 5aa:	06 c0       	rjmp	.+12     	; 0x5b8 <__stack+0xb9>
 5ac:	8a e0       	ldi	r24, 0x0A	; 10
 5ae:	98 9e       	mul	r9, r24
 5b0:	20 0d       	add	r18, r0
 5b2:	11 24       	eor	r1, r1
 5b4:	92 2e       	mov	r9, r18
 5b6:	11 c0       	rjmp	.+34     	; 0x5da <__stack+0xdb>
 5b8:	ea e0       	ldi	r30, 0x0A	; 10
 5ba:	2e 9e       	mul	r2, r30
 5bc:	20 0d       	add	r18, r0
 5be:	11 24       	eor	r1, r1
 5c0:	22 2e       	mov	r2, r18
 5c2:	f3 2d       	mov	r31, r3
 5c4:	f0 62       	ori	r31, 0x20	; 32
 5c6:	3f 2e       	mov	r3, r31
 5c8:	08 c0       	rjmp	.+16     	; 0x5da <__stack+0xdb>
 5ca:	8c 36       	cpi	r24, 0x6C	; 108
 5cc:	21 f4       	brne	.+8      	; 0x5d6 <__stack+0xd7>
 5ce:	83 2d       	mov	r24, r3
 5d0:	80 68       	ori	r24, 0x80	; 128
 5d2:	38 2e       	mov	r3, r24
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <__stack+0xdb>
 5d6:	88 36       	cpi	r24, 0x68	; 104
 5d8:	41 f4       	brne	.+16     	; 0x5ea <__stack+0xeb>
 5da:	f7 01       	movw	r30, r14
 5dc:	93 fd       	sbrc	r25, 3
 5de:	85 91       	lpm	r24, Z+
 5e0:	93 ff       	sbrs	r25, 3
 5e2:	81 91       	ld	r24, Z+
 5e4:	7f 01       	movw	r14, r30
 5e6:	81 11       	cpse	r24, r1
 5e8:	b3 cf       	rjmp	.-154    	; 0x550 <__stack+0x51>
 5ea:	98 2f       	mov	r25, r24
 5ec:	9f 7d       	andi	r25, 0xDF	; 223
 5ee:	95 54       	subi	r25, 0x45	; 69
 5f0:	93 30       	cpi	r25, 0x03	; 3
 5f2:	28 f4       	brcc	.+10     	; 0x5fe <__stack+0xff>
 5f4:	0c 5f       	subi	r16, 0xFC	; 252
 5f6:	1f 4f       	sbci	r17, 0xFF	; 255
 5f8:	9f e3       	ldi	r25, 0x3F	; 63
 5fa:	99 83       	std	Y+1, r25	; 0x01
 5fc:	0d c0       	rjmp	.+26     	; 0x618 <__stack+0x119>
 5fe:	83 36       	cpi	r24, 0x63	; 99
 600:	31 f0       	breq	.+12     	; 0x60e <__stack+0x10f>
 602:	83 37       	cpi	r24, 0x73	; 115
 604:	71 f0       	breq	.+28     	; 0x622 <__stack+0x123>
 606:	83 35       	cpi	r24, 0x53	; 83
 608:	09 f0       	breq	.+2      	; 0x60c <__stack+0x10d>
 60a:	59 c0       	rjmp	.+178    	; 0x6be <__stack+0x1bf>
 60c:	21 c0       	rjmp	.+66     	; 0x650 <__stack+0x151>
 60e:	f8 01       	movw	r30, r16
 610:	80 81       	ld	r24, Z
 612:	89 83       	std	Y+1, r24	; 0x01
 614:	0e 5f       	subi	r16, 0xFE	; 254
 616:	1f 4f       	sbci	r17, 0xFF	; 255
 618:	88 24       	eor	r8, r8
 61a:	83 94       	inc	r8
 61c:	91 2c       	mov	r9, r1
 61e:	53 01       	movw	r10, r6
 620:	13 c0       	rjmp	.+38     	; 0x648 <__stack+0x149>
 622:	28 01       	movw	r4, r16
 624:	f2 e0       	ldi	r31, 0x02	; 2
 626:	4f 0e       	add	r4, r31
 628:	51 1c       	adc	r5, r1
 62a:	f8 01       	movw	r30, r16
 62c:	a0 80       	ld	r10, Z
 62e:	b1 80       	ldd	r11, Z+1	; 0x01
 630:	36 fe       	sbrs	r3, 6
 632:	03 c0       	rjmp	.+6      	; 0x63a <__stack+0x13b>
 634:	69 2d       	mov	r22, r9
 636:	70 e0       	ldi	r23, 0x00	; 0
 638:	02 c0       	rjmp	.+4      	; 0x63e <__stack+0x13f>
 63a:	6f ef       	ldi	r22, 0xFF	; 255
 63c:	7f ef       	ldi	r23, 0xFF	; 255
 63e:	c5 01       	movw	r24, r10
 640:	0e 94 aa 05 	call	0xb54	; 0xb54 <strnlen>
 644:	4c 01       	movw	r8, r24
 646:	82 01       	movw	r16, r4
 648:	f3 2d       	mov	r31, r3
 64a:	ff 77       	andi	r31, 0x7F	; 127
 64c:	3f 2e       	mov	r3, r31
 64e:	16 c0       	rjmp	.+44     	; 0x67c <__stack+0x17d>
 650:	28 01       	movw	r4, r16
 652:	22 e0       	ldi	r18, 0x02	; 2
 654:	42 0e       	add	r4, r18
 656:	51 1c       	adc	r5, r1
 658:	f8 01       	movw	r30, r16
 65a:	a0 80       	ld	r10, Z
 65c:	b1 80       	ldd	r11, Z+1	; 0x01
 65e:	36 fe       	sbrs	r3, 6
 660:	03 c0       	rjmp	.+6      	; 0x668 <__stack+0x169>
 662:	69 2d       	mov	r22, r9
 664:	70 e0       	ldi	r23, 0x00	; 0
 666:	02 c0       	rjmp	.+4      	; 0x66c <__stack+0x16d>
 668:	6f ef       	ldi	r22, 0xFF	; 255
 66a:	7f ef       	ldi	r23, 0xFF	; 255
 66c:	c5 01       	movw	r24, r10
 66e:	0e 94 98 05 	call	0xb30	; 0xb30 <strnlen_P>
 672:	4c 01       	movw	r8, r24
 674:	f3 2d       	mov	r31, r3
 676:	f0 68       	ori	r31, 0x80	; 128
 678:	3f 2e       	mov	r3, r31
 67a:	82 01       	movw	r16, r4
 67c:	33 fc       	sbrc	r3, 3
 67e:	1b c0       	rjmp	.+54     	; 0x6b6 <__stack+0x1b7>
 680:	82 2d       	mov	r24, r2
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	88 16       	cp	r8, r24
 686:	99 06       	cpc	r9, r25
 688:	b0 f4       	brcc	.+44     	; 0x6b6 <__stack+0x1b7>
 68a:	b6 01       	movw	r22, r12
 68c:	80 e2       	ldi	r24, 0x20	; 32
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	0e 94 b5 05 	call	0xb6a	; 0xb6a <fputc>
 694:	2a 94       	dec	r2
 696:	f4 cf       	rjmp	.-24     	; 0x680 <__stack+0x181>
 698:	f5 01       	movw	r30, r10
 69a:	37 fc       	sbrc	r3, 7
 69c:	85 91       	lpm	r24, Z+
 69e:	37 fe       	sbrs	r3, 7
 6a0:	81 91       	ld	r24, Z+
 6a2:	5f 01       	movw	r10, r30
 6a4:	b6 01       	movw	r22, r12
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	0e 94 b5 05 	call	0xb6a	; 0xb6a <fputc>
 6ac:	21 10       	cpse	r2, r1
 6ae:	2a 94       	dec	r2
 6b0:	21 e0       	ldi	r18, 0x01	; 1
 6b2:	82 1a       	sub	r8, r18
 6b4:	91 08       	sbc	r9, r1
 6b6:	81 14       	cp	r8, r1
 6b8:	91 04       	cpc	r9, r1
 6ba:	71 f7       	brne	.-36     	; 0x698 <__stack+0x199>
 6bc:	e8 c0       	rjmp	.+464    	; 0x88e <__stack+0x38f>
 6be:	84 36       	cpi	r24, 0x64	; 100
 6c0:	11 f0       	breq	.+4      	; 0x6c6 <__stack+0x1c7>
 6c2:	89 36       	cpi	r24, 0x69	; 105
 6c4:	41 f5       	brne	.+80     	; 0x716 <__stack+0x217>
 6c6:	f8 01       	movw	r30, r16
 6c8:	37 fe       	sbrs	r3, 7
 6ca:	07 c0       	rjmp	.+14     	; 0x6da <__stack+0x1db>
 6cc:	60 81       	ld	r22, Z
 6ce:	71 81       	ldd	r23, Z+1	; 0x01
 6d0:	82 81       	ldd	r24, Z+2	; 0x02
 6d2:	93 81       	ldd	r25, Z+3	; 0x03
 6d4:	0c 5f       	subi	r16, 0xFC	; 252
 6d6:	1f 4f       	sbci	r17, 0xFF	; 255
 6d8:	08 c0       	rjmp	.+16     	; 0x6ea <__stack+0x1eb>
 6da:	60 81       	ld	r22, Z
 6dc:	71 81       	ldd	r23, Z+1	; 0x01
 6de:	07 2e       	mov	r0, r23
 6e0:	00 0c       	add	r0, r0
 6e2:	88 0b       	sbc	r24, r24
 6e4:	99 0b       	sbc	r25, r25
 6e6:	0e 5f       	subi	r16, 0xFE	; 254
 6e8:	1f 4f       	sbci	r17, 0xFF	; 255
 6ea:	f3 2d       	mov	r31, r3
 6ec:	ff 76       	andi	r31, 0x6F	; 111
 6ee:	3f 2e       	mov	r3, r31
 6f0:	97 ff       	sbrs	r25, 7
 6f2:	09 c0       	rjmp	.+18     	; 0x706 <__stack+0x207>
 6f4:	90 95       	com	r25
 6f6:	80 95       	com	r24
 6f8:	70 95       	com	r23
 6fa:	61 95       	neg	r22
 6fc:	7f 4f       	sbci	r23, 0xFF	; 255
 6fe:	8f 4f       	sbci	r24, 0xFF	; 255
 700:	9f 4f       	sbci	r25, 0xFF	; 255
 702:	f0 68       	ori	r31, 0x80	; 128
 704:	3f 2e       	mov	r3, r31
 706:	2a e0       	ldi	r18, 0x0A	; 10
 708:	30 e0       	ldi	r19, 0x00	; 0
 70a:	a3 01       	movw	r20, r6
 70c:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__ultoa_invert>
 710:	88 2e       	mov	r8, r24
 712:	86 18       	sub	r8, r6
 714:	45 c0       	rjmp	.+138    	; 0x7a0 <__stack+0x2a1>
 716:	85 37       	cpi	r24, 0x75	; 117
 718:	31 f4       	brne	.+12     	; 0x726 <__stack+0x227>
 71a:	23 2d       	mov	r18, r3
 71c:	2f 7e       	andi	r18, 0xEF	; 239
 71e:	b2 2e       	mov	r11, r18
 720:	2a e0       	ldi	r18, 0x0A	; 10
 722:	30 e0       	ldi	r19, 0x00	; 0
 724:	25 c0       	rjmp	.+74     	; 0x770 <__stack+0x271>
 726:	93 2d       	mov	r25, r3
 728:	99 7f       	andi	r25, 0xF9	; 249
 72a:	b9 2e       	mov	r11, r25
 72c:	8f 36       	cpi	r24, 0x6F	; 111
 72e:	c1 f0       	breq	.+48     	; 0x760 <__stack+0x261>
 730:	18 f4       	brcc	.+6      	; 0x738 <__stack+0x239>
 732:	88 35       	cpi	r24, 0x58	; 88
 734:	79 f0       	breq	.+30     	; 0x754 <__stack+0x255>
 736:	b5 c0       	rjmp	.+362    	; 0x8a2 <__stack+0x3a3>
 738:	80 37       	cpi	r24, 0x70	; 112
 73a:	19 f0       	breq	.+6      	; 0x742 <__stack+0x243>
 73c:	88 37       	cpi	r24, 0x78	; 120
 73e:	21 f0       	breq	.+8      	; 0x748 <__stack+0x249>
 740:	b0 c0       	rjmp	.+352    	; 0x8a2 <__stack+0x3a3>
 742:	e9 2f       	mov	r30, r25
 744:	e0 61       	ori	r30, 0x10	; 16
 746:	be 2e       	mov	r11, r30
 748:	b4 fe       	sbrs	r11, 4
 74a:	0d c0       	rjmp	.+26     	; 0x766 <__stack+0x267>
 74c:	fb 2d       	mov	r31, r11
 74e:	f4 60       	ori	r31, 0x04	; 4
 750:	bf 2e       	mov	r11, r31
 752:	09 c0       	rjmp	.+18     	; 0x766 <__stack+0x267>
 754:	34 fe       	sbrs	r3, 4
 756:	0a c0       	rjmp	.+20     	; 0x76c <__stack+0x26d>
 758:	29 2f       	mov	r18, r25
 75a:	26 60       	ori	r18, 0x06	; 6
 75c:	b2 2e       	mov	r11, r18
 75e:	06 c0       	rjmp	.+12     	; 0x76c <__stack+0x26d>
 760:	28 e0       	ldi	r18, 0x08	; 8
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	05 c0       	rjmp	.+10     	; 0x770 <__stack+0x271>
 766:	20 e1       	ldi	r18, 0x10	; 16
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	02 c0       	rjmp	.+4      	; 0x770 <__stack+0x271>
 76c:	20 e1       	ldi	r18, 0x10	; 16
 76e:	32 e0       	ldi	r19, 0x02	; 2
 770:	f8 01       	movw	r30, r16
 772:	b7 fe       	sbrs	r11, 7
 774:	07 c0       	rjmp	.+14     	; 0x784 <__stack+0x285>
 776:	60 81       	ld	r22, Z
 778:	71 81       	ldd	r23, Z+1	; 0x01
 77a:	82 81       	ldd	r24, Z+2	; 0x02
 77c:	93 81       	ldd	r25, Z+3	; 0x03
 77e:	0c 5f       	subi	r16, 0xFC	; 252
 780:	1f 4f       	sbci	r17, 0xFF	; 255
 782:	06 c0       	rjmp	.+12     	; 0x790 <__stack+0x291>
 784:	60 81       	ld	r22, Z
 786:	71 81       	ldd	r23, Z+1	; 0x01
 788:	80 e0       	ldi	r24, 0x00	; 0
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	0e 5f       	subi	r16, 0xFE	; 254
 78e:	1f 4f       	sbci	r17, 0xFF	; 255
 790:	a3 01       	movw	r20, r6
 792:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__ultoa_invert>
 796:	88 2e       	mov	r8, r24
 798:	86 18       	sub	r8, r6
 79a:	fb 2d       	mov	r31, r11
 79c:	ff 77       	andi	r31, 0x7F	; 127
 79e:	3f 2e       	mov	r3, r31
 7a0:	36 fe       	sbrs	r3, 6
 7a2:	0d c0       	rjmp	.+26     	; 0x7be <__stack+0x2bf>
 7a4:	23 2d       	mov	r18, r3
 7a6:	2e 7f       	andi	r18, 0xFE	; 254
 7a8:	a2 2e       	mov	r10, r18
 7aa:	89 14       	cp	r8, r9
 7ac:	58 f4       	brcc	.+22     	; 0x7c4 <__stack+0x2c5>
 7ae:	34 fe       	sbrs	r3, 4
 7b0:	0b c0       	rjmp	.+22     	; 0x7c8 <__stack+0x2c9>
 7b2:	32 fc       	sbrc	r3, 2
 7b4:	09 c0       	rjmp	.+18     	; 0x7c8 <__stack+0x2c9>
 7b6:	83 2d       	mov	r24, r3
 7b8:	8e 7e       	andi	r24, 0xEE	; 238
 7ba:	a8 2e       	mov	r10, r24
 7bc:	05 c0       	rjmp	.+10     	; 0x7c8 <__stack+0x2c9>
 7be:	b8 2c       	mov	r11, r8
 7c0:	a3 2c       	mov	r10, r3
 7c2:	03 c0       	rjmp	.+6      	; 0x7ca <__stack+0x2cb>
 7c4:	b8 2c       	mov	r11, r8
 7c6:	01 c0       	rjmp	.+2      	; 0x7ca <__stack+0x2cb>
 7c8:	b9 2c       	mov	r11, r9
 7ca:	a4 fe       	sbrs	r10, 4
 7cc:	0f c0       	rjmp	.+30     	; 0x7ec <__stack+0x2ed>
 7ce:	fe 01       	movw	r30, r28
 7d0:	e8 0d       	add	r30, r8
 7d2:	f1 1d       	adc	r31, r1
 7d4:	80 81       	ld	r24, Z
 7d6:	80 33       	cpi	r24, 0x30	; 48
 7d8:	21 f4       	brne	.+8      	; 0x7e2 <__stack+0x2e3>
 7da:	9a 2d       	mov	r25, r10
 7dc:	99 7e       	andi	r25, 0xE9	; 233
 7de:	a9 2e       	mov	r10, r25
 7e0:	09 c0       	rjmp	.+18     	; 0x7f4 <__stack+0x2f5>
 7e2:	a2 fe       	sbrs	r10, 2
 7e4:	06 c0       	rjmp	.+12     	; 0x7f2 <__stack+0x2f3>
 7e6:	b3 94       	inc	r11
 7e8:	b3 94       	inc	r11
 7ea:	04 c0       	rjmp	.+8      	; 0x7f4 <__stack+0x2f5>
 7ec:	8a 2d       	mov	r24, r10
 7ee:	86 78       	andi	r24, 0x86	; 134
 7f0:	09 f0       	breq	.+2      	; 0x7f4 <__stack+0x2f5>
 7f2:	b3 94       	inc	r11
 7f4:	a3 fc       	sbrc	r10, 3
 7f6:	11 c0       	rjmp	.+34     	; 0x81a <__stack+0x31b>
 7f8:	a0 fe       	sbrs	r10, 0
 7fa:	06 c0       	rjmp	.+12     	; 0x808 <__stack+0x309>
 7fc:	b2 14       	cp	r11, r2
 7fe:	88 f4       	brcc	.+34     	; 0x822 <__stack+0x323>
 800:	28 0c       	add	r2, r8
 802:	92 2c       	mov	r9, r2
 804:	9b 18       	sub	r9, r11
 806:	0e c0       	rjmp	.+28     	; 0x824 <__stack+0x325>
 808:	b2 14       	cp	r11, r2
 80a:	60 f4       	brcc	.+24     	; 0x824 <__stack+0x325>
 80c:	b6 01       	movw	r22, r12
 80e:	80 e2       	ldi	r24, 0x20	; 32
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	0e 94 b5 05 	call	0xb6a	; 0xb6a <fputc>
 816:	b3 94       	inc	r11
 818:	f7 cf       	rjmp	.-18     	; 0x808 <__stack+0x309>
 81a:	b2 14       	cp	r11, r2
 81c:	18 f4       	brcc	.+6      	; 0x824 <__stack+0x325>
 81e:	2b 18       	sub	r2, r11
 820:	02 c0       	rjmp	.+4      	; 0x826 <__stack+0x327>
 822:	98 2c       	mov	r9, r8
 824:	21 2c       	mov	r2, r1
 826:	a4 fe       	sbrs	r10, 4
 828:	10 c0       	rjmp	.+32     	; 0x84a <__stack+0x34b>
 82a:	b6 01       	movw	r22, r12
 82c:	80 e3       	ldi	r24, 0x30	; 48
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	0e 94 b5 05 	call	0xb6a	; 0xb6a <fputc>
 834:	a2 fe       	sbrs	r10, 2
 836:	17 c0       	rjmp	.+46     	; 0x866 <__stack+0x367>
 838:	a1 fc       	sbrc	r10, 1
 83a:	03 c0       	rjmp	.+6      	; 0x842 <__stack+0x343>
 83c:	88 e7       	ldi	r24, 0x78	; 120
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	02 c0       	rjmp	.+4      	; 0x846 <__stack+0x347>
 842:	88 e5       	ldi	r24, 0x58	; 88
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	b6 01       	movw	r22, r12
 848:	0c c0       	rjmp	.+24     	; 0x862 <__stack+0x363>
 84a:	8a 2d       	mov	r24, r10
 84c:	86 78       	andi	r24, 0x86	; 134
 84e:	59 f0       	breq	.+22     	; 0x866 <__stack+0x367>
 850:	a1 fe       	sbrs	r10, 1
 852:	02 c0       	rjmp	.+4      	; 0x858 <__stack+0x359>
 854:	8b e2       	ldi	r24, 0x2B	; 43
 856:	01 c0       	rjmp	.+2      	; 0x85a <__stack+0x35b>
 858:	80 e2       	ldi	r24, 0x20	; 32
 85a:	a7 fc       	sbrc	r10, 7
 85c:	8d e2       	ldi	r24, 0x2D	; 45
 85e:	b6 01       	movw	r22, r12
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	0e 94 b5 05 	call	0xb6a	; 0xb6a <fputc>
 866:	89 14       	cp	r8, r9
 868:	38 f4       	brcc	.+14     	; 0x878 <__stack+0x379>
 86a:	b6 01       	movw	r22, r12
 86c:	80 e3       	ldi	r24, 0x30	; 48
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	0e 94 b5 05 	call	0xb6a	; 0xb6a <fputc>
 874:	9a 94       	dec	r9
 876:	f7 cf       	rjmp	.-18     	; 0x866 <__stack+0x367>
 878:	8a 94       	dec	r8
 87a:	f3 01       	movw	r30, r6
 87c:	e8 0d       	add	r30, r8
 87e:	f1 1d       	adc	r31, r1
 880:	80 81       	ld	r24, Z
 882:	b6 01       	movw	r22, r12
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	0e 94 b5 05 	call	0xb6a	; 0xb6a <fputc>
 88a:	81 10       	cpse	r8, r1
 88c:	f5 cf       	rjmp	.-22     	; 0x878 <__stack+0x379>
 88e:	22 20       	and	r2, r2
 890:	09 f4       	brne	.+2      	; 0x894 <__stack+0x395>
 892:	42 ce       	rjmp	.-892    	; 0x518 <__stack+0x19>
 894:	b6 01       	movw	r22, r12
 896:	80 e2       	ldi	r24, 0x20	; 32
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	0e 94 b5 05 	call	0xb6a	; 0xb6a <fputc>
 89e:	2a 94       	dec	r2
 8a0:	f6 cf       	rjmp	.-20     	; 0x88e <__stack+0x38f>
 8a2:	f6 01       	movw	r30, r12
 8a4:	86 81       	ldd	r24, Z+6	; 0x06
 8a6:	97 81       	ldd	r25, Z+7	; 0x07
 8a8:	02 c0       	rjmp	.+4      	; 0x8ae <__stack+0x3af>
 8aa:	8f ef       	ldi	r24, 0xFF	; 255
 8ac:	9f ef       	ldi	r25, 0xFF	; 255
 8ae:	2b 96       	adiw	r28, 0x0b	; 11
 8b0:	e2 e1       	ldi	r30, 0x12	; 18
 8b2:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__epilogue_restores__>

000008b6 <calloc>:
 8b6:	0f 93       	push	r16
 8b8:	1f 93       	push	r17
 8ba:	cf 93       	push	r28
 8bc:	df 93       	push	r29
 8be:	86 9f       	mul	r24, r22
 8c0:	80 01       	movw	r16, r0
 8c2:	87 9f       	mul	r24, r23
 8c4:	10 0d       	add	r17, r0
 8c6:	96 9f       	mul	r25, r22
 8c8:	10 0d       	add	r17, r0
 8ca:	11 24       	eor	r1, r1
 8cc:	c8 01       	movw	r24, r16
 8ce:	0e 94 77 04 	call	0x8ee	; 0x8ee <malloc>
 8d2:	ec 01       	movw	r28, r24
 8d4:	00 97       	sbiw	r24, 0x00	; 0
 8d6:	29 f0       	breq	.+10     	; 0x8e2 <calloc+0x2c>
 8d8:	a8 01       	movw	r20, r16
 8da:	60 e0       	ldi	r22, 0x00	; 0
 8dc:	70 e0       	ldi	r23, 0x00	; 0
 8de:	0e 94 a3 05 	call	0xb46	; 0xb46 <memset>
 8e2:	ce 01       	movw	r24, r28
 8e4:	df 91       	pop	r29
 8e6:	cf 91       	pop	r28
 8e8:	1f 91       	pop	r17
 8ea:	0f 91       	pop	r16
 8ec:	08 95       	ret

000008ee <malloc>:
 8ee:	0f 93       	push	r16
 8f0:	1f 93       	push	r17
 8f2:	cf 93       	push	r28
 8f4:	df 93       	push	r29
 8f6:	82 30       	cpi	r24, 0x02	; 2
 8f8:	91 05       	cpc	r25, r1
 8fa:	10 f4       	brcc	.+4      	; 0x900 <malloc+0x12>
 8fc:	82 e0       	ldi	r24, 0x02	; 2
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	e0 91 15 02 	lds	r30, 0x0215	; 0x800215 <__flp>
 904:	f0 91 16 02 	lds	r31, 0x0216	; 0x800216 <__flp+0x1>
 908:	20 e0       	ldi	r18, 0x00	; 0
 90a:	30 e0       	ldi	r19, 0x00	; 0
 90c:	a0 e0       	ldi	r26, 0x00	; 0
 90e:	b0 e0       	ldi	r27, 0x00	; 0
 910:	30 97       	sbiw	r30, 0x00	; 0
 912:	19 f1       	breq	.+70     	; 0x95a <malloc+0x6c>
 914:	40 81       	ld	r20, Z
 916:	51 81       	ldd	r21, Z+1	; 0x01
 918:	02 81       	ldd	r16, Z+2	; 0x02
 91a:	13 81       	ldd	r17, Z+3	; 0x03
 91c:	48 17       	cp	r20, r24
 91e:	59 07       	cpc	r21, r25
 920:	c8 f0       	brcs	.+50     	; 0x954 <malloc+0x66>
 922:	84 17       	cp	r24, r20
 924:	95 07       	cpc	r25, r21
 926:	69 f4       	brne	.+26     	; 0x942 <malloc+0x54>
 928:	10 97       	sbiw	r26, 0x00	; 0
 92a:	31 f0       	breq	.+12     	; 0x938 <malloc+0x4a>
 92c:	12 96       	adiw	r26, 0x02	; 2
 92e:	0c 93       	st	X, r16
 930:	12 97       	sbiw	r26, 0x02	; 2
 932:	13 96       	adiw	r26, 0x03	; 3
 934:	1c 93       	st	X, r17
 936:	27 c0       	rjmp	.+78     	; 0x986 <malloc+0x98>
 938:	00 93 15 02 	sts	0x0215, r16	; 0x800215 <__flp>
 93c:	10 93 16 02 	sts	0x0216, r17	; 0x800216 <__flp+0x1>
 940:	22 c0       	rjmp	.+68     	; 0x986 <malloc+0x98>
 942:	21 15       	cp	r18, r1
 944:	31 05       	cpc	r19, r1
 946:	19 f0       	breq	.+6      	; 0x94e <malloc+0x60>
 948:	42 17       	cp	r20, r18
 94a:	53 07       	cpc	r21, r19
 94c:	18 f4       	brcc	.+6      	; 0x954 <malloc+0x66>
 94e:	9a 01       	movw	r18, r20
 950:	bd 01       	movw	r22, r26
 952:	ef 01       	movw	r28, r30
 954:	df 01       	movw	r26, r30
 956:	f8 01       	movw	r30, r16
 958:	db cf       	rjmp	.-74     	; 0x910 <malloc+0x22>
 95a:	21 15       	cp	r18, r1
 95c:	31 05       	cpc	r19, r1
 95e:	f9 f0       	breq	.+62     	; 0x99e <malloc+0xb0>
 960:	28 1b       	sub	r18, r24
 962:	39 0b       	sbc	r19, r25
 964:	24 30       	cpi	r18, 0x04	; 4
 966:	31 05       	cpc	r19, r1
 968:	80 f4       	brcc	.+32     	; 0x98a <malloc+0x9c>
 96a:	8a 81       	ldd	r24, Y+2	; 0x02
 96c:	9b 81       	ldd	r25, Y+3	; 0x03
 96e:	61 15       	cp	r22, r1
 970:	71 05       	cpc	r23, r1
 972:	21 f0       	breq	.+8      	; 0x97c <malloc+0x8e>
 974:	fb 01       	movw	r30, r22
 976:	93 83       	std	Z+3, r25	; 0x03
 978:	82 83       	std	Z+2, r24	; 0x02
 97a:	04 c0       	rjmp	.+8      	; 0x984 <malloc+0x96>
 97c:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <__flp+0x1>
 980:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <__flp>
 984:	fe 01       	movw	r30, r28
 986:	32 96       	adiw	r30, 0x02	; 2
 988:	44 c0       	rjmp	.+136    	; 0xa12 <malloc+0x124>
 98a:	fe 01       	movw	r30, r28
 98c:	e2 0f       	add	r30, r18
 98e:	f3 1f       	adc	r31, r19
 990:	81 93       	st	Z+, r24
 992:	91 93       	st	Z+, r25
 994:	22 50       	subi	r18, 0x02	; 2
 996:	31 09       	sbc	r19, r1
 998:	39 83       	std	Y+1, r19	; 0x01
 99a:	28 83       	st	Y, r18
 99c:	3a c0       	rjmp	.+116    	; 0xa12 <malloc+0x124>
 99e:	20 91 13 02 	lds	r18, 0x0213	; 0x800213 <__brkval>
 9a2:	30 91 14 02 	lds	r19, 0x0214	; 0x800214 <__brkval+0x1>
 9a6:	23 2b       	or	r18, r19
 9a8:	41 f4       	brne	.+16     	; 0x9ba <malloc+0xcc>
 9aa:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 9ae:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 9b2:	30 93 14 02 	sts	0x0214, r19	; 0x800214 <__brkval+0x1>
 9b6:	20 93 13 02 	sts	0x0213, r18	; 0x800213 <__brkval>
 9ba:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 9be:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 9c2:	21 15       	cp	r18, r1
 9c4:	31 05       	cpc	r19, r1
 9c6:	41 f4       	brne	.+16     	; 0x9d8 <malloc+0xea>
 9c8:	2d b7       	in	r18, 0x3d	; 61
 9ca:	3e b7       	in	r19, 0x3e	; 62
 9cc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 9d0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 9d4:	24 1b       	sub	r18, r20
 9d6:	35 0b       	sbc	r19, r21
 9d8:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <__brkval>
 9dc:	f0 91 14 02 	lds	r31, 0x0214	; 0x800214 <__brkval+0x1>
 9e0:	e2 17       	cp	r30, r18
 9e2:	f3 07       	cpc	r31, r19
 9e4:	a0 f4       	brcc	.+40     	; 0xa0e <malloc+0x120>
 9e6:	2e 1b       	sub	r18, r30
 9e8:	3f 0b       	sbc	r19, r31
 9ea:	28 17       	cp	r18, r24
 9ec:	39 07       	cpc	r19, r25
 9ee:	78 f0       	brcs	.+30     	; 0xa0e <malloc+0x120>
 9f0:	ac 01       	movw	r20, r24
 9f2:	4e 5f       	subi	r20, 0xFE	; 254
 9f4:	5f 4f       	sbci	r21, 0xFF	; 255
 9f6:	24 17       	cp	r18, r20
 9f8:	35 07       	cpc	r19, r21
 9fa:	48 f0       	brcs	.+18     	; 0xa0e <malloc+0x120>
 9fc:	4e 0f       	add	r20, r30
 9fe:	5f 1f       	adc	r21, r31
 a00:	50 93 14 02 	sts	0x0214, r21	; 0x800214 <__brkval+0x1>
 a04:	40 93 13 02 	sts	0x0213, r20	; 0x800213 <__brkval>
 a08:	81 93       	st	Z+, r24
 a0a:	91 93       	st	Z+, r25
 a0c:	02 c0       	rjmp	.+4      	; 0xa12 <malloc+0x124>
 a0e:	e0 e0       	ldi	r30, 0x00	; 0
 a10:	f0 e0       	ldi	r31, 0x00	; 0
 a12:	cf 01       	movw	r24, r30
 a14:	df 91       	pop	r29
 a16:	cf 91       	pop	r28
 a18:	1f 91       	pop	r17
 a1a:	0f 91       	pop	r16
 a1c:	08 95       	ret

00000a1e <free>:
 a1e:	cf 93       	push	r28
 a20:	df 93       	push	r29
 a22:	00 97       	sbiw	r24, 0x00	; 0
 a24:	09 f4       	brne	.+2      	; 0xa28 <free+0xa>
 a26:	81 c0       	rjmp	.+258    	; 0xb2a <free+0x10c>
 a28:	fc 01       	movw	r30, r24
 a2a:	32 97       	sbiw	r30, 0x02	; 2
 a2c:	13 82       	std	Z+3, r1	; 0x03
 a2e:	12 82       	std	Z+2, r1	; 0x02
 a30:	a0 91 15 02 	lds	r26, 0x0215	; 0x800215 <__flp>
 a34:	b0 91 16 02 	lds	r27, 0x0216	; 0x800216 <__flp+0x1>
 a38:	10 97       	sbiw	r26, 0x00	; 0
 a3a:	81 f4       	brne	.+32     	; 0xa5c <free+0x3e>
 a3c:	20 81       	ld	r18, Z
 a3e:	31 81       	ldd	r19, Z+1	; 0x01
 a40:	82 0f       	add	r24, r18
 a42:	93 1f       	adc	r25, r19
 a44:	20 91 13 02 	lds	r18, 0x0213	; 0x800213 <__brkval>
 a48:	30 91 14 02 	lds	r19, 0x0214	; 0x800214 <__brkval+0x1>
 a4c:	28 17       	cp	r18, r24
 a4e:	39 07       	cpc	r19, r25
 a50:	51 f5       	brne	.+84     	; 0xaa6 <free+0x88>
 a52:	f0 93 14 02 	sts	0x0214, r31	; 0x800214 <__brkval+0x1>
 a56:	e0 93 13 02 	sts	0x0213, r30	; 0x800213 <__brkval>
 a5a:	67 c0       	rjmp	.+206    	; 0xb2a <free+0x10c>
 a5c:	ed 01       	movw	r28, r26
 a5e:	20 e0       	ldi	r18, 0x00	; 0
 a60:	30 e0       	ldi	r19, 0x00	; 0
 a62:	ce 17       	cp	r28, r30
 a64:	df 07       	cpc	r29, r31
 a66:	40 f4       	brcc	.+16     	; 0xa78 <free+0x5a>
 a68:	4a 81       	ldd	r20, Y+2	; 0x02
 a6a:	5b 81       	ldd	r21, Y+3	; 0x03
 a6c:	9e 01       	movw	r18, r28
 a6e:	41 15       	cp	r20, r1
 a70:	51 05       	cpc	r21, r1
 a72:	f1 f0       	breq	.+60     	; 0xab0 <free+0x92>
 a74:	ea 01       	movw	r28, r20
 a76:	f5 cf       	rjmp	.-22     	; 0xa62 <free+0x44>
 a78:	d3 83       	std	Z+3, r29	; 0x03
 a7a:	c2 83       	std	Z+2, r28	; 0x02
 a7c:	40 81       	ld	r20, Z
 a7e:	51 81       	ldd	r21, Z+1	; 0x01
 a80:	84 0f       	add	r24, r20
 a82:	95 1f       	adc	r25, r21
 a84:	c8 17       	cp	r28, r24
 a86:	d9 07       	cpc	r29, r25
 a88:	59 f4       	brne	.+22     	; 0xaa0 <free+0x82>
 a8a:	88 81       	ld	r24, Y
 a8c:	99 81       	ldd	r25, Y+1	; 0x01
 a8e:	84 0f       	add	r24, r20
 a90:	95 1f       	adc	r25, r21
 a92:	02 96       	adiw	r24, 0x02	; 2
 a94:	91 83       	std	Z+1, r25	; 0x01
 a96:	80 83       	st	Z, r24
 a98:	8a 81       	ldd	r24, Y+2	; 0x02
 a9a:	9b 81       	ldd	r25, Y+3	; 0x03
 a9c:	93 83       	std	Z+3, r25	; 0x03
 a9e:	82 83       	std	Z+2, r24	; 0x02
 aa0:	21 15       	cp	r18, r1
 aa2:	31 05       	cpc	r19, r1
 aa4:	29 f4       	brne	.+10     	; 0xab0 <free+0x92>
 aa6:	f0 93 16 02 	sts	0x0216, r31	; 0x800216 <__flp+0x1>
 aaa:	e0 93 15 02 	sts	0x0215, r30	; 0x800215 <__flp>
 aae:	3d c0       	rjmp	.+122    	; 0xb2a <free+0x10c>
 ab0:	e9 01       	movw	r28, r18
 ab2:	fb 83       	std	Y+3, r31	; 0x03
 ab4:	ea 83       	std	Y+2, r30	; 0x02
 ab6:	49 91       	ld	r20, Y+
 ab8:	59 91       	ld	r21, Y+
 aba:	c4 0f       	add	r28, r20
 abc:	d5 1f       	adc	r29, r21
 abe:	ec 17       	cp	r30, r28
 ac0:	fd 07       	cpc	r31, r29
 ac2:	61 f4       	brne	.+24     	; 0xadc <free+0xbe>
 ac4:	80 81       	ld	r24, Z
 ac6:	91 81       	ldd	r25, Z+1	; 0x01
 ac8:	84 0f       	add	r24, r20
 aca:	95 1f       	adc	r25, r21
 acc:	02 96       	adiw	r24, 0x02	; 2
 ace:	e9 01       	movw	r28, r18
 ad0:	99 83       	std	Y+1, r25	; 0x01
 ad2:	88 83       	st	Y, r24
 ad4:	82 81       	ldd	r24, Z+2	; 0x02
 ad6:	93 81       	ldd	r25, Z+3	; 0x03
 ad8:	9b 83       	std	Y+3, r25	; 0x03
 ada:	8a 83       	std	Y+2, r24	; 0x02
 adc:	e0 e0       	ldi	r30, 0x00	; 0
 ade:	f0 e0       	ldi	r31, 0x00	; 0
 ae0:	12 96       	adiw	r26, 0x02	; 2
 ae2:	8d 91       	ld	r24, X+
 ae4:	9c 91       	ld	r25, X
 ae6:	13 97       	sbiw	r26, 0x03	; 3
 ae8:	00 97       	sbiw	r24, 0x00	; 0
 aea:	19 f0       	breq	.+6      	; 0xaf2 <free+0xd4>
 aec:	fd 01       	movw	r30, r26
 aee:	dc 01       	movw	r26, r24
 af0:	f7 cf       	rjmp	.-18     	; 0xae0 <free+0xc2>
 af2:	8d 91       	ld	r24, X+
 af4:	9c 91       	ld	r25, X
 af6:	11 97       	sbiw	r26, 0x01	; 1
 af8:	9d 01       	movw	r18, r26
 afa:	2e 5f       	subi	r18, 0xFE	; 254
 afc:	3f 4f       	sbci	r19, 0xFF	; 255
 afe:	82 0f       	add	r24, r18
 b00:	93 1f       	adc	r25, r19
 b02:	20 91 13 02 	lds	r18, 0x0213	; 0x800213 <__brkval>
 b06:	30 91 14 02 	lds	r19, 0x0214	; 0x800214 <__brkval+0x1>
 b0a:	28 17       	cp	r18, r24
 b0c:	39 07       	cpc	r19, r25
 b0e:	69 f4       	brne	.+26     	; 0xb2a <free+0x10c>
 b10:	30 97       	sbiw	r30, 0x00	; 0
 b12:	29 f4       	brne	.+10     	; 0xb1e <free+0x100>
 b14:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <__flp+0x1>
 b18:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <__flp>
 b1c:	02 c0       	rjmp	.+4      	; 0xb22 <free+0x104>
 b1e:	13 82       	std	Z+3, r1	; 0x03
 b20:	12 82       	std	Z+2, r1	; 0x02
 b22:	b0 93 14 02 	sts	0x0214, r27	; 0x800214 <__brkval+0x1>
 b26:	a0 93 13 02 	sts	0x0213, r26	; 0x800213 <__brkval>
 b2a:	df 91       	pop	r29
 b2c:	cf 91       	pop	r28
 b2e:	08 95       	ret

00000b30 <strnlen_P>:
 b30:	fc 01       	movw	r30, r24
 b32:	05 90       	lpm	r0, Z+
 b34:	61 50       	subi	r22, 0x01	; 1
 b36:	70 40       	sbci	r23, 0x00	; 0
 b38:	01 10       	cpse	r0, r1
 b3a:	d8 f7       	brcc	.-10     	; 0xb32 <strnlen_P+0x2>
 b3c:	80 95       	com	r24
 b3e:	90 95       	com	r25
 b40:	8e 0f       	add	r24, r30
 b42:	9f 1f       	adc	r25, r31
 b44:	08 95       	ret

00000b46 <memset>:
 b46:	dc 01       	movw	r26, r24
 b48:	01 c0       	rjmp	.+2      	; 0xb4c <memset+0x6>
 b4a:	6d 93       	st	X+, r22
 b4c:	41 50       	subi	r20, 0x01	; 1
 b4e:	50 40       	sbci	r21, 0x00	; 0
 b50:	e0 f7       	brcc	.-8      	; 0xb4a <memset+0x4>
 b52:	08 95       	ret

00000b54 <strnlen>:
 b54:	fc 01       	movw	r30, r24
 b56:	61 50       	subi	r22, 0x01	; 1
 b58:	70 40       	sbci	r23, 0x00	; 0
 b5a:	01 90       	ld	r0, Z+
 b5c:	01 10       	cpse	r0, r1
 b5e:	d8 f7       	brcc	.-10     	; 0xb56 <strnlen+0x2>
 b60:	80 95       	com	r24
 b62:	90 95       	com	r25
 b64:	8e 0f       	add	r24, r30
 b66:	9f 1f       	adc	r25, r31
 b68:	08 95       	ret

00000b6a <fputc>:
 b6a:	0f 93       	push	r16
 b6c:	1f 93       	push	r17
 b6e:	cf 93       	push	r28
 b70:	df 93       	push	r29
 b72:	fb 01       	movw	r30, r22
 b74:	23 81       	ldd	r18, Z+3	; 0x03
 b76:	21 fd       	sbrc	r18, 1
 b78:	03 c0       	rjmp	.+6      	; 0xb80 <fputc+0x16>
 b7a:	8f ef       	ldi	r24, 0xFF	; 255
 b7c:	9f ef       	ldi	r25, 0xFF	; 255
 b7e:	2c c0       	rjmp	.+88     	; 0xbd8 <fputc+0x6e>
 b80:	22 ff       	sbrs	r18, 2
 b82:	16 c0       	rjmp	.+44     	; 0xbb0 <fputc+0x46>
 b84:	46 81       	ldd	r20, Z+6	; 0x06
 b86:	57 81       	ldd	r21, Z+7	; 0x07
 b88:	24 81       	ldd	r18, Z+4	; 0x04
 b8a:	35 81       	ldd	r19, Z+5	; 0x05
 b8c:	42 17       	cp	r20, r18
 b8e:	53 07       	cpc	r21, r19
 b90:	44 f4       	brge	.+16     	; 0xba2 <fputc+0x38>
 b92:	a0 81       	ld	r26, Z
 b94:	b1 81       	ldd	r27, Z+1	; 0x01
 b96:	9d 01       	movw	r18, r26
 b98:	2f 5f       	subi	r18, 0xFF	; 255
 b9a:	3f 4f       	sbci	r19, 0xFF	; 255
 b9c:	31 83       	std	Z+1, r19	; 0x01
 b9e:	20 83       	st	Z, r18
 ba0:	8c 93       	st	X, r24
 ba2:	26 81       	ldd	r18, Z+6	; 0x06
 ba4:	37 81       	ldd	r19, Z+7	; 0x07
 ba6:	2f 5f       	subi	r18, 0xFF	; 255
 ba8:	3f 4f       	sbci	r19, 0xFF	; 255
 baa:	37 83       	std	Z+7, r19	; 0x07
 bac:	26 83       	std	Z+6, r18	; 0x06
 bae:	14 c0       	rjmp	.+40     	; 0xbd8 <fputc+0x6e>
 bb0:	8b 01       	movw	r16, r22
 bb2:	ec 01       	movw	r28, r24
 bb4:	fb 01       	movw	r30, r22
 bb6:	00 84       	ldd	r0, Z+8	; 0x08
 bb8:	f1 85       	ldd	r31, Z+9	; 0x09
 bba:	e0 2d       	mov	r30, r0
 bbc:	09 95       	icall
 bbe:	89 2b       	or	r24, r25
 bc0:	e1 f6       	brne	.-72     	; 0xb7a <fputc+0x10>
 bc2:	d8 01       	movw	r26, r16
 bc4:	16 96       	adiw	r26, 0x06	; 6
 bc6:	8d 91       	ld	r24, X+
 bc8:	9c 91       	ld	r25, X
 bca:	17 97       	sbiw	r26, 0x07	; 7
 bcc:	01 96       	adiw	r24, 0x01	; 1
 bce:	17 96       	adiw	r26, 0x07	; 7
 bd0:	9c 93       	st	X, r25
 bd2:	8e 93       	st	-X, r24
 bd4:	16 97       	sbiw	r26, 0x06	; 6
 bd6:	ce 01       	movw	r24, r28
 bd8:	df 91       	pop	r29
 bda:	cf 91       	pop	r28
 bdc:	1f 91       	pop	r17
 bde:	0f 91       	pop	r16
 be0:	08 95       	ret

00000be2 <__ultoa_invert>:
 be2:	fa 01       	movw	r30, r20
 be4:	aa 27       	eor	r26, r26
 be6:	28 30       	cpi	r18, 0x08	; 8
 be8:	51 f1       	breq	.+84     	; 0xc3e <__ultoa_invert+0x5c>
 bea:	20 31       	cpi	r18, 0x10	; 16
 bec:	81 f1       	breq	.+96     	; 0xc4e <__ultoa_invert+0x6c>
 bee:	e8 94       	clt
 bf0:	6f 93       	push	r22
 bf2:	6e 7f       	andi	r22, 0xFE	; 254
 bf4:	6e 5f       	subi	r22, 0xFE	; 254
 bf6:	7f 4f       	sbci	r23, 0xFF	; 255
 bf8:	8f 4f       	sbci	r24, 0xFF	; 255
 bfa:	9f 4f       	sbci	r25, 0xFF	; 255
 bfc:	af 4f       	sbci	r26, 0xFF	; 255
 bfe:	b1 e0       	ldi	r27, 0x01	; 1
 c00:	3e d0       	rcall	.+124    	; 0xc7e <__ultoa_invert+0x9c>
 c02:	b4 e0       	ldi	r27, 0x04	; 4
 c04:	3c d0       	rcall	.+120    	; 0xc7e <__ultoa_invert+0x9c>
 c06:	67 0f       	add	r22, r23
 c08:	78 1f       	adc	r23, r24
 c0a:	89 1f       	adc	r24, r25
 c0c:	9a 1f       	adc	r25, r26
 c0e:	a1 1d       	adc	r26, r1
 c10:	68 0f       	add	r22, r24
 c12:	79 1f       	adc	r23, r25
 c14:	8a 1f       	adc	r24, r26
 c16:	91 1d       	adc	r25, r1
 c18:	a1 1d       	adc	r26, r1
 c1a:	6a 0f       	add	r22, r26
 c1c:	71 1d       	adc	r23, r1
 c1e:	81 1d       	adc	r24, r1
 c20:	91 1d       	adc	r25, r1
 c22:	a1 1d       	adc	r26, r1
 c24:	20 d0       	rcall	.+64     	; 0xc66 <__ultoa_invert+0x84>
 c26:	09 f4       	brne	.+2      	; 0xc2a <__ultoa_invert+0x48>
 c28:	68 94       	set
 c2a:	3f 91       	pop	r19
 c2c:	2a e0       	ldi	r18, 0x0A	; 10
 c2e:	26 9f       	mul	r18, r22
 c30:	11 24       	eor	r1, r1
 c32:	30 19       	sub	r19, r0
 c34:	30 5d       	subi	r19, 0xD0	; 208
 c36:	31 93       	st	Z+, r19
 c38:	de f6       	brtc	.-74     	; 0xbf0 <__ultoa_invert+0xe>
 c3a:	cf 01       	movw	r24, r30
 c3c:	08 95       	ret
 c3e:	46 2f       	mov	r20, r22
 c40:	47 70       	andi	r20, 0x07	; 7
 c42:	40 5d       	subi	r20, 0xD0	; 208
 c44:	41 93       	st	Z+, r20
 c46:	b3 e0       	ldi	r27, 0x03	; 3
 c48:	0f d0       	rcall	.+30     	; 0xc68 <__ultoa_invert+0x86>
 c4a:	c9 f7       	brne	.-14     	; 0xc3e <__ultoa_invert+0x5c>
 c4c:	f6 cf       	rjmp	.-20     	; 0xc3a <__ultoa_invert+0x58>
 c4e:	46 2f       	mov	r20, r22
 c50:	4f 70       	andi	r20, 0x0F	; 15
 c52:	40 5d       	subi	r20, 0xD0	; 208
 c54:	4a 33       	cpi	r20, 0x3A	; 58
 c56:	18 f0       	brcs	.+6      	; 0xc5e <__ultoa_invert+0x7c>
 c58:	49 5d       	subi	r20, 0xD9	; 217
 c5a:	31 fd       	sbrc	r19, 1
 c5c:	40 52       	subi	r20, 0x20	; 32
 c5e:	41 93       	st	Z+, r20
 c60:	02 d0       	rcall	.+4      	; 0xc66 <__ultoa_invert+0x84>
 c62:	a9 f7       	brne	.-22     	; 0xc4e <__ultoa_invert+0x6c>
 c64:	ea cf       	rjmp	.-44     	; 0xc3a <__ultoa_invert+0x58>
 c66:	b4 e0       	ldi	r27, 0x04	; 4
 c68:	a6 95       	lsr	r26
 c6a:	97 95       	ror	r25
 c6c:	87 95       	ror	r24
 c6e:	77 95       	ror	r23
 c70:	67 95       	ror	r22
 c72:	ba 95       	dec	r27
 c74:	c9 f7       	brne	.-14     	; 0xc68 <__ultoa_invert+0x86>
 c76:	00 97       	sbiw	r24, 0x00	; 0
 c78:	61 05       	cpc	r22, r1
 c7a:	71 05       	cpc	r23, r1
 c7c:	08 95       	ret
 c7e:	9b 01       	movw	r18, r22
 c80:	ac 01       	movw	r20, r24
 c82:	0a 2e       	mov	r0, r26
 c84:	06 94       	lsr	r0
 c86:	57 95       	ror	r21
 c88:	47 95       	ror	r20
 c8a:	37 95       	ror	r19
 c8c:	27 95       	ror	r18
 c8e:	ba 95       	dec	r27
 c90:	c9 f7       	brne	.-14     	; 0xc84 <__ultoa_invert+0xa2>
 c92:	62 0f       	add	r22, r18
 c94:	73 1f       	adc	r23, r19
 c96:	84 1f       	adc	r24, r20
 c98:	95 1f       	adc	r25, r21
 c9a:	a0 1d       	adc	r26, r0
 c9c:	08 95       	ret

00000c9e <__prologue_saves__>:
 c9e:	2f 92       	push	r2
 ca0:	3f 92       	push	r3
 ca2:	4f 92       	push	r4
 ca4:	5f 92       	push	r5
 ca6:	6f 92       	push	r6
 ca8:	7f 92       	push	r7
 caa:	8f 92       	push	r8
 cac:	9f 92       	push	r9
 cae:	af 92       	push	r10
 cb0:	bf 92       	push	r11
 cb2:	cf 92       	push	r12
 cb4:	df 92       	push	r13
 cb6:	ef 92       	push	r14
 cb8:	ff 92       	push	r15
 cba:	0f 93       	push	r16
 cbc:	1f 93       	push	r17
 cbe:	cf 93       	push	r28
 cc0:	df 93       	push	r29
 cc2:	cd b7       	in	r28, 0x3d	; 61
 cc4:	de b7       	in	r29, 0x3e	; 62
 cc6:	ca 1b       	sub	r28, r26
 cc8:	db 0b       	sbc	r29, r27
 cca:	0f b6       	in	r0, 0x3f	; 63
 ccc:	f8 94       	cli
 cce:	de bf       	out	0x3e, r29	; 62
 cd0:	0f be       	out	0x3f, r0	; 63
 cd2:	cd bf       	out	0x3d, r28	; 61
 cd4:	09 94       	ijmp

00000cd6 <__epilogue_restores__>:
 cd6:	2a 88       	ldd	r2, Y+18	; 0x12
 cd8:	39 88       	ldd	r3, Y+17	; 0x11
 cda:	48 88       	ldd	r4, Y+16	; 0x10
 cdc:	5f 84       	ldd	r5, Y+15	; 0x0f
 cde:	6e 84       	ldd	r6, Y+14	; 0x0e
 ce0:	7d 84       	ldd	r7, Y+13	; 0x0d
 ce2:	8c 84       	ldd	r8, Y+12	; 0x0c
 ce4:	9b 84       	ldd	r9, Y+11	; 0x0b
 ce6:	aa 84       	ldd	r10, Y+10	; 0x0a
 ce8:	b9 84       	ldd	r11, Y+9	; 0x09
 cea:	c8 84       	ldd	r12, Y+8	; 0x08
 cec:	df 80       	ldd	r13, Y+7	; 0x07
 cee:	ee 80       	ldd	r14, Y+6	; 0x06
 cf0:	fd 80       	ldd	r15, Y+5	; 0x05
 cf2:	0c 81       	ldd	r16, Y+4	; 0x04
 cf4:	1b 81       	ldd	r17, Y+3	; 0x03
 cf6:	aa 81       	ldd	r26, Y+2	; 0x02
 cf8:	b9 81       	ldd	r27, Y+1	; 0x01
 cfa:	ce 0f       	add	r28, r30
 cfc:	d1 1d       	adc	r29, r1
 cfe:	0f b6       	in	r0, 0x3f	; 63
 d00:	f8 94       	cli
 d02:	de bf       	out	0x3e, r29	; 62
 d04:	0f be       	out	0x3f, r0	; 63
 d06:	cd bf       	out	0x3d, r28	; 61
 d08:	ed 01       	movw	r28, r26
 d0a:	08 95       	ret

00000d0c <_exit>:
 d0c:	f8 94       	cli

00000d0e <__stop_program>:
 d0e:	ff cf       	rjmp	.-2      	; 0xd0e <__stop_program>
