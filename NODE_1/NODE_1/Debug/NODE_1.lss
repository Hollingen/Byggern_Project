
NODE_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016e  00800100  0000137c  00001410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000137c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080026e  0080026e  0000157e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000157e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000015dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00001618  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022ed  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fad  00000000  00000000  00003b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012c2  00000000  00000000  00004aea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005fc  00000000  00000000  00005dac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000840  00000000  00000000  000063a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010e4  00000000  00000000  00006be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  00007ccc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__vector_1>
       8:	0c 94 05 03 	jmp	0x60a	; 0x60a <__vector_2>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	12 e0       	ldi	r17, 0x02	; 2
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ec e7       	ldi	r30, 0x7C	; 124
      84:	f3 e1       	ldi	r31, 0x13	; 19
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	ae 36       	cpi	r26, 0x6E	; 110
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	22 e0       	ldi	r18, 0x02	; 2
      94:	ae e6       	ldi	r26, 0x6E	; 110
      96:	b2 e0       	ldi	r27, 0x02	; 2
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	ab 37       	cpi	r26, 0x7B	; 123
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 29 03 	call	0x652	; 0x652 <main>
      a6:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_Init>:
void Int_INIT(void){
	
    GICR |= (1<<INT0);
	
	MCUCR |= (1<<ISC00);
	MCUCR |= (1<<ISC01);
      ae:	82 e8       	ldi	r24, 0x82	; 130
      b0:	8f bd       	out	0x2f, r24	; 47
      b2:	89 e1       	ldi	r24, 0x19	; 25
      b4:	8e bd       	out	0x2e, r24	; 46
      b6:	85 e0       	ldi	r24, 0x05	; 5
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	95 bd       	out	0x25, r25	; 37
      bc:	84 bd       	out	0x24, r24	; 36
      be:	82 e0       	ldi	r24, 0x02	; 2
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	9b bd       	out	0x2b, r25	; 43
      c4:	8a bd       	out	0x2a, r24	; 42
      c6:	87 b3       	in	r24, 0x17	; 23
      c8:	8b 7f       	andi	r24, 0xFB	; 251
      ca:	87 bb       	out	0x17, r24	; 23
      cc:	88 b3       	in	r24, 0x18	; 24
      ce:	84 60       	ori	r24, 0x04	; 4
      d0:	88 bb       	out	0x18, r24	; 24
      d2:	81 b3       	in	r24, 0x11	; 17
      d4:	80 62       	ori	r24, 0x20	; 32
      d6:	81 bb       	out	0x11, r24	; 17
      d8:	08 95       	ret

000000da <ADC_read>:
      da:	0f 93       	push	r16
      dc:	1f 93       	push	r17
      de:	cf 93       	push	r28
      e0:	df 93       	push	r29
      e2:	d8 2f       	mov	r29, r24
      e4:	10 92 01 14 	sts	0x1401, r1	; 0x801401 <__bss_end+0x1186>
      e8:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <__bss_end+0x1185>
      ec:	8b b7       	in	r24, 0x3b	; 59
      ee:	80 64       	ori	r24, 0x40	; 64
      f0:	8b bf       	out	0x3b, r24	; 59
      f2:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <__data_end>
      f6:	88 23       	and	r24, r24
      f8:	e1 f3       	breq	.-8      	; 0xf2 <ADC_read+0x18>
      fa:	8b b7       	in	r24, 0x3b	; 59
      fc:	8f 7b       	andi	r24, 0xBF	; 191
      fe:	8b bf       	out	0x3b, r24	; 59
     100:	80 e0       	ldi	r24, 0x00	; 0
     102:	94 e0       	ldi	r25, 0x04	; 4
     104:	0e 94 0e 05 	call	0xa1c	; 0xa1c <XMEM_read>
     108:	18 2f       	mov	r17, r24
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	94 e0       	ldi	r25, 0x04	; 4
     10e:	0e 94 0e 05 	call	0xa1c	; 0xa1c <XMEM_read>
     112:	c8 2f       	mov	r28, r24
     114:	80 e0       	ldi	r24, 0x00	; 0
     116:	94 e0       	ldi	r25, 0x04	; 4
     118:	0e 94 0e 05 	call	0xa1c	; 0xa1c <XMEM_read>
     11c:	08 2f       	mov	r16, r24
     11e:	80 e0       	ldi	r24, 0x00	; 0
     120:	94 e0       	ldi	r25, 0x04	; 4
     122:	0e 94 0e 05 	call	0xa1c	; 0xa1c <XMEM_read>
     126:	d1 30       	cpi	r29, 0x01	; 1
     128:	59 f0       	breq	.+22     	; 0x140 <ADC_read+0x66>
     12a:	40 f0       	brcs	.+16     	; 0x13c <ADC_read+0x62>
     12c:	d2 30       	cpi	r29, 0x02	; 2
     12e:	19 f0       	breq	.+6      	; 0x136 <ADC_read+0x5c>
     130:	d3 30       	cpi	r29, 0x03	; 3
     132:	39 f0       	breq	.+14     	; 0x142 <ADC_read+0x68>
     134:	02 c0       	rjmp	.+4      	; 0x13a <ADC_read+0x60>
     136:	80 2f       	mov	r24, r16
     138:	04 c0       	rjmp	.+8      	; 0x142 <ADC_read+0x68>
     13a:	03 c0       	rjmp	.+6      	; 0x142 <ADC_read+0x68>
     13c:	81 2f       	mov	r24, r17
     13e:	01 c0       	rjmp	.+2      	; 0x142 <ADC_read+0x68>
     140:	8c 2f       	mov	r24, r28
     142:	df 91       	pop	r29
     144:	cf 91       	pop	r28
     146:	1f 91       	pop	r17
     148:	0f 91       	pop	r16
     14a:	08 95       	ret

0000014c <ADC_calibrate>:
     14c:	cf 93       	push	r28
     14e:	df 93       	push	r29
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	0e 94 6d 00 	call	0xda	; 0xda <ADC_read>
     156:	cf e6       	ldi	r28, 0x6F	; 111
     158:	d2 e0       	ldi	r29, 0x02	; 2
     15a:	88 83       	st	Y, r24
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	0e 94 6d 00 	call	0xda	; 0xda <ADC_read>
     162:	89 83       	std	Y+1, r24	; 0x01
     164:	98 81       	ld	r25, Y
     166:	1f 92       	push	r1
     168:	8f 93       	push	r24
     16a:	1f 92       	push	r1
     16c:	9f 93       	push	r25
     16e:	86 e0       	ldi	r24, 0x06	; 6
     170:	91 e0       	ldi	r25, 0x01	; 1
     172:	9f 93       	push	r25
     174:	8f 93       	push	r24
     176:	0e 94 9a 05 	call	0xb34	; 0xb34 <printf>
     17a:	0f 90       	pop	r0
     17c:	0f 90       	pop	r0
     17e:	0f 90       	pop	r0
     180:	0f 90       	pop	r0
     182:	0f 90       	pop	r0
     184:	0f 90       	pop	r0
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	08 95       	ret

0000018c <adc_get_pos>:
	
	
}

adc_pos adc_get_pos(){
     18c:	1f 93       	push	r17
     18e:	cf 93       	push	r28
     190:	df 93       	push	r29
	
	adc_pos pos;
	uint8_t adc_raw[2];

	adc_raw[0] = ADC_read(CHANNEL_X);
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	0e 94 6d 00 	call	0xda	; 0xda <ADC_read>
     198:	c8 2f       	mov	r28, r24
	adc_raw[1] = ADC_read(CHANNEL_Y);
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	0e 94 6d 00 	call	0xda	; 0xda <ADC_read>
     1a0:	e8 2f       	mov	r30, r24

	if (adc_raw[0] > offset.x){
     1a2:	40 91 6f 02 	lds	r20, 0x026F	; 0x80026f <offset>
     1a6:	4c 17       	cp	r20, r28
     1a8:	98 f4       	brcc	.+38     	; 0x1d0 <adc_get_pos+0x44>
		pos.x = (adc_raw[0] - offset.x)*100/(ADC_MAX_VALUE - offset.x);
     1aa:	50 e0       	ldi	r21, 0x00	; 0
     1ac:	2c 2f       	mov	r18, r28
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	24 1b       	sub	r18, r20
     1b2:	35 0b       	sbc	r19, r21
     1b4:	64 e6       	ldi	r22, 0x64	; 100
     1b6:	62 9f       	mul	r22, r18
     1b8:	c0 01       	movw	r24, r0
     1ba:	63 9f       	mul	r22, r19
     1bc:	90 0d       	add	r25, r0
     1be:	11 24       	eor	r1, r1
     1c0:	6f ef       	ldi	r22, 0xFF	; 255
     1c2:	70 e0       	ldi	r23, 0x00	; 0
     1c4:	64 1b       	sub	r22, r20
     1c6:	75 0b       	sbc	r23, r21
     1c8:	0e 94 27 05 	call	0xa4e	; 0xa4e <__divmodhi4>
     1cc:	16 2f       	mov	r17, r22
     1ce:	11 c0       	rjmp	.+34     	; 0x1f2 <adc_get_pos+0x66>
	}else if(adc_raw[0] < offset.x){
     1d0:	c4 17       	cp	r28, r20
     1d2:	78 f4       	brcc	.+30     	; 0x1f2 <adc_get_pos+0x66>
		pos.x = -(offset.x - adc_raw[0])*100/offset.x;
     1d4:	64 2f       	mov	r22, r20
     1d6:	70 e0       	ldi	r23, 0x00	; 0
     1d8:	2c 2f       	mov	r18, r28
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	26 1b       	sub	r18, r22
     1de:	37 0b       	sbc	r19, r23
     1e0:	44 e6       	ldi	r20, 0x64	; 100
     1e2:	42 9f       	mul	r20, r18
     1e4:	c0 01       	movw	r24, r0
     1e6:	43 9f       	mul	r20, r19
     1e8:	90 0d       	add	r25, r0
     1ea:	11 24       	eor	r1, r1
     1ec:	0e 94 27 05 	call	0xa4e	; 0xa4e <__divmodhi4>
     1f0:	16 2f       	mov	r17, r22
	}

	if (adc_raw[1] > offset.y){
     1f2:	20 91 70 02 	lds	r18, 0x0270	; 0x800270 <offset+0x1>
     1f6:	2e 17       	cp	r18, r30
     1f8:	90 f4       	brcc	.+36     	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
		pos.y = (adc_raw[1] - offset.y)*100/(ADC_MAX_VALUE - offset.y);
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	e2 1b       	sub	r30, r18
     200:	f3 0b       	sbc	r31, r19
     202:	44 e6       	ldi	r20, 0x64	; 100
     204:	4e 9f       	mul	r20, r30
     206:	c0 01       	movw	r24, r0
     208:	4f 9f       	mul	r20, r31
     20a:	90 0d       	add	r25, r0
     20c:	11 24       	eor	r1, r1
     20e:	6f ef       	ldi	r22, 0xFF	; 255
     210:	70 e0       	ldi	r23, 0x00	; 0
     212:	62 1b       	sub	r22, r18
     214:	73 0b       	sbc	r23, r19
     216:	0e 94 27 05 	call	0xa4e	; 0xa4e <__divmodhi4>
     21a:	d6 2f       	mov	r29, r22
     21c:	11 c0       	rjmp	.+34     	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
	}else if(adc_raw[1] < offset.y){
     21e:	e2 17       	cp	r30, r18
     220:	78 f4       	brcc	.+30     	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
		pos.y = -(offset.y - adc_raw[1])*100/offset.y;
     222:	62 2f       	mov	r22, r18
     224:	70 e0       	ldi	r23, 0x00	; 0
     226:	2e 2f       	mov	r18, r30
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	26 1b       	sub	r18, r22
     22c:	37 0b       	sbc	r19, r23
     22e:	44 e6       	ldi	r20, 0x64	; 100
     230:	42 9f       	mul	r20, r18
     232:	c0 01       	movw	r24, r0
     234:	43 9f       	mul	r20, r19
     236:	90 0d       	add	r25, r0
     238:	11 24       	eor	r1, r1
     23a:	0e 94 27 05 	call	0xa4e	; 0xa4e <__divmodhi4>
     23e:	d6 2f       	mov	r29, r22
	}

	return pos;

}
     240:	81 2f       	mov	r24, r17
     242:	9d 2f       	mov	r25, r29
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	1f 91       	pop	r17
     24a:	08 95       	ret

0000024c <adc_get_dir>:

adc_dir adc_get_dir(adc_pos pos){

	if(abs(pos.y) >= ADC_THRESHHOLD){
     24c:	29 2f       	mov	r18, r25
     24e:	09 2e       	mov	r0, r25
     250:	00 0c       	add	r0, r0
     252:	33 0b       	sbc	r19, r19
     254:	33 23       	and	r19, r19
     256:	1c f4       	brge	.+6      	; 0x25e <adc_get_dir+0x12>
     258:	31 95       	neg	r19
     25a:	21 95       	neg	r18
     25c:	31 09       	sbc	r19, r1
     25e:	2a 30       	cpi	r18, 0x0A	; 10
     260:	31 05       	cpc	r19, r1
     262:	2c f0       	brlt	.+10     	; 0x26e <adc_get_dir+0x22>
		if(pos.y >= ADC_THRESHHOLD){
     264:	9a 30       	cpi	r25, 0x0A	; 10
     266:	9c f4       	brge	.+38     	; 0x28e <adc_get_dir+0x42>
			return UP;
		}else if(pos.y <= (-ADC_THRESHHOLD)){
     268:	97 3f       	cpi	r25, 0xF7	; 247
     26a:	9c f0       	brlt	.+38     	; 0x292 <adc_get_dir+0x46>
     26c:	0f c0       	rjmp	.+30     	; 0x28c <adc_get_dir+0x40>
			return DOWN;
		}
	}else if(abs(pos.x) >= ADC_THRESHHOLD){
     26e:	28 2f       	mov	r18, r24
     270:	08 2e       	mov	r0, r24
     272:	00 0c       	add	r0, r0
     274:	99 0b       	sbc	r25, r25
     276:	99 23       	and	r25, r25
     278:	1c f4       	brge	.+6      	; 0x280 <adc_get_dir+0x34>
     27a:	91 95       	neg	r25
     27c:	81 95       	neg	r24
     27e:	91 09       	sbc	r25, r1
     280:	0a 97       	sbiw	r24, 0x0a	; 10
     282:	4c f0       	brlt	.+18     	; 0x296 <adc_get_dir+0x4a>
		if(pos.x >= ADC_THRESHHOLD){
     284:	2a 30       	cpi	r18, 0x0A	; 10
     286:	4c f4       	brge	.+18     	; 0x29a <adc_get_dir+0x4e>
			return RIGHT;
		}else if(pos.x <= (-ADC_THRESHHOLD)){
     288:	27 3f       	cpi	r18, 0xF7	; 247
     28a:	4c f0       	brlt	.+18     	; 0x29e <adc_get_dir+0x52>
			return LEFT;
		}
	}else{
		return NEUTRAL;
	}
}
     28c:	08 95       	ret

adc_dir adc_get_dir(adc_pos pos){

	if(abs(pos.y) >= ADC_THRESHHOLD){
		if(pos.y >= ADC_THRESHHOLD){
			return UP;
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	08 95       	ret
		}else if(pos.y <= (-ADC_THRESHHOLD)){
			return DOWN;
     292:	82 e0       	ldi	r24, 0x02	; 2
     294:	08 95       	ret
			return RIGHT;
		}else if(pos.x <= (-ADC_THRESHHOLD)){
			return LEFT;
		}
	}else{
		return NEUTRAL;
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	08 95       	ret
		}else if(pos.y <= (-ADC_THRESHHOLD)){
			return DOWN;
		}
	}else if(abs(pos.x) >= ADC_THRESHHOLD){
		if(pos.x >= ADC_THRESHHOLD){
			return RIGHT;
     29a:	84 e0       	ldi	r24, 0x04	; 4
     29c:	08 95       	ret
		}else if(pos.x <= (-ADC_THRESHHOLD)){
			return LEFT;
     29e:	83 e0       	ldi	r24, 0x03	; 3
		}
	}else{
		return NEUTRAL;
	}
}
     2a0:	08 95       	ret

000002a2 <__vector_1>:

ISR(INT0_vect){
     2a2:	1f 92       	push	r1
     2a4:	0f 92       	push	r0
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	0f 92       	push	r0
     2aa:	11 24       	eor	r1, r1
     2ac:	8f 93       	push	r24
    BUSY_flag = 1;
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <__data_end>
}
     2b4:	8f 91       	pop	r24
     2b6:	0f 90       	pop	r0
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	0f 90       	pop	r0
     2bc:	1f 90       	pop	r1
     2be:	18 95       	reti

000002c0 <can_handle_msg>:
#include "CANdrv.h"
#include "../MCP2515/MCP2515drv.h"


can_msg can_handle_msg(uint16_t id, uint8_t size, signed char msg_data[8]){
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	dc 01       	movw	r26, r24
     2c6:	e9 01       	movw	r28, r18
    can_msg msg;
    msg.id = id;
     2c8:	11 96       	adiw	r26, 0x01	; 1
     2ca:	7c 93       	st	X, r23
     2cc:	6e 93       	st	-X, r22
    msg.data_len = size;
     2ce:	12 96       	adiw	r26, 0x02	; 2
     2d0:	4c 93       	st	X, r20
     2d2:	12 97       	sbiw	r26, 0x02	; 2
	//printf("her\n\r");
	for(uint8_t i = 0; i < size; i++){
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0b c0       	rjmp	.+22     	; 0x2ee <can_handle_msg+0x2e>
		msg.data[i] = msg_data[i];
     2d8:	69 2f       	mov	r22, r25
     2da:	70 e0       	ldi	r23, 0x00	; 0
     2dc:	fe 01       	movw	r30, r28
     2de:	e6 0f       	add	r30, r22
     2e0:	f7 1f       	adc	r31, r23
     2e2:	30 81       	ld	r19, Z
     2e4:	fd 01       	movw	r30, r26
     2e6:	e6 0f       	add	r30, r22
     2e8:	f7 1f       	adc	r31, r23
     2ea:	33 83       	std	Z+3, r19	; 0x03
can_msg can_handle_msg(uint16_t id, uint8_t size, signed char msg_data[8]){
    can_msg msg;
    msg.id = id;
    msg.data_len = size;
	//printf("her\n\r");
	for(uint8_t i = 0; i < size; i++){
     2ec:	9f 5f       	subi	r25, 0xFF	; 255
     2ee:	94 17       	cp	r25, r20
     2f0:	98 f3       	brcs	.-26     	; 0x2d8 <can_handle_msg+0x18>
		
	}
	//printf("kis %d og %d\n\r", msg.data[0], msg.data[1]);
    return msg;
	
}
     2f2:	cd 01       	movw	r24, r26
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	08 95       	ret

000002fa <can_send_msg>:

void can_send_msg(can_msg* msg, BUFFER buffer){
     2fa:	bf 92       	push	r11
     2fc:	cf 92       	push	r12
     2fe:	df 92       	push	r13
     300:	ef 92       	push	r14
     302:	ff 92       	push	r15
     304:	0f 93       	push	r16
     306:	1f 93       	push	r17
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	1f 92       	push	r1
     30e:	cd b7       	in	r28, 0x3d	; 61
     310:	de b7       	in	r29, 0x3e	; 62
     312:	6c 01       	movw	r12, r24
     314:	b6 2e       	mov	r11, r22

    uint8_t idLSB = (msg->id & 0x7) << 5;
     316:	fc 01       	movw	r30, r24
     318:	60 81       	ld	r22, Z
     31a:	71 81       	ldd	r23, Z+1	; 0x01
     31c:	16 2f       	mov	r17, r22
     31e:	12 95       	swap	r17
     320:	11 0f       	add	r17, r17
     322:	10 7e       	andi	r17, 0xE0	; 224
    uint8_t idMSB = (msg->id & 0x1F) >> 3;
     324:	6f 71       	andi	r22, 0x1F	; 31
     326:	77 27       	eor	r23, r23
     328:	76 95       	lsr	r23
     32a:	67 95       	ror	r22
     32c:	76 95       	lsr	r23
     32e:	67 95       	ror	r22
     330:	76 95       	lsr	r23
     332:	67 95       	ror	r22
    //uint8_t buffer0stat;

    mcp2515_write(MCP_TXB0SIDH + 16*buffer, idMSB);
     334:	0b 2d       	mov	r16, r11
     336:	02 95       	swap	r16
     338:	00 7f       	andi	r16, 0xF0	; 240
     33a:	81 e3       	ldi	r24, 0x31	; 49
     33c:	80 0f       	add	r24, r16
     33e:	0e 94 b4 03 	call	0x768	; 0x768 <mcp2515_write>
    mcp2515_write(MCP_TXB0SIDL + 16*buffer, idLSB);
     342:	61 2f       	mov	r22, r17
     344:	82 e3       	ldi	r24, 0x32	; 50
     346:	80 0f       	add	r24, r16
     348:	0e 94 b4 03 	call	0x768	; 0x768 <mcp2515_write>
    mcp2515_write(MCP_TXB0DLC + 16*buffer, msg->data_len);
     34c:	f6 01       	movw	r30, r12
     34e:	62 81       	ldd	r22, Z+2	; 0x02
     350:	85 e3       	ldi	r24, 0x35	; 53
     352:	80 0f       	add	r24, r16
     354:	0e 94 b4 03 	call	0x768	; 0x768 <mcp2515_write>
	//printf("length: %d\n\r", msg->data_len);

    // Checking if the MCP is already requesting transmission in buffer 0
	uint8_t value;
	mcp2515_read(MCP_TXB0CTRL, &value);
     358:	be 01       	movw	r22, r28
     35a:	6f 5f       	subi	r22, 0xFF	; 255
     35c:	7f 4f       	sbci	r23, 0xFF	; 255
     35e:	80 e3       	ldi	r24, 0x30	; 48
     360:	0e 94 92 03 	call	0x724	; 0x724 <mcp2515_read>
	//char* data_bytes = msg->data;
    if((value & 0x08) != 0x08){
     364:	89 81       	ldd	r24, Y+1	; 0x01
     366:	83 ff       	sbrs	r24, 3
     368:	1f c0       	rjmp	.+62     	; 0x3a8 <can_send_msg+0xae>
     36a:	27 c0       	rjmp	.+78     	; 0x3ba <can_send_msg+0xc0>
        for(uint8_t i = 0; i < msg->data_len; i++){
            mcp2515_write(MCP_TXBD0 + 16*buffer + i, msg->data[i]);
     36c:	76 01       	movw	r14, r12
     36e:	e1 0e       	add	r14, r17
     370:	f1 1c       	adc	r15, r1
     372:	f7 01       	movw	r30, r14
     374:	63 81       	ldd	r22, Z+3	; 0x03
     376:	81 2f       	mov	r24, r17
     378:	80 0f       	add	r24, r16
     37a:	8a 5c       	subi	r24, 0xCA	; 202
     37c:	0e 94 b4 03 	call	0x768	; 0x768 <mcp2515_write>
			printf("data %d\n\r", msg->data[i]);
     380:	f7 01       	movw	r30, r14
     382:	83 81       	ldd	r24, Z+3	; 0x03
     384:	28 2f       	mov	r18, r24
     386:	08 2e       	mov	r0, r24
     388:	00 0c       	add	r0, r0
     38a:	33 0b       	sbc	r19, r19
     38c:	3f 93       	push	r19
     38e:	8f 93       	push	r24
     390:	83 e2       	ldi	r24, 0x23	; 35
     392:	91 e0       	ldi	r25, 0x01	; 1
     394:	9f 93       	push	r25
     396:	8f 93       	push	r24
     398:	0e 94 9a 05 	call	0xb34	; 0xb34 <printf>
    // Checking if the MCP is already requesting transmission in buffer 0
	uint8_t value;
	mcp2515_read(MCP_TXB0CTRL, &value);
	//char* data_bytes = msg->data;
    if((value & 0x08) != 0x08){
        for(uint8_t i = 0; i < msg->data_len; i++){
     39c:	1f 5f       	subi	r17, 0xFF	; 255
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	0f 90       	pop	r0
     3a6:	01 c0       	rjmp	.+2      	; 0x3aa <can_send_msg+0xb0>
     3a8:	10 e0       	ldi	r17, 0x00	; 0
     3aa:	f6 01       	movw	r30, r12
     3ac:	82 81       	ldd	r24, Z+2	; 0x02
     3ae:	18 17       	cp	r17, r24
     3b0:	e8 f2       	brcs	.-70     	; 0x36c <can_send_msg+0x72>
            mcp2515_write(MCP_TXBD0 + 16*buffer + i, msg->data[i]);
			printf("data %d\n\r", msg->data[i]);
			
        }
        mcp2515_request_to_send(MCP_RTS_TX0 + buffer);
     3b2:	81 e8       	ldi	r24, 0x81	; 129
     3b4:	8b 0d       	add	r24, r11
     3b6:	0e 94 ca 03 	call	0x794	; 0x794 <mcp2515_request_to_send>
    }
    //printf("id %d\n\r", msg.id);


}
     3ba:	0f 90       	pop	r0
     3bc:	df 91       	pop	r29
     3be:	cf 91       	pop	r28
     3c0:	1f 91       	pop	r17
     3c2:	0f 91       	pop	r16
     3c4:	ff 90       	pop	r15
     3c6:	ef 90       	pop	r14
     3c8:	df 90       	pop	r13
     3ca:	cf 90       	pop	r12
     3cc:	bf 90       	pop	r11
     3ce:	08 95       	ret

000003d0 <can_recieve_msg>:


can_msg can_recieve_msg(BUFFER buffer){
     3d0:	cf 92       	push	r12
     3d2:	df 92       	push	r13
     3d4:	ff 92       	push	r15
     3d6:	0f 93       	push	r16
     3d8:	1f 93       	push	r17
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	00 d0       	rcall	.+0      	; 0x3e0 <can_recieve_msg+0x10>
     3e0:	00 d0       	rcall	.+0      	; 0x3e2 <can_recieve_msg+0x12>
     3e2:	cd b7       	in	r28, 0x3d	; 61
     3e4:	de b7       	in	r29, 0x3e	; 62
     3e6:	6c 01       	movw	r12, r24
	//printf("her");
    can_msg msg;
	//printf("buffer%d\n\r", buffer);
    uint8_t idLSB;
	mcp2515_read(MCP_RXB0SIDL + 16*buffer, &idLSB);
     3e8:	f6 2e       	mov	r15, r22
     3ea:	ff 0c       	add	r15, r15
     3ec:	ff 0c       	add	r15, r15
     3ee:	ff 0c       	add	r15, r15
     3f0:	ff 0c       	add	r15, r15
     3f2:	be 01       	movw	r22, r28
     3f4:	6f 5f       	subi	r22, 0xFF	; 255
     3f6:	7f 4f       	sbci	r23, 0xFF	; 255
     3f8:	82 e6       	ldi	r24, 0x62	; 98
     3fa:	8f 0d       	add	r24, r15
     3fc:	0e 94 92 03 	call	0x724	; 0x724 <mcp2515_read>
    uint8_t idMSB;
	mcp2515_read(MCP_RXB0SIDH + 16*buffer, &idMSB);
     400:	be 01       	movw	r22, r28
     402:	6e 5f       	subi	r22, 0xFE	; 254
     404:	7f 4f       	sbci	r23, 0xFF	; 255
     406:	81 e6       	ldi	r24, 0x61	; 97
     408:	8f 0d       	add	r24, r15
     40a:	0e 94 92 03 	call	0x724	; 0x724 <mcp2515_read>
    uint8_t msg_length;
	mcp2515_read(MCP_RXB0DLC + 16*buffer, &msg_length);
     40e:	be 01       	movw	r22, r28
     410:	6d 5f       	subi	r22, 0xFD	; 253
     412:	7f 4f       	sbci	r23, 0xFF	; 255
     414:	85 e6       	ldi	r24, 0x65	; 101
     416:	8f 0d       	add	r24, r15
     418:	0e 94 92 03 	call	0x724	; 0x724 <mcp2515_read>
	msg_length = msg_length & 0b00001111;
     41c:	0b 81       	ldd	r16, Y+3	; 0x03
     41e:	0f 70       	andi	r16, 0x0F	; 15
     420:	0b 83       	std	Y+3, r16	; 0x03
    msg.id = ((idLSB & 0b11100000) >> 5) | ((idMSB & 0b00011111) << 3);
     422:	29 81       	ldd	r18, Y+1	; 0x01
     424:	22 95       	swap	r18
     426:	26 95       	lsr	r18
     428:	27 70       	andi	r18, 0x07	; 7
     42a:	8a 81       	ldd	r24, Y+2	; 0x02
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	88 0f       	add	r24, r24
     430:	99 1f       	adc	r25, r25
     432:	88 0f       	add	r24, r24
     434:	99 1f       	adc	r25, r25
     436:	88 0f       	add	r24, r24
     438:	99 1f       	adc	r25, r25
     43a:	99 27       	eor	r25, r25
     43c:	82 2b       	or	r24, r18
     43e:	f6 01       	movw	r30, r12
     440:	91 83       	std	Z+1, r25	; 0x01
     442:	80 83       	st	Z, r24
    
	//printf("length %d\n\r", msg_length);

    msg.data_len = msg_length;
     444:	02 83       	std	Z+2, r16	; 0x02
	
    for(uint8_t i = 0; i < msg.data_len; i++){
     446:	10 e0       	ldi	r17, 0x00	; 0
     448:	0e c0       	rjmp	.+28     	; 0x466 <__DATA_REGION_LENGTH__+0x66>
		signed char data_tmp;
		mcp2515_read(MCP_RXBD0 + 16*buffer + i, &data_tmp);
     44a:	81 2f       	mov	r24, r17
     44c:	8f 0d       	add	r24, r15
     44e:	be 01       	movw	r22, r28
     450:	6c 5f       	subi	r22, 0xFC	; 252
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	8a 59       	subi	r24, 0x9A	; 154
     456:	0e 94 92 03 	call	0x724	; 0x724 <mcp2515_read>
        msg.data[i] = data_tmp;
     45a:	f6 01       	movw	r30, r12
     45c:	e1 0f       	add	r30, r17
     45e:	f1 1d       	adc	r31, r1
     460:	8c 81       	ldd	r24, Y+4	; 0x04
     462:	83 83       	std	Z+3, r24	; 0x03
    
	//printf("length %d\n\r", msg_length);

    msg.data_len = msg_length;
	
    for(uint8_t i = 0; i < msg.data_len; i++){
     464:	1f 5f       	subi	r17, 0xFF	; 255
     466:	10 17       	cp	r17, r16
     468:	80 f3       	brcs	.-32     	; 0x44a <__DATA_REGION_LENGTH__+0x4a>
        msg.data[i] = data_tmp;
    }

    return msg;

}
     46a:	c6 01       	movw	r24, r12
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	1f 91       	pop	r17
     47a:	0f 91       	pop	r16
     47c:	ff 90       	pop	r15
     47e:	df 90       	pop	r13
     480:	cf 90       	pop	r12
     482:	08 95       	ret

00000484 <interrupt_handler>:

void interrupt_handler(){
     484:	0f 93       	push	r16
     486:	1f 93       	push	r17
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	cd b7       	in	r28, 0x3d	; 61
     48e:	de b7       	in	r29, 0x3e	; 62
     490:	66 97       	sbiw	r28, 0x16	; 22
     492:	0f b6       	in	r0, 0x3f	; 63
     494:	f8 94       	cli
     496:	de bf       	out	0x3e, r29	; 62
     498:	0f be       	out	0x3f, r0	; 63
     49a:	cd bf       	out	0x3d, r28	; 61

    uint8_t status = mcp2515_read_status();
     49c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <mcp2515_read_status>
     4a0:	08 2f       	mov	r16, r24
    can_msg msg;

    if((status & stat_buff0_r) == stat_buff0_r){
     4a2:	80 ff       	sbrs	r24, 0
     4a4:	41 c0       	rjmp	.+130    	; 0x528 <__stack+0x29>
        msg = can_recieve_msg(BUFFER0);
     4a6:	60 e0       	ldi	r22, 0x00	; 0
     4a8:	ce 01       	movw	r24, r28
     4aa:	0c 96       	adiw	r24, 0x0c	; 12
     4ac:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <can_recieve_msg>
     4b0:	8b e0       	ldi	r24, 0x0B	; 11
     4b2:	fe 01       	movw	r30, r28
     4b4:	3c 96       	adiw	r30, 0x0c	; 12
     4b6:	de 01       	movw	r26, r28
     4b8:	11 96       	adiw	r26, 0x01	; 1
     4ba:	01 90       	ld	r0, Z+
     4bc:	0d 92       	st	X+, r0
     4be:	8a 95       	dec	r24
     4c0:	e1 f7       	brne	.-8      	; 0x4ba <interrupt_handler+0x36>
        printf("BUFFER0: ID = %d, MESSAGE = ", msg.id);
     4c2:	8a 81       	ldd	r24, Y+2	; 0x02
     4c4:	8f 93       	push	r24
     4c6:	89 81       	ldd	r24, Y+1	; 0x01
     4c8:	8f 93       	push	r24
     4ca:	8d e2       	ldi	r24, 0x2D	; 45
     4cc:	91 e0       	ldi	r25, 0x01	; 1
     4ce:	9f 93       	push	r25
     4d0:	8f 93       	push	r24
     4d2:	0e 94 9a 05 	call	0xb34	; 0xb34 <printf>
        for (uint8_t i = 0; i < msg.data_len; i++){
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
     4dc:	0f 90       	pop	r0
     4de:	10 e0       	ldi	r17, 0x00	; 0
     4e0:	18 c0       	rjmp	.+48     	; 0x512 <__stack+0x13>
            printf("%d ", msg.data[i]);
     4e2:	e4 e0       	ldi	r30, 0x04	; 4
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	ec 0f       	add	r30, r28
     4e8:	fd 1f       	adc	r31, r29
     4ea:	e1 0f       	add	r30, r17
     4ec:	f1 1d       	adc	r31, r1
     4ee:	80 81       	ld	r24, Z
     4f0:	28 2f       	mov	r18, r24
     4f2:	08 2e       	mov	r0, r24
     4f4:	00 0c       	add	r0, r0
     4f6:	33 0b       	sbc	r19, r19
     4f8:	3f 93       	push	r19
     4fa:	8f 93       	push	r24
     4fc:	8a e4       	ldi	r24, 0x4A	; 74
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	9f 93       	push	r25
     502:	8f 93       	push	r24
     504:	0e 94 9a 05 	call	0xb34	; 0xb34 <printf>
    can_msg msg;

    if((status & stat_buff0_r) == stat_buff0_r){
        msg = can_recieve_msg(BUFFER0);
        printf("BUFFER0: ID = %d, MESSAGE = ", msg.id);
        for (uint8_t i = 0; i < msg.data_len; i++){
     508:	1f 5f       	subi	r17, 0xFF	; 255
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	8b 81       	ldd	r24, Y+3	; 0x03
     514:	18 17       	cp	r17, r24
     516:	28 f3       	brcs	.-54     	; 0x4e2 <interrupt_handler+0x5e>
            printf("%d ", msg.data[i]);
        }
        printf("\n\r");
     518:	8f ec       	ldi	r24, 0xCF	; 207
     51a:	91 e0       	ldi	r25, 0x01	; 1
     51c:	9f 93       	push	r25
     51e:	8f 93       	push	r24
     520:	0e 94 9a 05 	call	0xb34	; 0xb34 <printf>
     524:	0f 90       	pop	r0
     526:	0f 90       	pop	r0
    }
    
    if((status & stat_buff1_r) == stat_buff1_r){
     528:	01 ff       	sbrs	r16, 1
     52a:	41 c0       	rjmp	.+130    	; 0x5ae <__stack+0xaf>
        msg = can_recieve_msg(BUFFER1);
     52c:	61 e0       	ldi	r22, 0x01	; 1
     52e:	ce 01       	movw	r24, r28
     530:	0c 96       	adiw	r24, 0x0c	; 12
     532:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <can_recieve_msg>
     536:	8b e0       	ldi	r24, 0x0B	; 11
     538:	fe 01       	movw	r30, r28
     53a:	3c 96       	adiw	r30, 0x0c	; 12
     53c:	de 01       	movw	r26, r28
     53e:	11 96       	adiw	r26, 0x01	; 1
     540:	01 90       	ld	r0, Z+
     542:	0d 92       	st	X+, r0
     544:	8a 95       	dec	r24
     546:	e1 f7       	brne	.-8      	; 0x540 <__stack+0x41>
        printf("BUFFER1: ID = %d, MESSAGE = ", msg.id);
     548:	8a 81       	ldd	r24, Y+2	; 0x02
     54a:	8f 93       	push	r24
     54c:	89 81       	ldd	r24, Y+1	; 0x01
     54e:	8f 93       	push	r24
     550:	8e e4       	ldi	r24, 0x4E	; 78
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	9f 93       	push	r25
     556:	8f 93       	push	r24
     558:	0e 94 9a 05 	call	0xb34	; 0xb34 <printf>
        for (uint8_t i = 0; i < msg.data_len; i++){
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	10 e0       	ldi	r17, 0x00	; 0
     566:	18 c0       	rjmp	.+48     	; 0x598 <__stack+0x99>
            printf("%d", msg.data[i]);
     568:	e4 e0       	ldi	r30, 0x04	; 4
     56a:	f0 e0       	ldi	r31, 0x00	; 0
     56c:	ec 0f       	add	r30, r28
     56e:	fd 1f       	adc	r31, r29
     570:	e1 0f       	add	r30, r17
     572:	f1 1d       	adc	r31, r1
     574:	80 81       	ld	r24, Z
     576:	28 2f       	mov	r18, r24
     578:	08 2e       	mov	r0, r24
     57a:	00 0c       	add	r0, r0
     57c:	33 0b       	sbc	r19, r19
     57e:	3f 93       	push	r19
     580:	8f 93       	push	r24
     582:	8b e6       	ldi	r24, 0x6B	; 107
     584:	91 e0       	ldi	r25, 0x01	; 1
     586:	9f 93       	push	r25
     588:	8f 93       	push	r24
     58a:	0e 94 9a 05 	call	0xb34	; 0xb34 <printf>
    }
    
    if((status & stat_buff1_r) == stat_buff1_r){
        msg = can_recieve_msg(BUFFER1);
        printf("BUFFER1: ID = %d, MESSAGE = ", msg.id);
        for (uint8_t i = 0; i < msg.data_len; i++){
     58e:	1f 5f       	subi	r17, 0xFF	; 255
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	8b 81       	ldd	r24, Y+3	; 0x03
     59a:	18 17       	cp	r17, r24
     59c:	28 f3       	brcs	.-54     	; 0x568 <__stack+0x69>
            printf("%d", msg.data[i]);
        }
        printf("\n\r");
     59e:	8f ec       	ldi	r24, 0xCF	; 207
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	9f 93       	push	r25
     5a4:	8f 93       	push	r24
     5a6:	0e 94 9a 05 	call	0xb34	; 0xb34 <printf>
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
    }

    if((status & stat_buff0_tx) == stat_buff0_tx){
     5ae:	03 ff       	sbrs	r16, 3
     5b0:	08 c0       	rjmp	.+16     	; 0x5c2 <__stack+0xc3>
        //transmission successfull
		printf("yo\n\r");
     5b2:	8e e6       	ldi	r24, 0x6E	; 110
     5b4:	91 e0       	ldi	r25, 0x01	; 1
     5b6:	9f 93       	push	r25
     5b8:	8f 93       	push	r24
     5ba:	0e 94 9a 05 	call	0xb34	; 0xb34 <printf>
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
    }
    if((status & stat_buff1_tx) == stat_buff1_tx){
        //transmission successfull
    }
    if((status & stat_buff0_busy) == stat_buff0_busy){
     5c2:	02 ff       	sbrs	r16, 2
     5c4:	08 c0       	rjmp	.+16     	; 0x5d6 <__stack+0xd7>
        printf("BUFFER 0 is currently busy \n\r");
     5c6:	83 e7       	ldi	r24, 0x73	; 115
     5c8:	91 e0       	ldi	r25, 0x01	; 1
     5ca:	9f 93       	push	r25
     5cc:	8f 93       	push	r24
     5ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <printf>
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
    }
    if((status & stat_buff1_busy) == stat_buff1_busy){
     5d6:	04 ff       	sbrs	r16, 4
     5d8:	08 c0       	rjmp	.+16     	; 0x5ea <__stack+0xeb>
        printf("BUFFER 1 is currently busy \n\r");
     5da:	81 e9       	ldi	r24, 0x91	; 145
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	9f 93       	push	r25
     5e0:	8f 93       	push	r24
     5e2:	0e 94 9a 05 	call	0xb34	; 0xb34 <printf>
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
    }
   mcp2515_bit_modify(MCP_CANINTF, 0xFF, 0x00); 
     5ea:	40 e0       	ldi	r20, 0x00	; 0
     5ec:	6f ef       	ldi	r22, 0xFF	; 255
     5ee:	8c e2       	ldi	r24, 0x2C	; 44
     5f0:	0e 94 df 03 	call	0x7be	; 0x7be <mcp2515_bit_modify>

}
     5f4:	66 96       	adiw	r28, 0x16	; 22
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	f8 94       	cli
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	cd bf       	out	0x3d, r28	; 61
     600:	df 91       	pop	r29
     602:	cf 91       	pop	r28
     604:	1f 91       	pop	r17
     606:	0f 91       	pop	r16
     608:	08 95       	ret

0000060a <__vector_2>:

ISR(INT1_vect){
     60a:	1f 92       	push	r1
     60c:	0f 92       	push	r0
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	0f 92       	push	r0
     612:	11 24       	eor	r1, r1
     614:	2f 93       	push	r18
     616:	3f 93       	push	r19
     618:	4f 93       	push	r20
     61a:	5f 93       	push	r21
     61c:	6f 93       	push	r22
     61e:	7f 93       	push	r23
     620:	8f 93       	push	r24
     622:	9f 93       	push	r25
     624:	af 93       	push	r26
     626:	bf 93       	push	r27
     628:	ef 93       	push	r30
     62a:	ff 93       	push	r31
    interrupt_handler();
     62c:	0e 94 42 02 	call	0x484	; 0x484 <interrupt_handler>
	//printf("nei\n\r");
     630:	ff 91       	pop	r31
     632:	ef 91       	pop	r30
     634:	bf 91       	pop	r27
     636:	af 91       	pop	r26
     638:	9f 91       	pop	r25
     63a:	8f 91       	pop	r24
     63c:	7f 91       	pop	r23
     63e:	6f 91       	pop	r22
     640:	5f 91       	pop	r21
     642:	4f 91       	pop	r20
     644:	3f 91       	pop	r19
     646:	2f 91       	pop	r18
     648:	0f 90       	pop	r0
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	0f 90       	pop	r0
     64e:	1f 90       	pop	r1
     650:	18 95       	reti

00000652 <main>:
#include "MCP2515/MCP2515drv.h"
//#include "MENU/MENUdrv.h"
#include "CAN/CANdrv.h"

int main(void)
{
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	cd b7       	in	r28, 0x3d	; 61
     658:	de b7       	in	r29, 0x3e	; 62
     65a:	6e 97       	sbiw	r28, 0x1e	; 30
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	f8 94       	cli
     660:	de bf       	out	0x3e, r29	; 62
     662:	0f be       	out	0x3f, r0	; 63
     664:	cd bf       	out	0x3d, r28	; 61
	USART_Init(MYUBRR);
     666:	8f e1       	ldi	r24, 0x1F	; 31
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e 94 1a 05 	call	0xa34	; 0xa34 <USART_Init>
	XMEM_init();
     66e:	0e 94 07 05 	call	0xa0e	; 0xa0e <XMEM_init>
	//Int_INIT();
	ADC_Init();
     672:	0e 94 57 00 	call	0xae	; 0xae <ADC_Init>
	oled_init();
     676:	0e 94 a9 04 	call	0x952	; 0x952 <oled_init>
	//oled_refresh_rate_init();
	
	uint8_t en = 0x1;
	uint8_t to = 0x2;
	//LAB 5
	mcp2515_init();
     67a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <mcp2515_init>
	sei();
     67e:	78 94       	sei
	//can_send_msg(&melding, BUFFER0);
	//printf("length: %d\n\r", melding.data_len);
	//melding = can_recieve_msg(BUFFER0);*/
		

	ADC_calibrate();
     680:	0e 94 a6 00 	call	0x14c	; 0x14c <ADC_calibrate>
    while (1) 
    {	
		
		pos = adc_get_pos();
     684:	0e 94 c6 00 	call	0x18c	; 0x18c <adc_get_pos>
     688:	08 2f       	mov	r16, r24
     68a:	19 2f       	mov	r17, r25
		dir	= adc_get_dir(pos);
     68c:	0e 94 26 01 	call	0x24c	; 0x24c <adc_get_dir>
     690:	f8 2e       	mov	r15, r24
		printf("X pos: %d, Y pos: %d \n\r", pos.x, pos.y);
     692:	81 2f       	mov	r24, r17
     694:	01 2e       	mov	r0, r17
     696:	00 0c       	add	r0, r0
     698:	99 0b       	sbc	r25, r25
     69a:	9f 93       	push	r25
     69c:	1f 93       	push	r17
     69e:	80 2f       	mov	r24, r16
     6a0:	00 2e       	mov	r0, r16
     6a2:	00 0c       	add	r0, r0
     6a4:	99 0b       	sbc	r25, r25
     6a6:	9f 93       	push	r25
     6a8:	0f 93       	push	r16
     6aa:	8f ea       	ldi	r24, 0xAF	; 175
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	9f 93       	push	r25
     6b0:	8f 93       	push	r24
     6b2:	0e 94 9a 05 	call	0xb34	; 0xb34 <printf>
		printf("Dir: %d \n\r", dir);
     6b6:	1f 92       	push	r1
     6b8:	ff 92       	push	r15
     6ba:	87 ec       	ldi	r24, 0xC7	; 199
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	9f 93       	push	r25
     6c0:	8f 93       	push	r24
     6c2:	0e 94 9a 05 	call	0xb34	; 0xb34 <printf>
		signed char m[8] = {pos.x, pos.y, dir};
     6c6:	9e 01       	movw	r18, r28
     6c8:	24 5f       	subi	r18, 0xF4	; 244
     6ca:	3f 4f       	sbci	r19, 0xFF	; 255
     6cc:	88 e0       	ldi	r24, 0x08	; 8
     6ce:	f9 01       	movw	r30, r18
     6d0:	11 92       	st	Z+, r1
     6d2:	8a 95       	dec	r24
     6d4:	e9 f7       	brne	.-6      	; 0x6d0 <main+0x7e>
     6d6:	0c 87       	std	Y+12, r16	; 0x0c
     6d8:	1d 87       	std	Y+13, r17	; 0x0d
     6da:	fe 86       	std	Y+14, r15	; 0x0e
		melding = can_handle_msg(2, 3, m);
     6dc:	43 e0       	ldi	r20, 0x03	; 3
     6de:	62 e0       	ldi	r22, 0x02	; 2
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	ce 01       	movw	r24, r28
     6e4:	44 96       	adiw	r24, 0x14	; 20
     6e6:	0e 94 60 01 	call	0x2c0	; 0x2c0 <can_handle_msg>
     6ea:	8b e0       	ldi	r24, 0x0B	; 11
     6ec:	fe 01       	movw	r30, r28
     6ee:	74 96       	adiw	r30, 0x14	; 20
     6f0:	de 01       	movw	r26, r28
     6f2:	11 96       	adiw	r26, 0x01	; 1
     6f4:	01 90       	ld	r0, Z+
     6f6:	0d 92       	st	X+, r0
     6f8:	8a 95       	dec	r24
     6fa:	e1 f7       	brne	.-8      	; 0x6f4 <main+0xa2>
		can_send_msg(&melding, BUFFER0);
     6fc:	60 e0       	ldi	r22, 0x00	; 0
     6fe:	ce 01       	movw	r24, r28
     700:	01 96       	adiw	r24, 0x01	; 1
     702:	0e 94 7d 01 	call	0x2fa	; 0x2fa <can_send_msg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     706:	ff ef       	ldi	r31, 0xFF	; 255
     708:	2f ef       	ldi	r18, 0xFF	; 255
     70a:	8e e0       	ldi	r24, 0x0E	; 14
     70c:	f1 50       	subi	r31, 0x01	; 1
     70e:	20 40       	sbci	r18, 0x00	; 0
     710:	80 40       	sbci	r24, 0x00	; 0
     712:	e1 f7       	brne	.-8      	; 0x70c <main+0xba>
     714:	00 c0       	rjmp	.+0      	; 0x716 <main+0xc4>
     716:	00 00       	nop
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	f8 94       	cli
     71c:	de bf       	out	0x3e, r29	; 62
     71e:	0f be       	out	0x3f, r0	; 63
     720:	cd bf       	out	0x3d, r28	; 61
     722:	b0 cf       	rjmp	.-160    	; 0x684 <main+0x32>

00000724 <mcp2515_read>:

    return 0;
}


void mcp2515_read(uint8_t address, uint8_t *value){
     724:	1f 93       	push	r17
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	18 2f       	mov	r17, r24
     72c:	eb 01       	movw	r28, r22

    PORTB &= ~(1 << PB4); // Select CAN - controller
     72e:	88 b3       	in	r24, 0x18	; 24
     730:	8f 7e       	andi	r24, 0xEF	; 239
     732:	88 bb       	out	0x18, r24	; 24

    spi_write_char(MCP_READ); // Send read instruction
     734:	83 e0       	ldi	r24, 0x03	; 3
     736:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <spi_write_char>
    spi_write_char(address); // Send address
     73a:	81 2f       	mov	r24, r17
     73c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <spi_write_char>
	
    *value = spi_read_char() ; // Read result
     740:	0e 94 f6 04 	call	0x9ec	; 0x9ec <spi_read_char>
     744:	88 83       	st	Y, r24
	
	//printf("value %d\n\r", value);
    
	PORTB |= (1 << PB4); // Deselect CAN - controller
     746:	88 b3       	in	r24, 0x18	; 24
     748:	80 61       	ori	r24, 0x10	; 16
     74a:	88 bb       	out	0x18, r24	; 24
	//*value = result;
}
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	1f 91       	pop	r17
     752:	08 95       	ret

00000754 <mcp2515_reset>:

void mcp2515_reset(){
    PORTB &= ~(1 << PB4); // Select CAN - controller
     754:	88 b3       	in	r24, 0x18	; 24
     756:	8f 7e       	andi	r24, 0xEF	; 239
     758:	88 bb       	out	0x18, r24	; 24
    spi_write_char(MCP_RESET);   //Write reset bit to SPI
     75a:	80 ec       	ldi	r24, 0xC0	; 192
     75c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <spi_write_char>
    PORTB |= (1 << PB4); // Deselect CAN - controller
     760:	88 b3       	in	r24, 0x18	; 24
     762:	80 61       	ori	r24, 0x10	; 16
     764:	88 bb       	out	0x18, r24	; 24
     766:	08 95       	ret

00000768 <mcp2515_write>:
}

void mcp2515_write(uint8_t address, uint8_t data){
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	d8 2f       	mov	r29, r24
     76e:	c6 2f       	mov	r28, r22
    PORTB &= ~(1 << PB4); // Select CAN - controller
     770:	88 b3       	in	r24, 0x18	; 24
     772:	8f 7e       	andi	r24, 0xEF	; 239
     774:	88 bb       	out	0x18, r24	; 24
    spi_write_char(MCP_WRITE); // Send write instruction
     776:	82 e0       	ldi	r24, 0x02	; 2
     778:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <spi_write_char>
    spi_write_char(address); // Send address
     77c:	8d 2f       	mov	r24, r29
     77e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <spi_write_char>
    spi_write_char(data); // Send data
     782:	8c 2f       	mov	r24, r28
     784:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <spi_write_char>
    PORTB |= (1 << PB4); // Deselect CAN - controller
     788:	88 b3       	in	r24, 0x18	; 24
     78a:	80 61       	ori	r24, 0x10	; 16
     78c:	88 bb       	out	0x18, r24	; 24
}
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	08 95       	ret

00000794 <mcp2515_request_to_send>:

void mcp2515_request_to_send(uint8_t buffer){
    PORTB &= ~(1 << PB4); // Select CAN - controller
     794:	98 b3       	in	r25, 0x18	; 24
     796:	9f 7e       	andi	r25, 0xEF	; 239
     798:	98 bb       	out	0x18, r25	; 24
    //spi_write_char(MCP_RTS_ALL);   Write RTS bit to SPI
    spi_write_char(buffer);
     79a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <spi_write_char>
    PORTB |= (1 << PB4); // Deselect CAN - controller
     79e:	88 b3       	in	r24, 0x18	; 24
     7a0:	80 61       	ori	r24, 0x10	; 16
     7a2:	88 bb       	out	0x18, r24	; 24
     7a4:	08 95       	ret

000007a6 <mcp2515_read_status>:
}

uint8_t mcp2515_read_status(){
    uint8_t status;
    PORTB &= ~(1 << PB4); // Select CAN - controller
     7a6:	88 b3       	in	r24, 0x18	; 24
     7a8:	8f 7e       	andi	r24, 0xEF	; 239
     7aa:	88 bb       	out	0x18, r24	; 24
    spi_write_char(MCP_READ_STATUS);   //Write read_status bit to SPI
     7ac:	80 ea       	ldi	r24, 0xA0	; 160
     7ae:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <spi_write_char>
    status = spi_read_char();
     7b2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <spi_read_char>
	PORTB |= (1 << PB4); // Deselect CAN - controller
     7b6:	98 b3       	in	r25, 0x18	; 24
     7b8:	90 61       	ori	r25, 0x10	; 16
     7ba:	98 bb       	out	0x18, r25	; 24

    return status;

}
     7bc:	08 95       	ret

000007be <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
     7be:	1f 93       	push	r17
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	18 2f       	mov	r17, r24
     7c6:	d6 2f       	mov	r29, r22
     7c8:	c4 2f       	mov	r28, r20
    PORTB &= ~(1 << DD_SS); // Select CAN - controller
     7ca:	88 b3       	in	r24, 0x18	; 24
     7cc:	8f 7e       	andi	r24, 0xEF	; 239
     7ce:	88 bb       	out	0x18, r24	; 24
    spi_write_char(MCP_BITMOD);   //Write read_status bit to SPI
     7d0:	85 e0       	ldi	r24, 0x05	; 5
     7d2:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <spi_write_char>
    spi_write_char(address); // Send address
     7d6:	81 2f       	mov	r24, r17
     7d8:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <spi_write_char>
    spi_write_char(mask); // Send mask
     7dc:	8d 2f       	mov	r24, r29
     7de:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <spi_write_char>
    spi_write_char(data); // Send data
     7e2:	8c 2f       	mov	r24, r28
     7e4:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <spi_write_char>
    PORTB |= (1 << DD_SS); // Deselect CAN - controller
     7e8:	88 b3       	in	r24, 0x18	; 24
     7ea:	80 61       	ori	r24, 0x10	; 16
     7ec:	88 bb       	out	0x18, r24	; 24
}
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	1f 91       	pop	r17
     7f4:	08 95       	ret

000007f6 <can_interrupt_en>:
}

void can_interrupt_en(){
	
    // making pd3 input
    DDRD &= ~(1<<PD3);
     7f6:	81 b3       	in	r24, 0x11	; 17
     7f8:	87 7f       	andi	r24, 0xF7	; 247
     7fa:	81 bb       	out	0x11, r24	; 17
    // Enablign external interrupt on MCU on INT1
    GICR |= (1<<INT1);
     7fc:	8b b7       	in	r24, 0x3b	; 59
     7fe:	80 68       	ori	r24, 0x80	; 128
     800:	8b bf       	out	0x3b, r24	; 59
	
	MCUCR &= ~(1<<ISC10);
     802:	85 b7       	in	r24, 0x35	; 53
     804:	8b 7f       	andi	r24, 0xFB	; 251
     806:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<ISC11);
     808:	85 b7       	in	r24, 0x35	; 53
     80a:	88 60       	ori	r24, 0x08	; 8
     80c:	85 bf       	out	0x35, r24	; 53
	
	mcp2515_bit_modify(MCP_CANINTE, 0xFF, 0x0F);
     80e:	4f e0       	ldi	r20, 0x0F	; 15
     810:	6f ef       	ldi	r22, 0xFF	; 255
     812:	8b e2       	ldi	r24, 0x2B	; 43
     814:	0e 94 df 03 	call	0x7be	; 0x7be <mcp2515_bit_modify>
     818:	08 95       	ret

0000081a <mcp2515_brp_init>:

}

uint8_t mcp2515_brp_init(){
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	1f 92       	push	r1
     820:	cd b7       	in	r28, 0x3d	; 61
     822:	de b7       	in	r29, 0x3e	; 62
	uint8_t value;
    // SJW<2:0> = 0b000 (0)-> 1 * Tq
    // BRP<5:0> = 0b00100 (4) -> BRP * Tosc
    mcp2515_bit_modify(MCP_CNF1, MCP_CNF1_MASK, MCP_CNF1_VAL);
     824:	43 e0       	ldi	r20, 0x03	; 3
     826:	6f ef       	ldi	r22, 0xFF	; 255
     828:	8a e2       	ldi	r24, 0x2A	; 42
     82a:	0e 94 df 03 	call	0x7be	; 0x7be <mcp2515_bit_modify>
	//printf("value: %d\n\r", value);
    

    // PHSEG1<5:3> = 0b110 (6) -> PS1 = (PHSEG + 1) * Tq
    // PHSEG2<2:0> = 0b001 (1) -> Progseg = (PHSEG2 + 1) * Tq
    mcp2515_bit_modify(MCP_CNF2, MCP_CNF2_MASK, MCP_CNF2_VAL);
     82e:	41 eb       	ldi	r20, 0xB1	; 177
     830:	6f ef       	ldi	r22, 0xFF	; 255
     832:	89 e2       	ldi	r24, 0x29	; 41
     834:	0e 94 df 03 	call	0x7be	; 0x7be <mcp2515_bit_modify>
		//printf("value: %d\n\r", value);
    
    
    // PHSEG2<2:0> = 0b101 (5) -> PS2 = (PHSEG2 + 1) * Tq
    mcp2515_bit_modify(MCP_CNF3, MCP_CNF3_MASK, MCP_CNF3_VAL);
     838:	45 e0       	ldi	r20, 0x05	; 5
     83a:	67 e0       	ldi	r22, 0x07	; 7
     83c:	88 e2       	ldi	r24, 0x28	; 40
     83e:	0e 94 df 03 	call	0x7be	; 0x7be <mcp2515_bit_modify>
		//printf("value: %d\n\r", value);
	mcp2515_read(MCP_CNF1, &value);
     842:	be 01       	movw	r22, r28
     844:	6f 5f       	subi	r22, 0xFF	; 255
     846:	7f 4f       	sbci	r23, 0xFF	; 255
     848:	8a e2       	ldi	r24, 0x2A	; 42
     84a:	0e 94 92 03 	call	0x724	; 0x724 <mcp2515_read>
	if ((value & MCP_CNF1_MASK) != MCP_CNF1_VAL) {
     84e:	89 81       	ldd	r24, Y+1	; 0x01
     850:	83 30       	cpi	r24, 0x03	; 3
     852:	51 f0       	breq	.+20     	; 0x868 <mcp2515_brp_init+0x4e>
		printf ("Wrong CNF1 value !\n\r");
     854:	82 ed       	ldi	r24, 0xD2	; 210
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	9f 93       	push	r25
     85a:	8f 93       	push	r24
     85c:	0e 94 9a 05 	call	0xb34	; 0xb34 <printf>
		return -1;
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	8f ef       	ldi	r24, 0xFF	; 255
     866:	28 c0       	rjmp	.+80     	; 0x8b8 <mcp2515_brp_init+0x9e>
	}
	
	mcp2515_read(MCP_CNF2, &value);
     868:	be 01       	movw	r22, r28
     86a:	6f 5f       	subi	r22, 0xFF	; 255
     86c:	7f 4f       	sbci	r23, 0xFF	; 255
     86e:	89 e2       	ldi	r24, 0x29	; 41
     870:	0e 94 92 03 	call	0x724	; 0x724 <mcp2515_read>
	if ((value & MCP_CNF1_MASK) != MCP_CNF2_VAL) {
     874:	89 81       	ldd	r24, Y+1	; 0x01
     876:	81 3b       	cpi	r24, 0xB1	; 177
     878:	51 f0       	breq	.+20     	; 0x88e <mcp2515_brp_init+0x74>
		printf ("Wrong CNF2 value !\n\r");
     87a:	87 ee       	ldi	r24, 0xE7	; 231
     87c:	91 e0       	ldi	r25, 0x01	; 1
     87e:	9f 93       	push	r25
     880:	8f 93       	push	r24
     882:	0e 94 9a 05 	call	0xb34	; 0xb34 <printf>
		return -1;
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	8f ef       	ldi	r24, 0xFF	; 255
     88c:	15 c0       	rjmp	.+42     	; 0x8b8 <mcp2515_brp_init+0x9e>
	}
	mcp2515_read(MCP_CNF3, &value);
     88e:	be 01       	movw	r22, r28
     890:	6f 5f       	subi	r22, 0xFF	; 255
     892:	7f 4f       	sbci	r23, 0xFF	; 255
     894:	88 e2       	ldi	r24, 0x28	; 40
     896:	0e 94 92 03 	call	0x724	; 0x724 <mcp2515_read>
    if ((value & MCP_CNF3_MASK) != MCP_CNF3_VAL) {
     89a:	89 81       	ldd	r24, Y+1	; 0x01
     89c:	87 70       	andi	r24, 0x07	; 7
     89e:	85 30       	cpi	r24, 0x05	; 5
     8a0:	51 f0       	breq	.+20     	; 0x8b6 <mcp2515_brp_init+0x9c>
        printf ("Wrong CNF3 value !\n\r");
     8a2:	8c ef       	ldi	r24, 0xFC	; 252
     8a4:	91 e0       	ldi	r25, 0x01	; 1
     8a6:	9f 93       	push	r25
     8a8:	8f 93       	push	r24
     8aa:	0e 94 9a 05 	call	0xb34	; 0xb34 <printf>
		return -1;
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	8f ef       	ldi	r24, 0xFF	; 255
     8b4:	01 c0       	rjmp	.+2      	; 0x8b8 <mcp2515_brp_init+0x9e>
    }

    return 0;
     8b6:	80 e0       	ldi	r24, 0x00	; 0
}
     8b8:	0f 90       	pop	r0
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	08 95       	ret

000008c0 <mcp2515_init>:
#include "../SPI/SPIdrv.h"




uint8_t mcp2515_init(){
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	1f 92       	push	r1
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
    uint8_t value;
	spi_init_master(); // Initialize SPI
     8ca:	0e 94 00 05 	call	0xa00	; 0xa00 <spi_init_master>
    mcp2515_reset(); // end reset - command
     8ce:	0e 94 aa 03 	call	0x754	; 0x754 <mcp2515_reset>
    // Self - testS
	//mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);


	mcp2515_read(MCP_CANSTAT, &value);	//printf("value: %d\n\r", value);
     8d2:	be 01       	movw	r22, r28
     8d4:	6f 5f       	subi	r22, 0xFF	; 255
     8d6:	7f 4f       	sbci	r23, 0xFF	; 255
     8d8:	8e e0       	ldi	r24, 0x0E	; 14
     8da:	0e 94 92 03 	call	0x724	; 0x724 <mcp2515_read>
	//printf("val %d\n\r", value);
    if ((value & MODE_MASK) != MODE_CONFIG) {
     8de:	89 81       	ldd	r24, Y+1	; 0x01
     8e0:	80 7e       	andi	r24, 0xE0	; 224
     8e2:	80 38       	cpi	r24, 0x80	; 128
     8e4:	51 f0       	breq	.+20     	; 0x8fa <mcp2515_init+0x3a>
        printf ("MCP2515 is NOT in config mode after reset !\n\r");
     8e6:	81 e1       	ldi	r24, 0x11	; 17
     8e8:	92 e0       	ldi	r25, 0x02	; 2
     8ea:	9f 93       	push	r25
     8ec:	8f 93       	push	r24
     8ee:	0e 94 9a 05 	call	0xb34	; 0xb34 <printf>
		return -1;
     8f2:	0f 90       	pop	r0
     8f4:	0f 90       	pop	r0
     8f6:	8f ef       	ldi	r24, 0xFF	; 255
     8f8:	25 c0       	rjmp	.+74     	; 0x944 <mcp2515_init+0x84>
    }
	
	
    if(mcp2515_brp_init() < 0){
     8fa:	0e 94 0d 04 	call	0x81a	; 0x81a <mcp2515_brp_init>
        return -2;
    } 
	
    can_interrupt_en();
     8fe:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <can_interrupt_en>
	//mcp2515_bit_modify(MCP_CANINTF, 0xFF, 0x00);
		
	mcp2515_bit_modify(MCP_RXB0CTRL, 0x60, 0x60);
     902:	40 e6       	ldi	r20, 0x60	; 96
     904:	60 e6       	ldi	r22, 0x60	; 96
     906:	80 e6       	ldi	r24, 0x60	; 96
     908:	0e 94 df 03 	call	0x7be	; 0x7be <mcp2515_bit_modify>
    mcp2515_bit_modify(MCP_RXB1CTRL, 0x60, 0x60);
     90c:	40 e6       	ldi	r20, 0x60	; 96
     90e:	60 e6       	ldi	r22, 0x60	; 96
     910:	80 e7       	ldi	r24, 0x70	; 112
     912:	0e 94 df 03 	call	0x7be	; 0x7be <mcp2515_bit_modify>


	
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     916:	40 e0       	ldi	r20, 0x00	; 0
     918:	60 ee       	ldi	r22, 0xE0	; 224
     91a:	8f e0       	ldi	r24, 0x0F	; 15
     91c:	0e 94 df 03 	call	0x7be	; 0x7be <mcp2515_bit_modify>
	mcp2515_read(MCP_CANSTAT, &value);
     920:	be 01       	movw	r22, r28
     922:	6f 5f       	subi	r22, 0xFF	; 255
     924:	7f 4f       	sbci	r23, 0xFF	; 255
     926:	8e e0       	ldi	r24, 0x0E	; 14
     928:	0e 94 92 03 	call	0x724	; 0x724 <mcp2515_read>
	//printf("value: %d\n\r", value);
	if ((value & MODE_MASK) != MODE_NORMAL) {
     92c:	89 81       	ldd	r24, Y+1	; 0x01
     92e:	80 7e       	andi	r24, 0xE0	; 224
     930:	49 f0       	breq	.+18     	; 0x944 <mcp2515_init+0x84>
        printf ("MCP2515 is NOT in  NORMAL mode after reset !\n\r");
     932:	8f e3       	ldi	r24, 0x3F	; 63
     934:	92 e0       	ldi	r25, 0x02	; 2
     936:	9f 93       	push	r25
     938:	8f 93       	push	r24
     93a:	0e 94 9a 05 	call	0xb34	; 0xb34 <printf>
		return -1;
     93e:	0f 90       	pop	r0
     940:	0f 90       	pop	r0
     942:	8f ef       	ldi	r24, 0xFF	; 255
    }
	
    return 0;
}
     944:	0f 90       	pop	r0
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	08 95       	ret

0000094c <oled_write_command>:
	ext_mem[0]= data;
}

void oled_write_data(uint8_t data){
	volatile char *ext_mem = (char *) OLED_DATA_ADDRESS;
	ext_mem[0]= data;
     94c:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xd85>
     950:	08 95       	ret

00000952 <oled_init>:
}

void oled_init(){
    //Set inits according to datasheet
    oled_write_command(0xae); // display off
     952:	8e ea       	ldi	r24, 0xAE	; 174
     954:	0e 94 a6 04 	call	0x94c	; 0x94c <oled_write_command>
    oled_write_command(0xa1); //segment remap
     958:	81 ea       	ldi	r24, 0xA1	; 161
     95a:	0e 94 a6 04 	call	0x94c	; 0x94c <oled_write_command>
    oled_write_command(0xda); //common pads hardware: alternative
     95e:	8a ed       	ldi	r24, 0xDA	; 218
     960:	0e 94 a6 04 	call	0x94c	; 0x94c <oled_write_command>
    oled_write_command(0x12);
     964:	82 e1       	ldi	r24, 0x12	; 18
     966:	0e 94 a6 04 	call	0x94c	; 0x94c <oled_write_command>
    oled_write_command(0xc8); //common output scan direction:com63~com0
     96a:	88 ec       	ldi	r24, 0xC8	; 200
     96c:	0e 94 a6 04 	call	0x94c	; 0x94c <oled_write_command>
    oled_write_command(0xa8); //multiplex ration mode:63
     970:	88 ea       	ldi	r24, 0xA8	; 168
     972:	0e 94 a6 04 	call	0x94c	; 0x94c <oled_write_command>
    oled_write_command(0x3f);
     976:	8f e3       	ldi	r24, 0x3F	; 63
     978:	0e 94 a6 04 	call	0x94c	; 0x94c <oled_write_command>
    oled_write_command(0xd5); //display divide ratio/osc. freq. mode
     97c:	85 ed       	ldi	r24, 0xD5	; 213
     97e:	0e 94 a6 04 	call	0x94c	; 0x94c <oled_write_command>
    oled_write_command(0x80);
     982:	80 e8       	ldi	r24, 0x80	; 128
     984:	0e 94 a6 04 	call	0x94c	; 0x94c <oled_write_command>
    oled_write_command(0x81); //contrast control
     988:	81 e8       	ldi	r24, 0x81	; 129
     98a:	0e 94 a6 04 	call	0x94c	; 0x94c <oled_write_command>
    oled_write_command(0x50);
     98e:	80 e5       	ldi	r24, 0x50	; 80
     990:	0e 94 a6 04 	call	0x94c	; 0x94c <oled_write_command>
    oled_write_command(0xd9); //set pre-charge period
     994:	89 ed       	ldi	r24, 0xD9	; 217
     996:	0e 94 a6 04 	call	0x94c	; 0x94c <oled_write_command>
    oled_write_command(0x21);
     99a:	81 e2       	ldi	r24, 0x21	; 33
     99c:	0e 94 a6 04 	call	0x94c	; 0x94c <oled_write_command>
    oled_write_command(0x20); //Set Memory Addressing Mode
     9a0:	80 e2       	ldi	r24, 0x20	; 32
     9a2:	0e 94 a6 04 	call	0x94c	; 0x94c <oled_write_command>
    oled_write_command(0x02);
     9a6:	82 e0       	ldi	r24, 0x02	; 2
     9a8:	0e 94 a6 04 	call	0x94c	; 0x94c <oled_write_command>
    oled_write_command(0xdb); //VCOM deselect level mode
     9ac:	8b ed       	ldi	r24, 0xDB	; 219
     9ae:	0e 94 a6 04 	call	0x94c	; 0x94c <oled_write_command>
    oled_write_command(0x30);
     9b2:	80 e3       	ldi	r24, 0x30	; 48
     9b4:	0e 94 a6 04 	call	0x94c	; 0x94c <oled_write_command>
    oled_write_command(0xad); //master configuration
     9b8:	8d ea       	ldi	r24, 0xAD	; 173
     9ba:	0e 94 a6 04 	call	0x94c	; 0x94c <oled_write_command>
    oled_write_command(0x00);
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	0e 94 a6 04 	call	0x94c	; 0x94c <oled_write_command>
    oled_write_command(0xa4); //out follows RAM content
     9c4:	84 ea       	ldi	r24, 0xA4	; 164
     9c6:	0e 94 a6 04 	call	0x94c	; 0x94c <oled_write_command>
    oled_write_command(0xa6); //set normal display
     9ca:	86 ea       	ldi	r24, 0xA6	; 166
     9cc:	0e 94 a6 04 	call	0x94c	; 0x94c <oled_write_command>
    oled_write_command(0xaf); // display on
     9d0:	8f ea       	ldi	r24, 0xAF	; 175
     9d2:	0e 94 a6 04 	call	0x94c	; 0x94c <oled_write_command>

    //Set to page adressing mode
    oled_write_command(0x20);
     9d6:	80 e2       	ldi	r24, 0x20	; 32
     9d8:	0e 94 a6 04 	call	0x94c	; 0x94c <oled_write_command>
	oled_write_command(0b10);
     9dc:	82 e0       	ldi	r24, 0x02	; 2
     9de:	0e 94 a6 04 	call	0x94c	; 0x94c <oled_write_command>
     9e2:	08 95       	ret

000009e4 <spi_write_char>:
	SPCR = (1<<SPE);
}
*/
void spi_write_char(char cData){
	//char flushbuffer;
    SPDR = cData;
     9e4:	8f b9       	out	0x0f, r24	; 15
    //Wait for send to complete

	loop_until_bit_is_set(SPSR, SPIF);
     9e6:	77 9b       	sbis	0x0e, 7	; 14
     9e8:	fe cf       	rjmp	.-4      	; 0x9e6 <spi_write_char+0x2>
	//while(!(SPSR & (1<<SPIF)));
	//flushbuffer = SPDR;
}
     9ea:	08 95       	ret

000009ec <spi_read_char>:

char spi_read_char(){
    SPDR = 0xAA;
     9ec:	8a ea       	ldi	r24, 0xAA	; 170
     9ee:	8f b9       	out	0x0f, r24	; 15
	// Wait for reception to complete

    loop_until_bit_is_set(SPSR, SPIF);
     9f0:	77 9b       	sbis	0x0e, 7	; 14
     9f2:	fe cf       	rjmp	.-4      	; 0x9f0 <spi_read_char+0x4>
	//while(!(SPSR & (1<<SPIF)));
	// Return char in data register
	return SPDR;
     9f4:	8f b1       	in	r24, 0x0f	; 15

}
     9f6:	08 95       	ret

000009f8 <spi_set_ss_high>:

void spi_set_ss_high(){
    PORTB |= (1<<DD_SS);
     9f8:	88 b3       	in	r24, 0x18	; 24
     9fa:	80 61       	ori	r24, 0x10	; 16
     9fc:	88 bb       	out	0x18, r24	; 24
     9fe:	08 95       	ret

00000a00 <spi_init_master>:
#include "SPIdrv.h"


void spi_init_master(){
    // Set MOSI and SCK - og SS - output, all others input
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS);
     a00:	80 eb       	ldi	r24, 0xB0	; 176
     a02:	87 bb       	out	0x17, r24	; 23
	
	//DDR_SPI &= ~(1<<DD_MISO);
	
	// Enable SPI, Master, set clock rate fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);//|(1<<SPIE);
     a04:	81 e5       	ldi	r24, 0x51	; 81
     a06:	8d b9       	out	0x0d, r24	; 13
	//SPCR &= ~((1<<CPOL)|(1<<CPHA));
	spi_set_ss_high();
     a08:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <spi_set_ss_high>
     a0c:	08 95       	ret

00000a0e <XMEM_init>:
	SFIOR |= (1<<XMM2); // Masking P7-P4
}

void XMEM_write(uint8_t data, uint16_t addr){
	volatile char *ext_mem = (char *) BASE_ADDRESS;
	ext_mem[addr]= data;
     a0e:	85 b7       	in	r24, 0x35	; 53
     a10:	80 68       	ori	r24, 0x80	; 128
     a12:	85 bf       	out	0x35, r24	; 53
     a14:	80 b7       	in	r24, 0x30	; 48
     a16:	80 62       	ori	r24, 0x20	; 32
     a18:	80 bf       	out	0x30, r24	; 48
     a1a:	08 95       	ret

00000a1c <XMEM_read>:
}

uint8_t XMEM_read(uint16_t addr){
	volatile char *ext_mem = (char *) BASE_ADDRESS;
	uint8_t ret_val = ext_mem[addr];
     a1c:	90 5f       	subi	r25, 0xF0	; 240
     a1e:	fc 01       	movw	r30, r24
     a20:	80 81       	ld	r24, Z
	return ret_val;
}
     a22:	08 95       	ret

00000a24 <USART_Transmit>:
#include "UARTdrv.h"

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
     a24:	5d 9b       	sbis	0x0b, 5	; 11
     a26:	fe cf       	rjmp	.-4      	; 0xa24 <USART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     a28:	8c b9       	out	0x0c, r24	; 12
     a2a:	08 95       	ret

00000a2c <USART_Receive>:
}
unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
     a2c:	5f 9b       	sbis	0x0b, 7	; 11
     a2e:	fe cf       	rjmp	.-4      	; 0xa2c <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR0;
     a30:	8c b1       	in	r24, 0x0c	; 12
}
     a32:	08 95       	ret

00000a34 <USART_Init>:
void USART_Init( unsigned int ubrr )
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     a34:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     a36:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     a38:	88 e1       	ldi	r24, 0x18	; 24
     a3a:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     a3c:	8e e8       	ldi	r24, 0x8E	; 142
     a3e:	80 bd       	out	0x20, r24	; 32
	fdevopen(USART_Transmit,USART_Receive);
     a40:	66 e1       	ldi	r22, 0x16	; 22
     a42:	75 e0       	ldi	r23, 0x05	; 5
     a44:	82 e1       	ldi	r24, 0x12	; 18
     a46:	95 e0       	ldi	r25, 0x05	; 5
     a48:	0e 94 4f 05 	call	0xa9e	; 0xa9e <fdevopen>
     a4c:	08 95       	ret

00000a4e <__divmodhi4>:
     a4e:	97 fb       	bst	r25, 7
     a50:	07 2e       	mov	r0, r23
     a52:	16 f4       	brtc	.+4      	; 0xa58 <__divmodhi4+0xa>
     a54:	00 94       	com	r0
     a56:	07 d0       	rcall	.+14     	; 0xa66 <__divmodhi4_neg1>
     a58:	77 fd       	sbrc	r23, 7
     a5a:	09 d0       	rcall	.+18     	; 0xa6e <__divmodhi4_neg2>
     a5c:	0e 94 3b 05 	call	0xa76	; 0xa76 <__udivmodhi4>
     a60:	07 fc       	sbrc	r0, 7
     a62:	05 d0       	rcall	.+10     	; 0xa6e <__divmodhi4_neg2>
     a64:	3e f4       	brtc	.+14     	; 0xa74 <__divmodhi4_exit>

00000a66 <__divmodhi4_neg1>:
     a66:	90 95       	com	r25
     a68:	81 95       	neg	r24
     a6a:	9f 4f       	sbci	r25, 0xFF	; 255
     a6c:	08 95       	ret

00000a6e <__divmodhi4_neg2>:
     a6e:	70 95       	com	r23
     a70:	61 95       	neg	r22
     a72:	7f 4f       	sbci	r23, 0xFF	; 255

00000a74 <__divmodhi4_exit>:
     a74:	08 95       	ret

00000a76 <__udivmodhi4>:
     a76:	aa 1b       	sub	r26, r26
     a78:	bb 1b       	sub	r27, r27
     a7a:	51 e1       	ldi	r21, 0x11	; 17
     a7c:	07 c0       	rjmp	.+14     	; 0xa8c <__udivmodhi4_ep>

00000a7e <__udivmodhi4_loop>:
     a7e:	aa 1f       	adc	r26, r26
     a80:	bb 1f       	adc	r27, r27
     a82:	a6 17       	cp	r26, r22
     a84:	b7 07       	cpc	r27, r23
     a86:	10 f0       	brcs	.+4      	; 0xa8c <__udivmodhi4_ep>
     a88:	a6 1b       	sub	r26, r22
     a8a:	b7 0b       	sbc	r27, r23

00000a8c <__udivmodhi4_ep>:
     a8c:	88 1f       	adc	r24, r24
     a8e:	99 1f       	adc	r25, r25
     a90:	5a 95       	dec	r21
     a92:	a9 f7       	brne	.-22     	; 0xa7e <__udivmodhi4_loop>
     a94:	80 95       	com	r24
     a96:	90 95       	com	r25
     a98:	bc 01       	movw	r22, r24
     a9a:	cd 01       	movw	r24, r26
     a9c:	08 95       	ret

00000a9e <fdevopen>:
     a9e:	0f 93       	push	r16
     aa0:	1f 93       	push	r17
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	00 97       	sbiw	r24, 0x00	; 0
     aa8:	31 f4       	brne	.+12     	; 0xab6 <fdevopen+0x18>
     aaa:	61 15       	cp	r22, r1
     aac:	71 05       	cpc	r23, r1
     aae:	19 f4       	brne	.+6      	; 0xab6 <fdevopen+0x18>
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	3a c0       	rjmp	.+116    	; 0xb2a <fdevopen+0x8c>
     ab6:	8b 01       	movw	r16, r22
     ab8:	ec 01       	movw	r28, r24
     aba:	6e e0       	ldi	r22, 0x0E	; 14
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	0e 94 91 07 	call	0xf22	; 0xf22 <calloc>
     ac6:	fc 01       	movw	r30, r24
     ac8:	89 2b       	or	r24, r25
     aca:	91 f3       	breq	.-28     	; 0xab0 <fdevopen+0x12>
     acc:	80 e8       	ldi	r24, 0x80	; 128
     ace:	83 83       	std	Z+3, r24	; 0x03
     ad0:	01 15       	cp	r16, r1
     ad2:	11 05       	cpc	r17, r1
     ad4:	71 f0       	breq	.+28     	; 0xaf2 <fdevopen+0x54>
     ad6:	13 87       	std	Z+11, r17	; 0x0b
     ad8:	02 87       	std	Z+10, r16	; 0x0a
     ada:	81 e8       	ldi	r24, 0x81	; 129
     adc:	83 83       	std	Z+3, r24	; 0x03
     ade:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <__iob>
     ae2:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <__iob+0x1>
     ae6:	89 2b       	or	r24, r25
     ae8:	21 f4       	brne	.+8      	; 0xaf2 <fdevopen+0x54>
     aea:	f0 93 72 02 	sts	0x0272, r31	; 0x800272 <__iob+0x1>
     aee:	e0 93 71 02 	sts	0x0271, r30	; 0x800271 <__iob>
     af2:	20 97       	sbiw	r28, 0x00	; 0
     af4:	c9 f0       	breq	.+50     	; 0xb28 <fdevopen+0x8a>
     af6:	d1 87       	std	Z+9, r29	; 0x09
     af8:	c0 87       	std	Z+8, r28	; 0x08
     afa:	83 81       	ldd	r24, Z+3	; 0x03
     afc:	82 60       	ori	r24, 0x02	; 2
     afe:	83 83       	std	Z+3, r24	; 0x03
     b00:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <__iob+0x2>
     b04:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <__iob+0x3>
     b08:	89 2b       	or	r24, r25
     b0a:	71 f4       	brne	.+28     	; 0xb28 <fdevopen+0x8a>
     b0c:	f0 93 74 02 	sts	0x0274, r31	; 0x800274 <__iob+0x3>
     b10:	e0 93 73 02 	sts	0x0273, r30	; 0x800273 <__iob+0x2>
     b14:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <__iob+0x4>
     b18:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <__iob+0x5>
     b1c:	89 2b       	or	r24, r25
     b1e:	21 f4       	brne	.+8      	; 0xb28 <fdevopen+0x8a>
     b20:	f0 93 76 02 	sts	0x0276, r31	; 0x800276 <__iob+0x5>
     b24:	e0 93 75 02 	sts	0x0275, r30	; 0x800275 <__iob+0x4>
     b28:	cf 01       	movw	r24, r30
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	1f 91       	pop	r17
     b30:	0f 91       	pop	r16
     b32:	08 95       	ret

00000b34 <printf>:
     b34:	a0 e0       	ldi	r26, 0x00	; 0
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	e0 ea       	ldi	r30, 0xA0	; 160
     b3a:	f5 e0       	ldi	r31, 0x05	; 5
     b3c:	0c 94 95 09 	jmp	0x132a	; 0x132a <__prologue_saves__+0x20>
     b40:	ae 01       	movw	r20, r28
     b42:	4b 5f       	subi	r20, 0xFB	; 251
     b44:	5f 4f       	sbci	r21, 0xFF	; 255
     b46:	fa 01       	movw	r30, r20
     b48:	61 91       	ld	r22, Z+
     b4a:	71 91       	ld	r23, Z+
     b4c:	af 01       	movw	r20, r30
     b4e:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <__iob+0x2>
     b52:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <__iob+0x3>
     b56:	0e 94 b0 05 	call	0xb60	; 0xb60 <vfprintf>
     b5a:	e2 e0       	ldi	r30, 0x02	; 2
     b5c:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__epilogue_restores__+0x20>

00000b60 <vfprintf>:
     b60:	ab e0       	ldi	r26, 0x0B	; 11
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	e6 eb       	ldi	r30, 0xB6	; 182
     b66:	f5 e0       	ldi	r31, 0x05	; 5
     b68:	0c 94 85 09 	jmp	0x130a	; 0x130a <__prologue_saves__>
     b6c:	6c 01       	movw	r12, r24
     b6e:	7b 01       	movw	r14, r22
     b70:	8a 01       	movw	r16, r20
     b72:	fc 01       	movw	r30, r24
     b74:	17 82       	std	Z+7, r1	; 0x07
     b76:	16 82       	std	Z+6, r1	; 0x06
     b78:	83 81       	ldd	r24, Z+3	; 0x03
     b7a:	81 ff       	sbrs	r24, 1
     b7c:	cc c1       	rjmp	.+920    	; 0xf16 <vfprintf+0x3b6>
     b7e:	ce 01       	movw	r24, r28
     b80:	01 96       	adiw	r24, 0x01	; 1
     b82:	3c 01       	movw	r6, r24
     b84:	f6 01       	movw	r30, r12
     b86:	93 81       	ldd	r25, Z+3	; 0x03
     b88:	f7 01       	movw	r30, r14
     b8a:	93 fd       	sbrc	r25, 3
     b8c:	85 91       	lpm	r24, Z+
     b8e:	93 ff       	sbrs	r25, 3
     b90:	81 91       	ld	r24, Z+
     b92:	7f 01       	movw	r14, r30
     b94:	88 23       	and	r24, r24
     b96:	09 f4       	brne	.+2      	; 0xb9a <vfprintf+0x3a>
     b98:	ba c1       	rjmp	.+884    	; 0xf0e <vfprintf+0x3ae>
     b9a:	85 32       	cpi	r24, 0x25	; 37
     b9c:	39 f4       	brne	.+14     	; 0xbac <vfprintf+0x4c>
     b9e:	93 fd       	sbrc	r25, 3
     ba0:	85 91       	lpm	r24, Z+
     ba2:	93 ff       	sbrs	r25, 3
     ba4:	81 91       	ld	r24, Z+
     ba6:	7f 01       	movw	r14, r30
     ba8:	85 32       	cpi	r24, 0x25	; 37
     baa:	29 f4       	brne	.+10     	; 0xbb6 <vfprintf+0x56>
     bac:	b6 01       	movw	r22, r12
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
     bb4:	e7 cf       	rjmp	.-50     	; 0xb84 <vfprintf+0x24>
     bb6:	91 2c       	mov	r9, r1
     bb8:	21 2c       	mov	r2, r1
     bba:	31 2c       	mov	r3, r1
     bbc:	ff e1       	ldi	r31, 0x1F	; 31
     bbe:	f3 15       	cp	r31, r3
     bc0:	d8 f0       	brcs	.+54     	; 0xbf8 <vfprintf+0x98>
     bc2:	8b 32       	cpi	r24, 0x2B	; 43
     bc4:	79 f0       	breq	.+30     	; 0xbe4 <vfprintf+0x84>
     bc6:	38 f4       	brcc	.+14     	; 0xbd6 <vfprintf+0x76>
     bc8:	80 32       	cpi	r24, 0x20	; 32
     bca:	79 f0       	breq	.+30     	; 0xbea <vfprintf+0x8a>
     bcc:	83 32       	cpi	r24, 0x23	; 35
     bce:	a1 f4       	brne	.+40     	; 0xbf8 <vfprintf+0x98>
     bd0:	23 2d       	mov	r18, r3
     bd2:	20 61       	ori	r18, 0x10	; 16
     bd4:	1d c0       	rjmp	.+58     	; 0xc10 <vfprintf+0xb0>
     bd6:	8d 32       	cpi	r24, 0x2D	; 45
     bd8:	61 f0       	breq	.+24     	; 0xbf2 <vfprintf+0x92>
     bda:	80 33       	cpi	r24, 0x30	; 48
     bdc:	69 f4       	brne	.+26     	; 0xbf8 <vfprintf+0x98>
     bde:	23 2d       	mov	r18, r3
     be0:	21 60       	ori	r18, 0x01	; 1
     be2:	16 c0       	rjmp	.+44     	; 0xc10 <vfprintf+0xb0>
     be4:	83 2d       	mov	r24, r3
     be6:	82 60       	ori	r24, 0x02	; 2
     be8:	38 2e       	mov	r3, r24
     bea:	e3 2d       	mov	r30, r3
     bec:	e4 60       	ori	r30, 0x04	; 4
     bee:	3e 2e       	mov	r3, r30
     bf0:	2a c0       	rjmp	.+84     	; 0xc46 <vfprintf+0xe6>
     bf2:	f3 2d       	mov	r31, r3
     bf4:	f8 60       	ori	r31, 0x08	; 8
     bf6:	1d c0       	rjmp	.+58     	; 0xc32 <vfprintf+0xd2>
     bf8:	37 fc       	sbrc	r3, 7
     bfa:	2d c0       	rjmp	.+90     	; 0xc56 <vfprintf+0xf6>
     bfc:	20 ed       	ldi	r18, 0xD0	; 208
     bfe:	28 0f       	add	r18, r24
     c00:	2a 30       	cpi	r18, 0x0A	; 10
     c02:	40 f0       	brcs	.+16     	; 0xc14 <vfprintf+0xb4>
     c04:	8e 32       	cpi	r24, 0x2E	; 46
     c06:	b9 f4       	brne	.+46     	; 0xc36 <vfprintf+0xd6>
     c08:	36 fc       	sbrc	r3, 6
     c0a:	81 c1       	rjmp	.+770    	; 0xf0e <vfprintf+0x3ae>
     c0c:	23 2d       	mov	r18, r3
     c0e:	20 64       	ori	r18, 0x40	; 64
     c10:	32 2e       	mov	r3, r18
     c12:	19 c0       	rjmp	.+50     	; 0xc46 <vfprintf+0xe6>
     c14:	36 fe       	sbrs	r3, 6
     c16:	06 c0       	rjmp	.+12     	; 0xc24 <vfprintf+0xc4>
     c18:	8a e0       	ldi	r24, 0x0A	; 10
     c1a:	98 9e       	mul	r9, r24
     c1c:	20 0d       	add	r18, r0
     c1e:	11 24       	eor	r1, r1
     c20:	92 2e       	mov	r9, r18
     c22:	11 c0       	rjmp	.+34     	; 0xc46 <vfprintf+0xe6>
     c24:	ea e0       	ldi	r30, 0x0A	; 10
     c26:	2e 9e       	mul	r2, r30
     c28:	20 0d       	add	r18, r0
     c2a:	11 24       	eor	r1, r1
     c2c:	22 2e       	mov	r2, r18
     c2e:	f3 2d       	mov	r31, r3
     c30:	f0 62       	ori	r31, 0x20	; 32
     c32:	3f 2e       	mov	r3, r31
     c34:	08 c0       	rjmp	.+16     	; 0xc46 <vfprintf+0xe6>
     c36:	8c 36       	cpi	r24, 0x6C	; 108
     c38:	21 f4       	brne	.+8      	; 0xc42 <vfprintf+0xe2>
     c3a:	83 2d       	mov	r24, r3
     c3c:	80 68       	ori	r24, 0x80	; 128
     c3e:	38 2e       	mov	r3, r24
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <vfprintf+0xe6>
     c42:	88 36       	cpi	r24, 0x68	; 104
     c44:	41 f4       	brne	.+16     	; 0xc56 <vfprintf+0xf6>
     c46:	f7 01       	movw	r30, r14
     c48:	93 fd       	sbrc	r25, 3
     c4a:	85 91       	lpm	r24, Z+
     c4c:	93 ff       	sbrs	r25, 3
     c4e:	81 91       	ld	r24, Z+
     c50:	7f 01       	movw	r14, r30
     c52:	81 11       	cpse	r24, r1
     c54:	b3 cf       	rjmp	.-154    	; 0xbbc <vfprintf+0x5c>
     c56:	98 2f       	mov	r25, r24
     c58:	9f 7d       	andi	r25, 0xDF	; 223
     c5a:	95 54       	subi	r25, 0x45	; 69
     c5c:	93 30       	cpi	r25, 0x03	; 3
     c5e:	28 f4       	brcc	.+10     	; 0xc6a <vfprintf+0x10a>
     c60:	0c 5f       	subi	r16, 0xFC	; 252
     c62:	1f 4f       	sbci	r17, 0xFF	; 255
     c64:	9f e3       	ldi	r25, 0x3F	; 63
     c66:	99 83       	std	Y+1, r25	; 0x01
     c68:	0d c0       	rjmp	.+26     	; 0xc84 <vfprintf+0x124>
     c6a:	83 36       	cpi	r24, 0x63	; 99
     c6c:	31 f0       	breq	.+12     	; 0xc7a <vfprintf+0x11a>
     c6e:	83 37       	cpi	r24, 0x73	; 115
     c70:	71 f0       	breq	.+28     	; 0xc8e <vfprintf+0x12e>
     c72:	83 35       	cpi	r24, 0x53	; 83
     c74:	09 f0       	breq	.+2      	; 0xc78 <vfprintf+0x118>
     c76:	59 c0       	rjmp	.+178    	; 0xd2a <vfprintf+0x1ca>
     c78:	21 c0       	rjmp	.+66     	; 0xcbc <vfprintf+0x15c>
     c7a:	f8 01       	movw	r30, r16
     c7c:	80 81       	ld	r24, Z
     c7e:	89 83       	std	Y+1, r24	; 0x01
     c80:	0e 5f       	subi	r16, 0xFE	; 254
     c82:	1f 4f       	sbci	r17, 0xFF	; 255
     c84:	88 24       	eor	r8, r8
     c86:	83 94       	inc	r8
     c88:	91 2c       	mov	r9, r1
     c8a:	53 01       	movw	r10, r6
     c8c:	13 c0       	rjmp	.+38     	; 0xcb4 <vfprintf+0x154>
     c8e:	28 01       	movw	r4, r16
     c90:	f2 e0       	ldi	r31, 0x02	; 2
     c92:	4f 0e       	add	r4, r31
     c94:	51 1c       	adc	r5, r1
     c96:	f8 01       	movw	r30, r16
     c98:	a0 80       	ld	r10, Z
     c9a:	b1 80       	ldd	r11, Z+1	; 0x01
     c9c:	36 fe       	sbrs	r3, 6
     c9e:	03 c0       	rjmp	.+6      	; 0xca6 <vfprintf+0x146>
     ca0:	69 2d       	mov	r22, r9
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <vfprintf+0x14a>
     ca6:	6f ef       	ldi	r22, 0xFF	; 255
     ca8:	7f ef       	ldi	r23, 0xFF	; 255
     caa:	c5 01       	movw	r24, r10
     cac:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <strnlen>
     cb0:	4c 01       	movw	r8, r24
     cb2:	82 01       	movw	r16, r4
     cb4:	f3 2d       	mov	r31, r3
     cb6:	ff 77       	andi	r31, 0x7F	; 127
     cb8:	3f 2e       	mov	r3, r31
     cba:	16 c0       	rjmp	.+44     	; 0xce8 <vfprintf+0x188>
     cbc:	28 01       	movw	r4, r16
     cbe:	22 e0       	ldi	r18, 0x02	; 2
     cc0:	42 0e       	add	r4, r18
     cc2:	51 1c       	adc	r5, r1
     cc4:	f8 01       	movw	r30, r16
     cc6:	a0 80       	ld	r10, Z
     cc8:	b1 80       	ldd	r11, Z+1	; 0x01
     cca:	36 fe       	sbrs	r3, 6
     ccc:	03 c0       	rjmp	.+6      	; 0xcd4 <vfprintf+0x174>
     cce:	69 2d       	mov	r22, r9
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <vfprintf+0x178>
     cd4:	6f ef       	ldi	r22, 0xFF	; 255
     cd6:	7f ef       	ldi	r23, 0xFF	; 255
     cd8:	c5 01       	movw	r24, r10
     cda:	0e 94 ce 08 	call	0x119c	; 0x119c <strnlen_P>
     cde:	4c 01       	movw	r8, r24
     ce0:	f3 2d       	mov	r31, r3
     ce2:	f0 68       	ori	r31, 0x80	; 128
     ce4:	3f 2e       	mov	r3, r31
     ce6:	82 01       	movw	r16, r4
     ce8:	33 fc       	sbrc	r3, 3
     cea:	1b c0       	rjmp	.+54     	; 0xd22 <vfprintf+0x1c2>
     cec:	82 2d       	mov	r24, r2
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	88 16       	cp	r8, r24
     cf2:	99 06       	cpc	r9, r25
     cf4:	b0 f4       	brcc	.+44     	; 0xd22 <vfprintf+0x1c2>
     cf6:	b6 01       	movw	r22, r12
     cf8:	80 e2       	ldi	r24, 0x20	; 32
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
     d00:	2a 94       	dec	r2
     d02:	f4 cf       	rjmp	.-24     	; 0xcec <vfprintf+0x18c>
     d04:	f5 01       	movw	r30, r10
     d06:	37 fc       	sbrc	r3, 7
     d08:	85 91       	lpm	r24, Z+
     d0a:	37 fe       	sbrs	r3, 7
     d0c:	81 91       	ld	r24, Z+
     d0e:	5f 01       	movw	r10, r30
     d10:	b6 01       	movw	r22, r12
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
     d18:	21 10       	cpse	r2, r1
     d1a:	2a 94       	dec	r2
     d1c:	21 e0       	ldi	r18, 0x01	; 1
     d1e:	82 1a       	sub	r8, r18
     d20:	91 08       	sbc	r9, r1
     d22:	81 14       	cp	r8, r1
     d24:	91 04       	cpc	r9, r1
     d26:	71 f7       	brne	.-36     	; 0xd04 <vfprintf+0x1a4>
     d28:	e8 c0       	rjmp	.+464    	; 0xefa <vfprintf+0x39a>
     d2a:	84 36       	cpi	r24, 0x64	; 100
     d2c:	11 f0       	breq	.+4      	; 0xd32 <vfprintf+0x1d2>
     d2e:	89 36       	cpi	r24, 0x69	; 105
     d30:	41 f5       	brne	.+80     	; 0xd82 <vfprintf+0x222>
     d32:	f8 01       	movw	r30, r16
     d34:	37 fe       	sbrs	r3, 7
     d36:	07 c0       	rjmp	.+14     	; 0xd46 <vfprintf+0x1e6>
     d38:	60 81       	ld	r22, Z
     d3a:	71 81       	ldd	r23, Z+1	; 0x01
     d3c:	82 81       	ldd	r24, Z+2	; 0x02
     d3e:	93 81       	ldd	r25, Z+3	; 0x03
     d40:	0c 5f       	subi	r16, 0xFC	; 252
     d42:	1f 4f       	sbci	r17, 0xFF	; 255
     d44:	08 c0       	rjmp	.+16     	; 0xd56 <vfprintf+0x1f6>
     d46:	60 81       	ld	r22, Z
     d48:	71 81       	ldd	r23, Z+1	; 0x01
     d4a:	07 2e       	mov	r0, r23
     d4c:	00 0c       	add	r0, r0
     d4e:	88 0b       	sbc	r24, r24
     d50:	99 0b       	sbc	r25, r25
     d52:	0e 5f       	subi	r16, 0xFE	; 254
     d54:	1f 4f       	sbci	r17, 0xFF	; 255
     d56:	f3 2d       	mov	r31, r3
     d58:	ff 76       	andi	r31, 0x6F	; 111
     d5a:	3f 2e       	mov	r3, r31
     d5c:	97 ff       	sbrs	r25, 7
     d5e:	09 c0       	rjmp	.+18     	; 0xd72 <vfprintf+0x212>
     d60:	90 95       	com	r25
     d62:	80 95       	com	r24
     d64:	70 95       	com	r23
     d66:	61 95       	neg	r22
     d68:	7f 4f       	sbci	r23, 0xFF	; 255
     d6a:	8f 4f       	sbci	r24, 0xFF	; 255
     d6c:	9f 4f       	sbci	r25, 0xFF	; 255
     d6e:	f0 68       	ori	r31, 0x80	; 128
     d70:	3f 2e       	mov	r3, r31
     d72:	2a e0       	ldi	r18, 0x0A	; 10
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	a3 01       	movw	r20, r6
     d78:	0e 94 27 09 	call	0x124e	; 0x124e <__ultoa_invert>
     d7c:	88 2e       	mov	r8, r24
     d7e:	86 18       	sub	r8, r6
     d80:	45 c0       	rjmp	.+138    	; 0xe0c <vfprintf+0x2ac>
     d82:	85 37       	cpi	r24, 0x75	; 117
     d84:	31 f4       	brne	.+12     	; 0xd92 <vfprintf+0x232>
     d86:	23 2d       	mov	r18, r3
     d88:	2f 7e       	andi	r18, 0xEF	; 239
     d8a:	b2 2e       	mov	r11, r18
     d8c:	2a e0       	ldi	r18, 0x0A	; 10
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	25 c0       	rjmp	.+74     	; 0xddc <vfprintf+0x27c>
     d92:	93 2d       	mov	r25, r3
     d94:	99 7f       	andi	r25, 0xF9	; 249
     d96:	b9 2e       	mov	r11, r25
     d98:	8f 36       	cpi	r24, 0x6F	; 111
     d9a:	c1 f0       	breq	.+48     	; 0xdcc <vfprintf+0x26c>
     d9c:	18 f4       	brcc	.+6      	; 0xda4 <vfprintf+0x244>
     d9e:	88 35       	cpi	r24, 0x58	; 88
     da0:	79 f0       	breq	.+30     	; 0xdc0 <vfprintf+0x260>
     da2:	b5 c0       	rjmp	.+362    	; 0xf0e <vfprintf+0x3ae>
     da4:	80 37       	cpi	r24, 0x70	; 112
     da6:	19 f0       	breq	.+6      	; 0xdae <vfprintf+0x24e>
     da8:	88 37       	cpi	r24, 0x78	; 120
     daa:	21 f0       	breq	.+8      	; 0xdb4 <vfprintf+0x254>
     dac:	b0 c0       	rjmp	.+352    	; 0xf0e <vfprintf+0x3ae>
     dae:	e9 2f       	mov	r30, r25
     db0:	e0 61       	ori	r30, 0x10	; 16
     db2:	be 2e       	mov	r11, r30
     db4:	b4 fe       	sbrs	r11, 4
     db6:	0d c0       	rjmp	.+26     	; 0xdd2 <vfprintf+0x272>
     db8:	fb 2d       	mov	r31, r11
     dba:	f4 60       	ori	r31, 0x04	; 4
     dbc:	bf 2e       	mov	r11, r31
     dbe:	09 c0       	rjmp	.+18     	; 0xdd2 <vfprintf+0x272>
     dc0:	34 fe       	sbrs	r3, 4
     dc2:	0a c0       	rjmp	.+20     	; 0xdd8 <vfprintf+0x278>
     dc4:	29 2f       	mov	r18, r25
     dc6:	26 60       	ori	r18, 0x06	; 6
     dc8:	b2 2e       	mov	r11, r18
     dca:	06 c0       	rjmp	.+12     	; 0xdd8 <vfprintf+0x278>
     dcc:	28 e0       	ldi	r18, 0x08	; 8
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	05 c0       	rjmp	.+10     	; 0xddc <vfprintf+0x27c>
     dd2:	20 e1       	ldi	r18, 0x10	; 16
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <vfprintf+0x27c>
     dd8:	20 e1       	ldi	r18, 0x10	; 16
     dda:	32 e0       	ldi	r19, 0x02	; 2
     ddc:	f8 01       	movw	r30, r16
     dde:	b7 fe       	sbrs	r11, 7
     de0:	07 c0       	rjmp	.+14     	; 0xdf0 <vfprintf+0x290>
     de2:	60 81       	ld	r22, Z
     de4:	71 81       	ldd	r23, Z+1	; 0x01
     de6:	82 81       	ldd	r24, Z+2	; 0x02
     de8:	93 81       	ldd	r25, Z+3	; 0x03
     dea:	0c 5f       	subi	r16, 0xFC	; 252
     dec:	1f 4f       	sbci	r17, 0xFF	; 255
     dee:	06 c0       	rjmp	.+12     	; 0xdfc <vfprintf+0x29c>
     df0:	60 81       	ld	r22, Z
     df2:	71 81       	ldd	r23, Z+1	; 0x01
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	0e 5f       	subi	r16, 0xFE	; 254
     dfa:	1f 4f       	sbci	r17, 0xFF	; 255
     dfc:	a3 01       	movw	r20, r6
     dfe:	0e 94 27 09 	call	0x124e	; 0x124e <__ultoa_invert>
     e02:	88 2e       	mov	r8, r24
     e04:	86 18       	sub	r8, r6
     e06:	fb 2d       	mov	r31, r11
     e08:	ff 77       	andi	r31, 0x7F	; 127
     e0a:	3f 2e       	mov	r3, r31
     e0c:	36 fe       	sbrs	r3, 6
     e0e:	0d c0       	rjmp	.+26     	; 0xe2a <vfprintf+0x2ca>
     e10:	23 2d       	mov	r18, r3
     e12:	2e 7f       	andi	r18, 0xFE	; 254
     e14:	a2 2e       	mov	r10, r18
     e16:	89 14       	cp	r8, r9
     e18:	58 f4       	brcc	.+22     	; 0xe30 <vfprintf+0x2d0>
     e1a:	34 fe       	sbrs	r3, 4
     e1c:	0b c0       	rjmp	.+22     	; 0xe34 <vfprintf+0x2d4>
     e1e:	32 fc       	sbrc	r3, 2
     e20:	09 c0       	rjmp	.+18     	; 0xe34 <vfprintf+0x2d4>
     e22:	83 2d       	mov	r24, r3
     e24:	8e 7e       	andi	r24, 0xEE	; 238
     e26:	a8 2e       	mov	r10, r24
     e28:	05 c0       	rjmp	.+10     	; 0xe34 <vfprintf+0x2d4>
     e2a:	b8 2c       	mov	r11, r8
     e2c:	a3 2c       	mov	r10, r3
     e2e:	03 c0       	rjmp	.+6      	; 0xe36 <vfprintf+0x2d6>
     e30:	b8 2c       	mov	r11, r8
     e32:	01 c0       	rjmp	.+2      	; 0xe36 <vfprintf+0x2d6>
     e34:	b9 2c       	mov	r11, r9
     e36:	a4 fe       	sbrs	r10, 4
     e38:	0f c0       	rjmp	.+30     	; 0xe58 <vfprintf+0x2f8>
     e3a:	fe 01       	movw	r30, r28
     e3c:	e8 0d       	add	r30, r8
     e3e:	f1 1d       	adc	r31, r1
     e40:	80 81       	ld	r24, Z
     e42:	80 33       	cpi	r24, 0x30	; 48
     e44:	21 f4       	brne	.+8      	; 0xe4e <vfprintf+0x2ee>
     e46:	9a 2d       	mov	r25, r10
     e48:	99 7e       	andi	r25, 0xE9	; 233
     e4a:	a9 2e       	mov	r10, r25
     e4c:	09 c0       	rjmp	.+18     	; 0xe60 <vfprintf+0x300>
     e4e:	a2 fe       	sbrs	r10, 2
     e50:	06 c0       	rjmp	.+12     	; 0xe5e <vfprintf+0x2fe>
     e52:	b3 94       	inc	r11
     e54:	b3 94       	inc	r11
     e56:	04 c0       	rjmp	.+8      	; 0xe60 <vfprintf+0x300>
     e58:	8a 2d       	mov	r24, r10
     e5a:	86 78       	andi	r24, 0x86	; 134
     e5c:	09 f0       	breq	.+2      	; 0xe60 <vfprintf+0x300>
     e5e:	b3 94       	inc	r11
     e60:	a3 fc       	sbrc	r10, 3
     e62:	11 c0       	rjmp	.+34     	; 0xe86 <vfprintf+0x326>
     e64:	a0 fe       	sbrs	r10, 0
     e66:	06 c0       	rjmp	.+12     	; 0xe74 <vfprintf+0x314>
     e68:	b2 14       	cp	r11, r2
     e6a:	88 f4       	brcc	.+34     	; 0xe8e <vfprintf+0x32e>
     e6c:	28 0c       	add	r2, r8
     e6e:	92 2c       	mov	r9, r2
     e70:	9b 18       	sub	r9, r11
     e72:	0e c0       	rjmp	.+28     	; 0xe90 <vfprintf+0x330>
     e74:	b2 14       	cp	r11, r2
     e76:	60 f4       	brcc	.+24     	; 0xe90 <vfprintf+0x330>
     e78:	b6 01       	movw	r22, r12
     e7a:	80 e2       	ldi	r24, 0x20	; 32
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
     e82:	b3 94       	inc	r11
     e84:	f7 cf       	rjmp	.-18     	; 0xe74 <vfprintf+0x314>
     e86:	b2 14       	cp	r11, r2
     e88:	18 f4       	brcc	.+6      	; 0xe90 <vfprintf+0x330>
     e8a:	2b 18       	sub	r2, r11
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <vfprintf+0x332>
     e8e:	98 2c       	mov	r9, r8
     e90:	21 2c       	mov	r2, r1
     e92:	a4 fe       	sbrs	r10, 4
     e94:	10 c0       	rjmp	.+32     	; 0xeb6 <vfprintf+0x356>
     e96:	b6 01       	movw	r22, r12
     e98:	80 e3       	ldi	r24, 0x30	; 48
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
     ea0:	a2 fe       	sbrs	r10, 2
     ea2:	17 c0       	rjmp	.+46     	; 0xed2 <vfprintf+0x372>
     ea4:	a1 fc       	sbrc	r10, 1
     ea6:	03 c0       	rjmp	.+6      	; 0xeae <vfprintf+0x34e>
     ea8:	88 e7       	ldi	r24, 0x78	; 120
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <vfprintf+0x352>
     eae:	88 e5       	ldi	r24, 0x58	; 88
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	b6 01       	movw	r22, r12
     eb4:	0c c0       	rjmp	.+24     	; 0xece <vfprintf+0x36e>
     eb6:	8a 2d       	mov	r24, r10
     eb8:	86 78       	andi	r24, 0x86	; 134
     eba:	59 f0       	breq	.+22     	; 0xed2 <vfprintf+0x372>
     ebc:	a1 fe       	sbrs	r10, 1
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <vfprintf+0x364>
     ec0:	8b e2       	ldi	r24, 0x2B	; 43
     ec2:	01 c0       	rjmp	.+2      	; 0xec6 <vfprintf+0x366>
     ec4:	80 e2       	ldi	r24, 0x20	; 32
     ec6:	a7 fc       	sbrc	r10, 7
     ec8:	8d e2       	ldi	r24, 0x2D	; 45
     eca:	b6 01       	movw	r22, r12
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
     ed2:	89 14       	cp	r8, r9
     ed4:	38 f4       	brcc	.+14     	; 0xee4 <vfprintf+0x384>
     ed6:	b6 01       	movw	r22, r12
     ed8:	80 e3       	ldi	r24, 0x30	; 48
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
     ee0:	9a 94       	dec	r9
     ee2:	f7 cf       	rjmp	.-18     	; 0xed2 <vfprintf+0x372>
     ee4:	8a 94       	dec	r8
     ee6:	f3 01       	movw	r30, r6
     ee8:	e8 0d       	add	r30, r8
     eea:	f1 1d       	adc	r31, r1
     eec:	80 81       	ld	r24, Z
     eee:	b6 01       	movw	r22, r12
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
     ef6:	81 10       	cpse	r8, r1
     ef8:	f5 cf       	rjmp	.-22     	; 0xee4 <vfprintf+0x384>
     efa:	22 20       	and	r2, r2
     efc:	09 f4       	brne	.+2      	; 0xf00 <vfprintf+0x3a0>
     efe:	42 ce       	rjmp	.-892    	; 0xb84 <vfprintf+0x24>
     f00:	b6 01       	movw	r22, r12
     f02:	80 e2       	ldi	r24, 0x20	; 32
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
     f0a:	2a 94       	dec	r2
     f0c:	f6 cf       	rjmp	.-20     	; 0xefa <vfprintf+0x39a>
     f0e:	f6 01       	movw	r30, r12
     f10:	86 81       	ldd	r24, Z+6	; 0x06
     f12:	97 81       	ldd	r25, Z+7	; 0x07
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <vfprintf+0x3ba>
     f16:	8f ef       	ldi	r24, 0xFF	; 255
     f18:	9f ef       	ldi	r25, 0xFF	; 255
     f1a:	2b 96       	adiw	r28, 0x0b	; 11
     f1c:	e2 e1       	ldi	r30, 0x12	; 18
     f1e:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <__epilogue_restores__>

00000f22 <calloc>:
     f22:	0f 93       	push	r16
     f24:	1f 93       	push	r17
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	86 9f       	mul	r24, r22
     f2c:	80 01       	movw	r16, r0
     f2e:	87 9f       	mul	r24, r23
     f30:	10 0d       	add	r17, r0
     f32:	96 9f       	mul	r25, r22
     f34:	10 0d       	add	r17, r0
     f36:	11 24       	eor	r1, r1
     f38:	c8 01       	movw	r24, r16
     f3a:	0e 94 ad 07 	call	0xf5a	; 0xf5a <malloc>
     f3e:	ec 01       	movw	r28, r24
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	29 f0       	breq	.+10     	; 0xf4e <calloc+0x2c>
     f44:	a8 01       	movw	r20, r16
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <memset>
     f4e:	ce 01       	movw	r24, r28
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	1f 91       	pop	r17
     f56:	0f 91       	pop	r16
     f58:	08 95       	ret

00000f5a <malloc>:
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	82 30       	cpi	r24, 0x02	; 2
     f64:	91 05       	cpc	r25, r1
     f66:	10 f4       	brcc	.+4      	; 0xf6c <malloc+0x12>
     f68:	82 e0       	ldi	r24, 0x02	; 2
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <__flp>
     f70:	f0 91 7a 02 	lds	r31, 0x027A	; 0x80027a <__flp+0x1>
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	a0 e0       	ldi	r26, 0x00	; 0
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	30 97       	sbiw	r30, 0x00	; 0
     f7e:	19 f1       	breq	.+70     	; 0xfc6 <malloc+0x6c>
     f80:	40 81       	ld	r20, Z
     f82:	51 81       	ldd	r21, Z+1	; 0x01
     f84:	02 81       	ldd	r16, Z+2	; 0x02
     f86:	13 81       	ldd	r17, Z+3	; 0x03
     f88:	48 17       	cp	r20, r24
     f8a:	59 07       	cpc	r21, r25
     f8c:	c8 f0       	brcs	.+50     	; 0xfc0 <malloc+0x66>
     f8e:	84 17       	cp	r24, r20
     f90:	95 07       	cpc	r25, r21
     f92:	69 f4       	brne	.+26     	; 0xfae <malloc+0x54>
     f94:	10 97       	sbiw	r26, 0x00	; 0
     f96:	31 f0       	breq	.+12     	; 0xfa4 <malloc+0x4a>
     f98:	12 96       	adiw	r26, 0x02	; 2
     f9a:	0c 93       	st	X, r16
     f9c:	12 97       	sbiw	r26, 0x02	; 2
     f9e:	13 96       	adiw	r26, 0x03	; 3
     fa0:	1c 93       	st	X, r17
     fa2:	27 c0       	rjmp	.+78     	; 0xff2 <malloc+0x98>
     fa4:	00 93 79 02 	sts	0x0279, r16	; 0x800279 <__flp>
     fa8:	10 93 7a 02 	sts	0x027A, r17	; 0x80027a <__flp+0x1>
     fac:	22 c0       	rjmp	.+68     	; 0xff2 <malloc+0x98>
     fae:	21 15       	cp	r18, r1
     fb0:	31 05       	cpc	r19, r1
     fb2:	19 f0       	breq	.+6      	; 0xfba <malloc+0x60>
     fb4:	42 17       	cp	r20, r18
     fb6:	53 07       	cpc	r21, r19
     fb8:	18 f4       	brcc	.+6      	; 0xfc0 <malloc+0x66>
     fba:	9a 01       	movw	r18, r20
     fbc:	bd 01       	movw	r22, r26
     fbe:	ef 01       	movw	r28, r30
     fc0:	df 01       	movw	r26, r30
     fc2:	f8 01       	movw	r30, r16
     fc4:	db cf       	rjmp	.-74     	; 0xf7c <malloc+0x22>
     fc6:	21 15       	cp	r18, r1
     fc8:	31 05       	cpc	r19, r1
     fca:	f9 f0       	breq	.+62     	; 0x100a <malloc+0xb0>
     fcc:	28 1b       	sub	r18, r24
     fce:	39 0b       	sbc	r19, r25
     fd0:	24 30       	cpi	r18, 0x04	; 4
     fd2:	31 05       	cpc	r19, r1
     fd4:	80 f4       	brcc	.+32     	; 0xff6 <malloc+0x9c>
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	9b 81       	ldd	r25, Y+3	; 0x03
     fda:	61 15       	cp	r22, r1
     fdc:	71 05       	cpc	r23, r1
     fde:	21 f0       	breq	.+8      	; 0xfe8 <malloc+0x8e>
     fe0:	fb 01       	movw	r30, r22
     fe2:	93 83       	std	Z+3, r25	; 0x03
     fe4:	82 83       	std	Z+2, r24	; 0x02
     fe6:	04 c0       	rjmp	.+8      	; 0xff0 <malloc+0x96>
     fe8:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <__flp+0x1>
     fec:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <__flp>
     ff0:	fe 01       	movw	r30, r28
     ff2:	32 96       	adiw	r30, 0x02	; 2
     ff4:	44 c0       	rjmp	.+136    	; 0x107e <malloc+0x124>
     ff6:	fe 01       	movw	r30, r28
     ff8:	e2 0f       	add	r30, r18
     ffa:	f3 1f       	adc	r31, r19
     ffc:	81 93       	st	Z+, r24
     ffe:	91 93       	st	Z+, r25
    1000:	22 50       	subi	r18, 0x02	; 2
    1002:	31 09       	sbc	r19, r1
    1004:	39 83       	std	Y+1, r19	; 0x01
    1006:	28 83       	st	Y, r18
    1008:	3a c0       	rjmp	.+116    	; 0x107e <malloc+0x124>
    100a:	20 91 77 02 	lds	r18, 0x0277	; 0x800277 <__brkval>
    100e:	30 91 78 02 	lds	r19, 0x0278	; 0x800278 <__brkval+0x1>
    1012:	23 2b       	or	r18, r19
    1014:	41 f4       	brne	.+16     	; 0x1026 <malloc+0xcc>
    1016:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    101a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    101e:	30 93 78 02 	sts	0x0278, r19	; 0x800278 <__brkval+0x1>
    1022:	20 93 77 02 	sts	0x0277, r18	; 0x800277 <__brkval>
    1026:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    102a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    102e:	21 15       	cp	r18, r1
    1030:	31 05       	cpc	r19, r1
    1032:	41 f4       	brne	.+16     	; 0x1044 <malloc+0xea>
    1034:	2d b7       	in	r18, 0x3d	; 61
    1036:	3e b7       	in	r19, 0x3e	; 62
    1038:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    103c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1040:	24 1b       	sub	r18, r20
    1042:	35 0b       	sbc	r19, r21
    1044:	e0 91 77 02 	lds	r30, 0x0277	; 0x800277 <__brkval>
    1048:	f0 91 78 02 	lds	r31, 0x0278	; 0x800278 <__brkval+0x1>
    104c:	e2 17       	cp	r30, r18
    104e:	f3 07       	cpc	r31, r19
    1050:	a0 f4       	brcc	.+40     	; 0x107a <malloc+0x120>
    1052:	2e 1b       	sub	r18, r30
    1054:	3f 0b       	sbc	r19, r31
    1056:	28 17       	cp	r18, r24
    1058:	39 07       	cpc	r19, r25
    105a:	78 f0       	brcs	.+30     	; 0x107a <malloc+0x120>
    105c:	ac 01       	movw	r20, r24
    105e:	4e 5f       	subi	r20, 0xFE	; 254
    1060:	5f 4f       	sbci	r21, 0xFF	; 255
    1062:	24 17       	cp	r18, r20
    1064:	35 07       	cpc	r19, r21
    1066:	48 f0       	brcs	.+18     	; 0x107a <malloc+0x120>
    1068:	4e 0f       	add	r20, r30
    106a:	5f 1f       	adc	r21, r31
    106c:	50 93 78 02 	sts	0x0278, r21	; 0x800278 <__brkval+0x1>
    1070:	40 93 77 02 	sts	0x0277, r20	; 0x800277 <__brkval>
    1074:	81 93       	st	Z+, r24
    1076:	91 93       	st	Z+, r25
    1078:	02 c0       	rjmp	.+4      	; 0x107e <malloc+0x124>
    107a:	e0 e0       	ldi	r30, 0x00	; 0
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	cf 01       	movw	r24, r30
    1080:	df 91       	pop	r29
    1082:	cf 91       	pop	r28
    1084:	1f 91       	pop	r17
    1086:	0f 91       	pop	r16
    1088:	08 95       	ret

0000108a <free>:
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	09 f4       	brne	.+2      	; 0x1094 <free+0xa>
    1092:	81 c0       	rjmp	.+258    	; 0x1196 <free+0x10c>
    1094:	fc 01       	movw	r30, r24
    1096:	32 97       	sbiw	r30, 0x02	; 2
    1098:	13 82       	std	Z+3, r1	; 0x03
    109a:	12 82       	std	Z+2, r1	; 0x02
    109c:	a0 91 79 02 	lds	r26, 0x0279	; 0x800279 <__flp>
    10a0:	b0 91 7a 02 	lds	r27, 0x027A	; 0x80027a <__flp+0x1>
    10a4:	10 97       	sbiw	r26, 0x00	; 0
    10a6:	81 f4       	brne	.+32     	; 0x10c8 <free+0x3e>
    10a8:	20 81       	ld	r18, Z
    10aa:	31 81       	ldd	r19, Z+1	; 0x01
    10ac:	82 0f       	add	r24, r18
    10ae:	93 1f       	adc	r25, r19
    10b0:	20 91 77 02 	lds	r18, 0x0277	; 0x800277 <__brkval>
    10b4:	30 91 78 02 	lds	r19, 0x0278	; 0x800278 <__brkval+0x1>
    10b8:	28 17       	cp	r18, r24
    10ba:	39 07       	cpc	r19, r25
    10bc:	51 f5       	brne	.+84     	; 0x1112 <free+0x88>
    10be:	f0 93 78 02 	sts	0x0278, r31	; 0x800278 <__brkval+0x1>
    10c2:	e0 93 77 02 	sts	0x0277, r30	; 0x800277 <__brkval>
    10c6:	67 c0       	rjmp	.+206    	; 0x1196 <free+0x10c>
    10c8:	ed 01       	movw	r28, r26
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	ce 17       	cp	r28, r30
    10d0:	df 07       	cpc	r29, r31
    10d2:	40 f4       	brcc	.+16     	; 0x10e4 <free+0x5a>
    10d4:	4a 81       	ldd	r20, Y+2	; 0x02
    10d6:	5b 81       	ldd	r21, Y+3	; 0x03
    10d8:	9e 01       	movw	r18, r28
    10da:	41 15       	cp	r20, r1
    10dc:	51 05       	cpc	r21, r1
    10de:	f1 f0       	breq	.+60     	; 0x111c <free+0x92>
    10e0:	ea 01       	movw	r28, r20
    10e2:	f5 cf       	rjmp	.-22     	; 0x10ce <free+0x44>
    10e4:	d3 83       	std	Z+3, r29	; 0x03
    10e6:	c2 83       	std	Z+2, r28	; 0x02
    10e8:	40 81       	ld	r20, Z
    10ea:	51 81       	ldd	r21, Z+1	; 0x01
    10ec:	84 0f       	add	r24, r20
    10ee:	95 1f       	adc	r25, r21
    10f0:	c8 17       	cp	r28, r24
    10f2:	d9 07       	cpc	r29, r25
    10f4:	59 f4       	brne	.+22     	; 0x110c <free+0x82>
    10f6:	88 81       	ld	r24, Y
    10f8:	99 81       	ldd	r25, Y+1	; 0x01
    10fa:	84 0f       	add	r24, r20
    10fc:	95 1f       	adc	r25, r21
    10fe:	02 96       	adiw	r24, 0x02	; 2
    1100:	91 83       	std	Z+1, r25	; 0x01
    1102:	80 83       	st	Z, r24
    1104:	8a 81       	ldd	r24, Y+2	; 0x02
    1106:	9b 81       	ldd	r25, Y+3	; 0x03
    1108:	93 83       	std	Z+3, r25	; 0x03
    110a:	82 83       	std	Z+2, r24	; 0x02
    110c:	21 15       	cp	r18, r1
    110e:	31 05       	cpc	r19, r1
    1110:	29 f4       	brne	.+10     	; 0x111c <free+0x92>
    1112:	f0 93 7a 02 	sts	0x027A, r31	; 0x80027a <__flp+0x1>
    1116:	e0 93 79 02 	sts	0x0279, r30	; 0x800279 <__flp>
    111a:	3d c0       	rjmp	.+122    	; 0x1196 <free+0x10c>
    111c:	e9 01       	movw	r28, r18
    111e:	fb 83       	std	Y+3, r31	; 0x03
    1120:	ea 83       	std	Y+2, r30	; 0x02
    1122:	49 91       	ld	r20, Y+
    1124:	59 91       	ld	r21, Y+
    1126:	c4 0f       	add	r28, r20
    1128:	d5 1f       	adc	r29, r21
    112a:	ec 17       	cp	r30, r28
    112c:	fd 07       	cpc	r31, r29
    112e:	61 f4       	brne	.+24     	; 0x1148 <free+0xbe>
    1130:	80 81       	ld	r24, Z
    1132:	91 81       	ldd	r25, Z+1	; 0x01
    1134:	84 0f       	add	r24, r20
    1136:	95 1f       	adc	r25, r21
    1138:	02 96       	adiw	r24, 0x02	; 2
    113a:	e9 01       	movw	r28, r18
    113c:	99 83       	std	Y+1, r25	; 0x01
    113e:	88 83       	st	Y, r24
    1140:	82 81       	ldd	r24, Z+2	; 0x02
    1142:	93 81       	ldd	r25, Z+3	; 0x03
    1144:	9b 83       	std	Y+3, r25	; 0x03
    1146:	8a 83       	std	Y+2, r24	; 0x02
    1148:	e0 e0       	ldi	r30, 0x00	; 0
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	12 96       	adiw	r26, 0x02	; 2
    114e:	8d 91       	ld	r24, X+
    1150:	9c 91       	ld	r25, X
    1152:	13 97       	sbiw	r26, 0x03	; 3
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	19 f0       	breq	.+6      	; 0x115e <free+0xd4>
    1158:	fd 01       	movw	r30, r26
    115a:	dc 01       	movw	r26, r24
    115c:	f7 cf       	rjmp	.-18     	; 0x114c <free+0xc2>
    115e:	8d 91       	ld	r24, X+
    1160:	9c 91       	ld	r25, X
    1162:	11 97       	sbiw	r26, 0x01	; 1
    1164:	9d 01       	movw	r18, r26
    1166:	2e 5f       	subi	r18, 0xFE	; 254
    1168:	3f 4f       	sbci	r19, 0xFF	; 255
    116a:	82 0f       	add	r24, r18
    116c:	93 1f       	adc	r25, r19
    116e:	20 91 77 02 	lds	r18, 0x0277	; 0x800277 <__brkval>
    1172:	30 91 78 02 	lds	r19, 0x0278	; 0x800278 <__brkval+0x1>
    1176:	28 17       	cp	r18, r24
    1178:	39 07       	cpc	r19, r25
    117a:	69 f4       	brne	.+26     	; 0x1196 <free+0x10c>
    117c:	30 97       	sbiw	r30, 0x00	; 0
    117e:	29 f4       	brne	.+10     	; 0x118a <free+0x100>
    1180:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <__flp+0x1>
    1184:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <__flp>
    1188:	02 c0       	rjmp	.+4      	; 0x118e <free+0x104>
    118a:	13 82       	std	Z+3, r1	; 0x03
    118c:	12 82       	std	Z+2, r1	; 0x02
    118e:	b0 93 78 02 	sts	0x0278, r27	; 0x800278 <__brkval+0x1>
    1192:	a0 93 77 02 	sts	0x0277, r26	; 0x800277 <__brkval>
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	08 95       	ret

0000119c <strnlen_P>:
    119c:	fc 01       	movw	r30, r24
    119e:	05 90       	lpm	r0, Z+
    11a0:	61 50       	subi	r22, 0x01	; 1
    11a2:	70 40       	sbci	r23, 0x00	; 0
    11a4:	01 10       	cpse	r0, r1
    11a6:	d8 f7       	brcc	.-10     	; 0x119e <strnlen_P+0x2>
    11a8:	80 95       	com	r24
    11aa:	90 95       	com	r25
    11ac:	8e 0f       	add	r24, r30
    11ae:	9f 1f       	adc	r25, r31
    11b0:	08 95       	ret

000011b2 <memset>:
    11b2:	dc 01       	movw	r26, r24
    11b4:	01 c0       	rjmp	.+2      	; 0x11b8 <memset+0x6>
    11b6:	6d 93       	st	X+, r22
    11b8:	41 50       	subi	r20, 0x01	; 1
    11ba:	50 40       	sbci	r21, 0x00	; 0
    11bc:	e0 f7       	brcc	.-8      	; 0x11b6 <memset+0x4>
    11be:	08 95       	ret

000011c0 <strnlen>:
    11c0:	fc 01       	movw	r30, r24
    11c2:	61 50       	subi	r22, 0x01	; 1
    11c4:	70 40       	sbci	r23, 0x00	; 0
    11c6:	01 90       	ld	r0, Z+
    11c8:	01 10       	cpse	r0, r1
    11ca:	d8 f7       	brcc	.-10     	; 0x11c2 <strnlen+0x2>
    11cc:	80 95       	com	r24
    11ce:	90 95       	com	r25
    11d0:	8e 0f       	add	r24, r30
    11d2:	9f 1f       	adc	r25, r31
    11d4:	08 95       	ret

000011d6 <fputc>:
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	fb 01       	movw	r30, r22
    11e0:	23 81       	ldd	r18, Z+3	; 0x03
    11e2:	21 fd       	sbrc	r18, 1
    11e4:	03 c0       	rjmp	.+6      	; 0x11ec <fputc+0x16>
    11e6:	8f ef       	ldi	r24, 0xFF	; 255
    11e8:	9f ef       	ldi	r25, 0xFF	; 255
    11ea:	2c c0       	rjmp	.+88     	; 0x1244 <fputc+0x6e>
    11ec:	22 ff       	sbrs	r18, 2
    11ee:	16 c0       	rjmp	.+44     	; 0x121c <fputc+0x46>
    11f0:	46 81       	ldd	r20, Z+6	; 0x06
    11f2:	57 81       	ldd	r21, Z+7	; 0x07
    11f4:	24 81       	ldd	r18, Z+4	; 0x04
    11f6:	35 81       	ldd	r19, Z+5	; 0x05
    11f8:	42 17       	cp	r20, r18
    11fa:	53 07       	cpc	r21, r19
    11fc:	44 f4       	brge	.+16     	; 0x120e <fputc+0x38>
    11fe:	a0 81       	ld	r26, Z
    1200:	b1 81       	ldd	r27, Z+1	; 0x01
    1202:	9d 01       	movw	r18, r26
    1204:	2f 5f       	subi	r18, 0xFF	; 255
    1206:	3f 4f       	sbci	r19, 0xFF	; 255
    1208:	31 83       	std	Z+1, r19	; 0x01
    120a:	20 83       	st	Z, r18
    120c:	8c 93       	st	X, r24
    120e:	26 81       	ldd	r18, Z+6	; 0x06
    1210:	37 81       	ldd	r19, Z+7	; 0x07
    1212:	2f 5f       	subi	r18, 0xFF	; 255
    1214:	3f 4f       	sbci	r19, 0xFF	; 255
    1216:	37 83       	std	Z+7, r19	; 0x07
    1218:	26 83       	std	Z+6, r18	; 0x06
    121a:	14 c0       	rjmp	.+40     	; 0x1244 <fputc+0x6e>
    121c:	8b 01       	movw	r16, r22
    121e:	ec 01       	movw	r28, r24
    1220:	fb 01       	movw	r30, r22
    1222:	00 84       	ldd	r0, Z+8	; 0x08
    1224:	f1 85       	ldd	r31, Z+9	; 0x09
    1226:	e0 2d       	mov	r30, r0
    1228:	09 95       	icall
    122a:	89 2b       	or	r24, r25
    122c:	e1 f6       	brne	.-72     	; 0x11e6 <fputc+0x10>
    122e:	d8 01       	movw	r26, r16
    1230:	16 96       	adiw	r26, 0x06	; 6
    1232:	8d 91       	ld	r24, X+
    1234:	9c 91       	ld	r25, X
    1236:	17 97       	sbiw	r26, 0x07	; 7
    1238:	01 96       	adiw	r24, 0x01	; 1
    123a:	17 96       	adiw	r26, 0x07	; 7
    123c:	9c 93       	st	X, r25
    123e:	8e 93       	st	-X, r24
    1240:	16 97       	sbiw	r26, 0x06	; 6
    1242:	ce 01       	movw	r24, r28
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	1f 91       	pop	r17
    124a:	0f 91       	pop	r16
    124c:	08 95       	ret

0000124e <__ultoa_invert>:
    124e:	fa 01       	movw	r30, r20
    1250:	aa 27       	eor	r26, r26
    1252:	28 30       	cpi	r18, 0x08	; 8
    1254:	51 f1       	breq	.+84     	; 0x12aa <__ultoa_invert+0x5c>
    1256:	20 31       	cpi	r18, 0x10	; 16
    1258:	81 f1       	breq	.+96     	; 0x12ba <__ultoa_invert+0x6c>
    125a:	e8 94       	clt
    125c:	6f 93       	push	r22
    125e:	6e 7f       	andi	r22, 0xFE	; 254
    1260:	6e 5f       	subi	r22, 0xFE	; 254
    1262:	7f 4f       	sbci	r23, 0xFF	; 255
    1264:	8f 4f       	sbci	r24, 0xFF	; 255
    1266:	9f 4f       	sbci	r25, 0xFF	; 255
    1268:	af 4f       	sbci	r26, 0xFF	; 255
    126a:	b1 e0       	ldi	r27, 0x01	; 1
    126c:	3e d0       	rcall	.+124    	; 0x12ea <__ultoa_invert+0x9c>
    126e:	b4 e0       	ldi	r27, 0x04	; 4
    1270:	3c d0       	rcall	.+120    	; 0x12ea <__ultoa_invert+0x9c>
    1272:	67 0f       	add	r22, r23
    1274:	78 1f       	adc	r23, r24
    1276:	89 1f       	adc	r24, r25
    1278:	9a 1f       	adc	r25, r26
    127a:	a1 1d       	adc	r26, r1
    127c:	68 0f       	add	r22, r24
    127e:	79 1f       	adc	r23, r25
    1280:	8a 1f       	adc	r24, r26
    1282:	91 1d       	adc	r25, r1
    1284:	a1 1d       	adc	r26, r1
    1286:	6a 0f       	add	r22, r26
    1288:	71 1d       	adc	r23, r1
    128a:	81 1d       	adc	r24, r1
    128c:	91 1d       	adc	r25, r1
    128e:	a1 1d       	adc	r26, r1
    1290:	20 d0       	rcall	.+64     	; 0x12d2 <__ultoa_invert+0x84>
    1292:	09 f4       	brne	.+2      	; 0x1296 <__ultoa_invert+0x48>
    1294:	68 94       	set
    1296:	3f 91       	pop	r19
    1298:	2a e0       	ldi	r18, 0x0A	; 10
    129a:	26 9f       	mul	r18, r22
    129c:	11 24       	eor	r1, r1
    129e:	30 19       	sub	r19, r0
    12a0:	30 5d       	subi	r19, 0xD0	; 208
    12a2:	31 93       	st	Z+, r19
    12a4:	de f6       	brtc	.-74     	; 0x125c <__ultoa_invert+0xe>
    12a6:	cf 01       	movw	r24, r30
    12a8:	08 95       	ret
    12aa:	46 2f       	mov	r20, r22
    12ac:	47 70       	andi	r20, 0x07	; 7
    12ae:	40 5d       	subi	r20, 0xD0	; 208
    12b0:	41 93       	st	Z+, r20
    12b2:	b3 e0       	ldi	r27, 0x03	; 3
    12b4:	0f d0       	rcall	.+30     	; 0x12d4 <__ultoa_invert+0x86>
    12b6:	c9 f7       	brne	.-14     	; 0x12aa <__ultoa_invert+0x5c>
    12b8:	f6 cf       	rjmp	.-20     	; 0x12a6 <__ultoa_invert+0x58>
    12ba:	46 2f       	mov	r20, r22
    12bc:	4f 70       	andi	r20, 0x0F	; 15
    12be:	40 5d       	subi	r20, 0xD0	; 208
    12c0:	4a 33       	cpi	r20, 0x3A	; 58
    12c2:	18 f0       	brcs	.+6      	; 0x12ca <__ultoa_invert+0x7c>
    12c4:	49 5d       	subi	r20, 0xD9	; 217
    12c6:	31 fd       	sbrc	r19, 1
    12c8:	40 52       	subi	r20, 0x20	; 32
    12ca:	41 93       	st	Z+, r20
    12cc:	02 d0       	rcall	.+4      	; 0x12d2 <__ultoa_invert+0x84>
    12ce:	a9 f7       	brne	.-22     	; 0x12ba <__ultoa_invert+0x6c>
    12d0:	ea cf       	rjmp	.-44     	; 0x12a6 <__ultoa_invert+0x58>
    12d2:	b4 e0       	ldi	r27, 0x04	; 4
    12d4:	a6 95       	lsr	r26
    12d6:	97 95       	ror	r25
    12d8:	87 95       	ror	r24
    12da:	77 95       	ror	r23
    12dc:	67 95       	ror	r22
    12de:	ba 95       	dec	r27
    12e0:	c9 f7       	brne	.-14     	; 0x12d4 <__ultoa_invert+0x86>
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	61 05       	cpc	r22, r1
    12e6:	71 05       	cpc	r23, r1
    12e8:	08 95       	ret
    12ea:	9b 01       	movw	r18, r22
    12ec:	ac 01       	movw	r20, r24
    12ee:	0a 2e       	mov	r0, r26
    12f0:	06 94       	lsr	r0
    12f2:	57 95       	ror	r21
    12f4:	47 95       	ror	r20
    12f6:	37 95       	ror	r19
    12f8:	27 95       	ror	r18
    12fa:	ba 95       	dec	r27
    12fc:	c9 f7       	brne	.-14     	; 0x12f0 <__ultoa_invert+0xa2>
    12fe:	62 0f       	add	r22, r18
    1300:	73 1f       	adc	r23, r19
    1302:	84 1f       	adc	r24, r20
    1304:	95 1f       	adc	r25, r21
    1306:	a0 1d       	adc	r26, r0
    1308:	08 95       	ret

0000130a <__prologue_saves__>:
    130a:	2f 92       	push	r2
    130c:	3f 92       	push	r3
    130e:	4f 92       	push	r4
    1310:	5f 92       	push	r5
    1312:	6f 92       	push	r6
    1314:	7f 92       	push	r7
    1316:	8f 92       	push	r8
    1318:	9f 92       	push	r9
    131a:	af 92       	push	r10
    131c:	bf 92       	push	r11
    131e:	cf 92       	push	r12
    1320:	df 92       	push	r13
    1322:	ef 92       	push	r14
    1324:	ff 92       	push	r15
    1326:	0f 93       	push	r16
    1328:	1f 93       	push	r17
    132a:	cf 93       	push	r28
    132c:	df 93       	push	r29
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
    1332:	ca 1b       	sub	r28, r26
    1334:	db 0b       	sbc	r29, r27
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	09 94       	ijmp

00001342 <__epilogue_restores__>:
    1342:	2a 88       	ldd	r2, Y+18	; 0x12
    1344:	39 88       	ldd	r3, Y+17	; 0x11
    1346:	48 88       	ldd	r4, Y+16	; 0x10
    1348:	5f 84       	ldd	r5, Y+15	; 0x0f
    134a:	6e 84       	ldd	r6, Y+14	; 0x0e
    134c:	7d 84       	ldd	r7, Y+13	; 0x0d
    134e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1350:	9b 84       	ldd	r9, Y+11	; 0x0b
    1352:	aa 84       	ldd	r10, Y+10	; 0x0a
    1354:	b9 84       	ldd	r11, Y+9	; 0x09
    1356:	c8 84       	ldd	r12, Y+8	; 0x08
    1358:	df 80       	ldd	r13, Y+7	; 0x07
    135a:	ee 80       	ldd	r14, Y+6	; 0x06
    135c:	fd 80       	ldd	r15, Y+5	; 0x05
    135e:	0c 81       	ldd	r16, Y+4	; 0x04
    1360:	1b 81       	ldd	r17, Y+3	; 0x03
    1362:	aa 81       	ldd	r26, Y+2	; 0x02
    1364:	b9 81       	ldd	r27, Y+1	; 0x01
    1366:	ce 0f       	add	r28, r30
    1368:	d1 1d       	adc	r29, r1
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	f8 94       	cli
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	cd bf       	out	0x3d, r28	; 61
    1374:	ed 01       	movw	r28, r26
    1376:	08 95       	ret

00001378 <_exit>:
    1378:	f8 94       	cli

0000137a <__stop_program>:
    137a:	ff cf       	rjmp	.-2      	; 0x137a <__stop_program>
