
NODE_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b90  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00080b90  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000090  20000434  00080fc4  00020434  2**2
                  ALLOC
  3 .stack        00000404  200004c4  00081054  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008c8  00081458  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00006ee8  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001193  00000000  00000000  0002739e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000001d8  00000000  00000000  00028531  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000180  00000000  00000000  00028709  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00012f88  00000000  00000000  00028889  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00004ad0  00000000  00000000  0003b811  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005535a  00000000  00000000  000402e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000538  00000000  00000000  0009563c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000e01  00000000  00000000  00095b74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	c8 08 00 20 99 03 08 00 95 03 08 00 95 03 08 00     ... ............
   80010:	95 03 08 00 95 03 08 00 95 03 08 00 00 00 00 00     ................
	...
   8002c:	95 03 08 00 95 03 08 00 00 00 00 00 95 03 08 00     ................
   8003c:	95 03 08 00 95 03 08 00 95 03 08 00 95 03 08 00     ................
   8004c:	95 03 08 00 95 03 08 00 95 03 08 00 95 03 08 00     ................
   8005c:	95 03 08 00 35 09 08 00 95 03 08 00 00 00 00 00     ....5...........
   8006c:	95 03 08 00 95 03 08 00 95 03 08 00 95 03 08 00     ................
	...
   80084:	95 03 08 00 95 03 08 00 95 03 08 00 95 03 08 00     ................
   80094:	95 03 08 00 95 03 08 00 95 03 08 00 95 03 08 00     ................
   800a4:	00 00 00 00 95 03 08 00 95 03 08 00 95 03 08 00     ................
   800b4:	95 03 08 00 95 03 08 00 95 03 08 00 95 03 08 00     ................
   800c4:	95 03 08 00 95 03 08 00 95 03 08 00 95 03 08 00     ................
   800d4:	95 03 08 00 95 03 08 00 95 03 08 00 95 03 08 00     ................
   800e4:	95 03 08 00 95 03 08 00 09 03 08 00 95 03 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00080b90 	.word	0x00080b90

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080b90 	.word	0x00080b90
   80154:	20000438 	.word	0x20000438
   80158:	00080b90 	.word	0x00080b90
   8015c:	00000000 	.word	0x00000000

00080160 <ADC2_init>:

void ADC2_init(){

    // Setting FREERUN mode, no trigger neeeded
    // Starts a new conversion when it's done
	PMC->PMC_PCER1 |= PMC_PCER1_PID37;
   80160:	4a06      	ldr	r2, [pc, #24]	; (8017c <ADC2_init+0x1c>)
   80162:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80166:	f043 0320 	orr.w	r3, r3, #32
   8016a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    ADC->ADC_MR = ADC_MR_FREERUN;
   8016e:	4b04      	ldr	r3, [pc, #16]	; (80180 <ADC2_init+0x20>)
   80170:	2280      	movs	r2, #128	; 0x80
   80172:	605a      	str	r2, [r3, #4]
    // Choosing channel 4
    // AD2 aka PA22
    ADC->ADC_CHER = ADC_CHER_CH4;
   80174:	2210      	movs	r2, #16
   80176:	611a      	str	r2, [r3, #16]
   80178:	4770      	bx	lr
   8017a:	bf00      	nop
   8017c:	400e0600 	.word	0x400e0600
   80180:	400c0000 	.word	0x400c0000

00080184 <ADC2_read>:
    
}

uint16_t ADC2_read(){
    // Reading from channel 0
    uint16_t readings = ADC->ADC_CDR[4];
   80184:	4b01      	ldr	r3, [pc, #4]	; (8018c <ADC2_read+0x8>)
   80186:	6e18      	ldr	r0, [r3, #96]	; 0x60

    return readings;
}
   80188:	b280      	uxth	r0, r0
   8018a:	4770      	bx	lr
   8018c:	400c0000 	.word	0x400c0000

00080190 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80190:	b4f0      	push	{r4, r5, r6, r7}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   80192:	1857      	adds	r7, r2, r1
   80194:	2f08      	cmp	r7, #8
   80196:	bfd4      	ite	le
   80198:	2300      	movle	r3, #0
   8019a:	2301      	movgt	r3, #1
   8019c:	2908      	cmp	r1, #8
   8019e:	bf98      	it	ls
   801a0:	2a08      	cmpls	r2, #8
   801a2:	d85c      	bhi.n	8025e <can_init+0xce>
   801a4:	460d      	mov	r5, r1
   801a6:	2b00      	cmp	r3, #0
   801a8:	d159      	bne.n	8025e <can_init+0xce>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   801aa:	4a2e      	ldr	r2, [pc, #184]	; (80264 <can_init+0xd4>)
   801ac:	6813      	ldr	r3, [r2, #0]
   801ae:	f023 0301 	bic.w	r3, r3, #1
   801b2:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   801b4:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   801b6:	4b2c      	ldr	r3, [pc, #176]	; (80268 <can_init+0xd8>)
   801b8:	f44f 7440 	mov.w	r4, #768	; 0x300
   801bc:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   801be:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   801c0:	f024 0403 	bic.w	r4, r4, #3
   801c4:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   801c6:	2403      	movs	r4, #3
   801c8:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   801ca:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   801cc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   801d0:	4c26      	ldr	r4, [pc, #152]	; (8026c <can_init+0xdc>)
   801d2:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801d6:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801da:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801de:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   801e2:	6150      	str	r0, [r2, #20]
	

	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;
   801e4:	2400      	movs	r4, #0

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801e6:	e019      	b.n	8021c <can_init+0x8c>
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801e8:	481e      	ldr	r0, [pc, #120]	; (80264 <can_init+0xd4>)
   801ea:	f101 0310 	add.w	r3, r1, #16
   801ee:	015b      	lsls	r3, r3, #5
   801f0:	18c2      	adds	r2, r0, r3
   801f2:	2600      	movs	r6, #0
   801f4:	6056      	str	r6, [r2, #4]
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801f6:	eb00 1241 	add.w	r2, r0, r1, lsl #5
   801fa:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
   801fe:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   80202:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
   80206:	50c6      	str	r6, [r0, r3]
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   80208:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
   8020c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   80210:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   80214:	2301      	movs	r3, #1
   80216:	408b      	lsls	r3, r1
   80218:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   8021a:	3101      	adds	r1, #1
   8021c:	42b9      	cmp	r1, r7
   8021e:	dde3      	ble.n	801e8 <can_init+0x58>
   80220:	2300      	movs	r3, #0
   80222:	e00d      	b.n	80240 <can_init+0xb0>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80224:	490f      	ldr	r1, [pc, #60]	; (80264 <can_init+0xd4>)
   80226:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   8022a:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   8022e:	f8c2 0208 	str.w	r0, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80232:	f103 0210 	add.w	r2, r3, #16
   80236:	0152      	lsls	r2, r2, #5
   80238:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   8023c:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   8023e:	3301      	adds	r3, #1
   80240:	42ab      	cmp	r3, r5
   80242:	dbef      	blt.n	80224 <can_init+0x94>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   80244:	4b07      	ldr	r3, [pc, #28]	; (80264 <can_init+0xd4>)
   80246:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80248:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8024c:	4a08      	ldr	r2, [pc, #32]	; (80270 <can_init+0xe0>)
   8024e:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80250:	681a      	ldr	r2, [r3, #0]
   80252:	f042 0201 	orr.w	r2, r2, #1
   80256:	601a      	str	r2, [r3, #0]

	return 0;
   80258:	2000      	movs	r0, #0
}
   8025a:	bcf0      	pop	{r4, r5, r6, r7}
   8025c:	4770      	bx	lr
		return 1; //Too many mailboxes is configured
   8025e:	2001      	movs	r0, #1
   80260:	e7fb      	b.n	8025a <can_init+0xca>
   80262:	bf00      	nop
   80264:	400b4000 	.word	0x400b4000
   80268:	400e0e00 	.word	0x400e0e00
   8026c:	1000102b 	.word	0x1000102b
   80270:	e000e100 	.word	0xe000e100

00080274 <can_init_def_tx_rx_mb>:
{
   80274:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   80276:	2202      	movs	r2, #2
   80278:	2101      	movs	r1, #1
   8027a:	4b01      	ldr	r3, [pc, #4]	; (80280 <can_init_def_tx_rx_mb+0xc>)
   8027c:	4798      	blx	r3
}
   8027e:	bd08      	pop	{r3, pc}
   80280:	00080191 	.word	0x00080191

00080284 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80284:	014b      	lsls	r3, r1, #5
   80286:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8028a:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8028e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80292:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80296:	d033      	beq.n	80300 <can_receive+0x7c>
{
   80298:	b470      	push	{r4, r5, r6}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   8029a:	014b      	lsls	r3, r1, #5
   8029c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802a0:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802a4:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   802a8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   802ac:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   802b0:	f3c5 458a 	ubfx	r5, r5, #18, #11
   802b4:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   802b6:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   802ba:	f3c5 4503 	ubfx	r5, r5, #16, #4
   802be:	7085      	strb	r5, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   802c0:	2300      	movs	r3, #0
   802c2:	e003      	b.n	802cc <can_receive+0x48>
				can_msg->data[i] = (char)(data_low & 0xff);
				data_low = data_low >> 8;
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   802c4:	18c6      	adds	r6, r0, r3
   802c6:	70f2      	strb	r2, [r6, #3]
				data_high = data_high >> 8;
   802c8:	0a12      	lsrs	r2, r2, #8
		for(int i = 0; i < can_msg->data_length;i++)
   802ca:	3301      	adds	r3, #1
   802cc:	42ab      	cmp	r3, r5
   802ce:	da05      	bge.n	802dc <can_receive+0x58>
			if(i < 4)
   802d0:	2b03      	cmp	r3, #3
   802d2:	dcf7      	bgt.n	802c4 <can_receive+0x40>
				can_msg->data[i] = (char)(data_low & 0xff);
   802d4:	18c6      	adds	r6, r0, r3
   802d6:	70f4      	strb	r4, [r6, #3]
				data_low = data_low >> 8;
   802d8:	0a24      	lsrs	r4, r4, #8
   802da:	e7f6      	b.n	802ca <can_receive+0x46>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   802dc:	4b09      	ldr	r3, [pc, #36]	; (80304 <can_receive+0x80>)
   802de:	f101 0210 	add.w	r2, r1, #16
   802e2:	0152      	lsls	r2, r2, #5
   802e4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802e8:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   802ea:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802ee:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802f6:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   802fa:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   802fc:	bc70      	pop	{r4, r5, r6}
   802fe:	4770      	bx	lr
		return 1;
   80300:	2001      	movs	r0, #1
   80302:	4770      	bx	lr
   80304:	400b4000 	.word	0x400b4000

00080308 <CAN0_Handler>:
 * \retval 
 */


void CAN0_Handler( void )
{
   80308:	b510      	push	{r4, lr}
   8030a:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   8030c:	4b1b      	ldr	r3, [pc, #108]	; (8037c <CAN0_Handler+0x74>)
   8030e:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   80310:	f014 0f06 	tst.w	r4, #6
   80314:	d025      	beq.n	80362 <CAN0_Handler+0x5a>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   80316:	f014 0f02 	tst.w	r4, #2
   8031a:	d10f      	bne.n	8033c <CAN0_Handler+0x34>
		{
			can_receive(&message, 1);
			

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   8031c:	f014 0f04 	tst.w	r4, #4
   80320:	d011      	beq.n	80346 <CAN0_Handler+0x3e>
		
		{
			can_receive(&message, 2);
   80322:	2102      	movs	r1, #2
   80324:	a801      	add	r0, sp, #4
   80326:	4b16      	ldr	r3, [pc, #88]	; (80380 <CAN0_Handler+0x78>)
   80328:	4798      	blx	r3
		{
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		msgs.id = message.id;
   8032a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   8032e:	4b15      	ldr	r3, [pc, #84]	; (80384 <CAN0_Handler+0x7c>)
   80330:	801a      	strh	r2, [r3, #0]
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		msgs.data_length = message.data_length;
   80332:	f89d 0006 	ldrb.w	r0, [sp, #6]
   80336:	7098      	strb	r0, [r3, #2]
		for (int i = 0; i < message.data_length; i++)
   80338:	2300      	movs	r3, #0
   8033a:	e010      	b.n	8035e <CAN0_Handler+0x56>
			can_receive(&message, 1);
   8033c:	2101      	movs	r1, #1
   8033e:	a801      	add	r0, sp, #4
   80340:	4b0f      	ldr	r3, [pc, #60]	; (80380 <CAN0_Handler+0x78>)
   80342:	4798      	blx	r3
   80344:	e7f1      	b.n	8032a <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   80346:	4810      	ldr	r0, [pc, #64]	; (80388 <CAN0_Handler+0x80>)
   80348:	4b10      	ldr	r3, [pc, #64]	; (8038c <CAN0_Handler+0x84>)
   8034a:	4798      	blx	r3
   8034c:	e7ed      	b.n	8032a <CAN0_Handler+0x22>
		{
			msgs.data[i] = message.data[i];
   8034e:	aa04      	add	r2, sp, #16
   80350:	441a      	add	r2, r3
   80352:	f912 1c09 	ldrsb.w	r1, [r2, #-9]
   80356:	4a0b      	ldr	r2, [pc, #44]	; (80384 <CAN0_Handler+0x7c>)
   80358:	441a      	add	r2, r3
   8035a:	70d1      	strb	r1, [r2, #3]
		for (int i = 0; i < message.data_length; i++)
   8035c:	3301      	adds	r3, #1
   8035e:	4283      	cmp	r3, r0
   80360:	dbf5      	blt.n	8034e <CAN0_Handler+0x46>
		if(DEBUG_INTERRUPT)printf("\n\r");
		
		//can_send(&message, 0);
	}
	
	if(can_sr & CAN_SR_MB0)
   80362:	f014 0f01 	tst.w	r4, #1
   80366:	d002      	beq.n	8036e <CAN0_Handler+0x66>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   80368:	2201      	movs	r2, #1
   8036a:	4b04      	ldr	r3, [pc, #16]	; (8037c <CAN0_Handler+0x74>)
   8036c:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8036e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80372:	4b07      	ldr	r3, [pc, #28]	; (80390 <CAN0_Handler+0x88>)
   80374:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   80378:	b004      	add	sp, #16
   8037a:	bd10      	pop	{r4, pc}
   8037c:	400b4000 	.word	0x400b4000
   80380:	00080285 	.word	0x00080285
   80384:	20000450 	.word	0x20000450
   80388:	00080b0c 	.word	0x00080b0c
   8038c:	00080885 	.word	0x00080885
   80390:	e000e100 	.word	0xe000e100

00080394 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80394:	e7fe      	b.n	80394 <Dummy_Handler>
	...

00080398 <Reset_Handler>:
{
   80398:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   8039a:	4b11      	ldr	r3, [pc, #68]	; (803e0 <Reset_Handler+0x48>)
   8039c:	4a11      	ldr	r2, [pc, #68]	; (803e4 <Reset_Handler+0x4c>)
   8039e:	429a      	cmp	r2, r3
   803a0:	d009      	beq.n	803b6 <Reset_Handler+0x1e>
   803a2:	4b0f      	ldr	r3, [pc, #60]	; (803e0 <Reset_Handler+0x48>)
   803a4:	4a0f      	ldr	r2, [pc, #60]	; (803e4 <Reset_Handler+0x4c>)
   803a6:	e003      	b.n	803b0 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
   803a8:	6811      	ldr	r1, [r2, #0]
   803aa:	6019      	str	r1, [r3, #0]
   803ac:	3304      	adds	r3, #4
   803ae:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   803b0:	490d      	ldr	r1, [pc, #52]	; (803e8 <Reset_Handler+0x50>)
   803b2:	428b      	cmp	r3, r1
   803b4:	d3f8      	bcc.n	803a8 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   803b6:	4b0d      	ldr	r3, [pc, #52]	; (803ec <Reset_Handler+0x54>)
   803b8:	e002      	b.n	803c0 <Reset_Handler+0x28>
                *pDest++ = 0;
   803ba:	2200      	movs	r2, #0
   803bc:	601a      	str	r2, [r3, #0]
   803be:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
   803c0:	4a0b      	ldr	r2, [pc, #44]	; (803f0 <Reset_Handler+0x58>)
   803c2:	4293      	cmp	r3, r2
   803c4:	d3f9      	bcc.n	803ba <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   803c6:	4b0b      	ldr	r3, [pc, #44]	; (803f4 <Reset_Handler+0x5c>)
   803c8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   803cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   803d0:	4a09      	ldr	r2, [pc, #36]	; (803f8 <Reset_Handler+0x60>)
   803d2:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   803d4:	4b09      	ldr	r3, [pc, #36]	; (803fc <Reset_Handler+0x64>)
   803d6:	4798      	blx	r3
        main();
   803d8:	4b09      	ldr	r3, [pc, #36]	; (80400 <Reset_Handler+0x68>)
   803da:	4798      	blx	r3
   803dc:	e7fe      	b.n	803dc <Reset_Handler+0x44>
   803de:	bf00      	nop
   803e0:	20000000 	.word	0x20000000
   803e4:	00080b90 	.word	0x00080b90
   803e8:	20000434 	.word	0x20000434
   803ec:	20000434 	.word	0x20000434
   803f0:	200004c4 	.word	0x200004c4
   803f4:	00080000 	.word	0x00080000
   803f8:	e000ed00 	.word	0xe000ed00
   803fc:	0008099d 	.word	0x0008099d
   80400:	000804a9 	.word	0x000804a9

00080404 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   80404:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80408:	4a20      	ldr	r2, [pc, #128]	; (8048c <SystemInit+0x88>)
   8040a:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   8040c:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80410:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   80412:	4b1f      	ldr	r3, [pc, #124]	; (80490 <SystemInit+0x8c>)
   80414:	6a1b      	ldr	r3, [r3, #32]
   80416:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8041a:	d107      	bne.n	8042c <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   8041c:	4a1d      	ldr	r2, [pc, #116]	; (80494 <SystemInit+0x90>)
   8041e:	4b1c      	ldr	r3, [pc, #112]	; (80490 <SystemInit+0x8c>)
   80420:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   80422:	4b1b      	ldr	r3, [pc, #108]	; (80490 <SystemInit+0x8c>)
   80424:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80426:	f013 0f01 	tst.w	r3, #1
   8042a:	d0fa      	beq.n	80422 <SystemInit+0x1e>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   8042c:	4a1a      	ldr	r2, [pc, #104]	; (80498 <SystemInit+0x94>)
   8042e:	4b18      	ldr	r3, [pc, #96]	; (80490 <SystemInit+0x8c>)
   80430:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   80432:	4b17      	ldr	r3, [pc, #92]	; (80490 <SystemInit+0x8c>)
   80434:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80436:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   8043a:	d0fa      	beq.n	80432 <SystemInit+0x2e>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   8043c:	4a14      	ldr	r2, [pc, #80]	; (80490 <SystemInit+0x8c>)
   8043e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80440:	f023 0303 	bic.w	r3, r3, #3
   80444:	f043 0301 	orr.w	r3, r3, #1
   80448:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   8044a:	4b11      	ldr	r3, [pc, #68]	; (80490 <SystemInit+0x8c>)
   8044c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8044e:	f013 0f08 	tst.w	r3, #8
   80452:	d0fa      	beq.n	8044a <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   80454:	4a11      	ldr	r2, [pc, #68]	; (8049c <SystemInit+0x98>)
   80456:	4b0e      	ldr	r3, [pc, #56]	; (80490 <SystemInit+0x8c>)
   80458:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   8045a:	4b0d      	ldr	r3, [pc, #52]	; (80490 <SystemInit+0x8c>)
   8045c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8045e:	f013 0f02 	tst.w	r3, #2
   80462:	d0fa      	beq.n	8045a <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80464:	2211      	movs	r2, #17
   80466:	4b0a      	ldr	r3, [pc, #40]	; (80490 <SystemInit+0x8c>)
   80468:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8046a:	4b09      	ldr	r3, [pc, #36]	; (80490 <SystemInit+0x8c>)
   8046c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8046e:	f013 0f08 	tst.w	r3, #8
   80472:	d0fa      	beq.n	8046a <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80474:	2212      	movs	r2, #18
   80476:	4b06      	ldr	r3, [pc, #24]	; (80490 <SystemInit+0x8c>)
   80478:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8047a:	4b05      	ldr	r3, [pc, #20]	; (80490 <SystemInit+0x8c>)
   8047c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8047e:	f013 0f08 	tst.w	r3, #8
   80482:	d0fa      	beq.n	8047a <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   80484:	4a06      	ldr	r2, [pc, #24]	; (804a0 <SystemInit+0x9c>)
   80486:	4b07      	ldr	r3, [pc, #28]	; (804a4 <SystemInit+0xa0>)
   80488:	601a      	str	r2, [r3, #0]
   8048a:	4770      	bx	lr
   8048c:	400e0a00 	.word	0x400e0a00
   80490:	400e0600 	.word	0x400e0600
   80494:	00370809 	.word	0x00370809
   80498:	01370809 	.word	0x01370809
   8049c:	200d3f01 	.word	0x200d3f01
   804a0:	0501bd00 	.word	0x0501bd00
   804a4:	20000000 	.word	0x20000000

000804a8 <main>:


#define can_br 0x290165

int main(void)
{
   804a8:	b508      	push	{r3, lr}
    /* Initialize the SAM system */
	
    SystemInit();
   804aa:	4b11      	ldr	r3, [pc, #68]	; (804f0 <main+0x48>)
   804ac:	4798      	blx	r3
	//PWM_init();
	can_init_def_tx_rx_mb(can_br);
   804ae:	4811      	ldr	r0, [pc, #68]	; (804f4 <main+0x4c>)
   804b0:	4b11      	ldr	r3, [pc, #68]	; (804f8 <main+0x50>)
   804b2:	4798      	blx	r3
	configure_uart();
   804b4:	4b11      	ldr	r3, [pc, #68]	; (804fc <main+0x54>)
   804b6:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS;
   804b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   804bc:	4b10      	ldr	r3, [pc, #64]	; (80500 <main+0x58>)
   804be:	605a      	str	r2, [r3, #4]
	CAN_MESSAGE meld; 
	
	CAN0_Handler();
   804c0:	4b10      	ldr	r3, [pc, #64]	; (80504 <main+0x5c>)
   804c2:	4798      	blx	r3
	solenoid_init();
   804c4:	4b10      	ldr	r3, [pc, #64]	; (80508 <main+0x60>)
   804c6:	4798      	blx	r3
	PWM_init();
   804c8:	4b10      	ldr	r3, [pc, #64]	; (8050c <main+0x64>)
   804ca:	4798      	blx	r3
	PWM_set_period_percentage(100);
   804cc:	2064      	movs	r0, #100	; 0x64
   804ce:	4b10      	ldr	r3, [pc, #64]	; (80510 <main+0x68>)
   804d0:	4798      	blx	r3
	ADC2_init();
   804d2:	4b10      	ldr	r3, [pc, #64]	; (80514 <main+0x6c>)
   804d4:	4798      	blx	r3
   804d6:	e003      	b.n	804e0 <main+0x38>
		//Setting and resetting pin for solenoid, with an ideal delay inbetween
		
		uint16_t ir = ADC2_read();
		//delay_ch1_micro(12000);
		printf("%d\n\r", ir);
		for(int i=0; i<12500000; i++){
   804d8:	3301      	adds	r3, #1
   804da:	4a0f      	ldr	r2, [pc, #60]	; (80518 <main+0x70>)
   804dc:	4293      	cmp	r3, r2
   804de:	ddfb      	ble.n	804d8 <main+0x30>
		uint16_t ir = ADC2_read();
   804e0:	4b0e      	ldr	r3, [pc, #56]	; (8051c <main+0x74>)
   804e2:	4798      	blx	r3
		printf("%d\n\r", ir);
   804e4:	b281      	uxth	r1, r0
   804e6:	480e      	ldr	r0, [pc, #56]	; (80520 <main+0x78>)
   804e8:	4b0e      	ldr	r3, [pc, #56]	; (80524 <main+0x7c>)
   804ea:	4798      	blx	r3
		for(int i=0; i<12500000; i++){
   804ec:	2300      	movs	r3, #0
   804ee:	e7f4      	b.n	804da <main+0x32>
   804f0:	00080405 	.word	0x00080405
   804f4:	00290165 	.word	0x00290165
   804f8:	00080275 	.word	0x00080275
   804fc:	000808a9 	.word	0x000808a9
   80500:	400e1a50 	.word	0x400e1a50
   80504:	00080309 	.word	0x00080309
   80508:	000805cd 	.word	0x000805cd
   8050c:	00080529 	.word	0x00080529
   80510:	0008058d 	.word	0x0008058d
   80514:	00080161 	.word	0x00080161
   80518:	00bebc1f 	.word	0x00bebc1f
   8051c:	00080185 	.word	0x00080185
   80520:	00080b38 	.word	0x00080b38
   80524:	00080885 	.word	0x00080885

00080528 <PWM_init>:
void PWM_init()
{
    //MCLK    PERIOD     PRESCALER     CHANNEL
    //84MHz   20ms       128           5
	
	PMC->PMC_PCER1 |= PMC_PCER1_PID36;                                      // Enabling peripheral clock for PWM
   80528:	4a15      	ldr	r2, [pc, #84]	; (80580 <PWM_init+0x58>)
   8052a:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   8052e:	f043 0310 	orr.w	r3, r3, #16
   80532:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	PIOC->PIO_PDR |= PIO_PDR_P19;                                           // Set PWM pin to an output
   80536:	4b13      	ldr	r3, [pc, #76]	; (80584 <PWM_init+0x5c>)
   80538:	685a      	ldr	r2, [r3, #4]
   8053a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   8053e:	605a      	str	r2, [r3, #4]
	PIOC->PIO_ABSR |= PIO_ABSR_P19;                                         // Enable peripheral B for P19
   80540:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80542:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80546:	671a      	str	r2, [r3, #112]	; 0x70
	
	
	PWM->PWM_CH_NUM[5].PWM_CMR |= PWM_CMR_CPRE_MCK_DIV_128;           // Prescales MCLK with 128
   80548:	4b0f      	ldr	r3, [pc, #60]	; (80588 <PWM_init+0x60>)
   8054a:	f8d3 22a0 	ldr.w	r2, [r3, #672]	; 0x2a0
   8054e:	f042 0207 	orr.w	r2, r2, #7
   80552:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	uint32_t CPRD = PWM_period_val;                                                  //CPRD = (84MHz*20ms)/128
	uint32_t CDTY = PWM_center_val;
	PWM->PWM_CH_NUM[5].PWM_CPRD |= PWM_CPRD_CPRD(CPRD);               //Set period to 20ms
   80556:	f8d3 22ac 	ldr.w	r2, [r3, #684]	; 0x2ac
   8055a:	f442 524d 	orr.w	r2, r2, #13120	; 0x3340
   8055e:	f042 0205 	orr.w	r2, r2, #5
   80562:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	
	PWM->PWM_CH_NUM[5].PWM_CDTY |= PWM_CDTY_CDTY(CDTY); //Set duty cycle to 1.5 ms 
   80566:	f8d3 22a4 	ldr.w	r2, [r3, #676]	; 0x2a4
   8056a:	f442 523d 	orr.w	r2, r2, #12096	; 0x2f40
   8056e:	f042 022d 	orr.w	r2, r2, #45	; 0x2d
   80572:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	
	PWM->PWM_ENA |= PWM_ENA_CHID5;                                          //Enables PWM channel 0 
   80576:	685a      	ldr	r2, [r3, #4]
   80578:	f042 0220 	orr.w	r2, r2, #32
   8057c:	605a      	str	r2, [r3, #4]
   8057e:	4770      	bx	lr
   80580:	400e0600 	.word	0x400e0600
   80584:	400e1200 	.word	0x400e1200
   80588:	40094000 	.word	0x40094000

0008058c <PWM_set_period_percentage>:

uint32_t PWM_set_period_percentage(int16_t value)
{
	
	
	if (value > 100) {
   8058c:	2864      	cmp	r0, #100	; 0x64
   8058e:	dc05      	bgt.n	8059c <PWM_set_period_percentage+0x10>
		value = 100;
	} else if (value < -100) {
   80590:	f110 0f64 	cmn.w	r0, #100	; 0x64
   80594:	da03      	bge.n	8059e <PWM_set_period_percentage+0x12>
		value = -100;
   80596:	f06f 0063 	mvn.w	r0, #99	; 0x63
   8059a:	e000      	b.n	8059e <PWM_set_period_percentage+0x12>
		value = 100;
   8059c:	2064      	movs	r0, #100	; 0x64
	}
		
	uint32_t pwm_value =  PWM_center_val - (value * PWM_range_val)/100;
   8059e:	4b08      	ldr	r3, [pc, #32]	; (805c0 <PWM_set_period_percentage+0x34>)
   805a0:	fb03 f000 	mul.w	r0, r3, r0
   805a4:	4b07      	ldr	r3, [pc, #28]	; (805c4 <PWM_set_period_percentage+0x38>)
   805a6:	fb83 2300 	smull	r2, r3, r3, r0
   805aa:	17c0      	asrs	r0, r0, #31
   805ac:	ebc0 1063 	rsb	r0, r0, r3, asr #5
   805b0:	f500 503d 	add.w	r0, r0, #12096	; 0x2f40
   805b4:	302d      	adds	r0, #45	; 0x2d
	
	PWM->PWM_CH_NUM[5].PWM_CDTYUPD = (pwm_value);
   805b6:	4b04      	ldr	r3, [pc, #16]	; (805c8 <PWM_set_period_percentage+0x3c>)
   805b8:	f8c3 02a8 	str.w	r0, [r3, #680]	; 0x2a8
	return pwm_value;
   805bc:	4770      	bx	lr
   805be:	bf00      	nop
   805c0:	fffffea2 	.word	0xfffffea2
   805c4:	51eb851f 	.word	0x51eb851f
   805c8:	40094000 	.word	0x40094000

000805cc <solenoid_init>:
#include "SOLENOIDdrv.h"

void solenoid_init(){
    //Enable IO
    PIOA->PIO_PER  |= PIO_PA16;
   805cc:	4b08      	ldr	r3, [pc, #32]	; (805f0 <solenoid_init+0x24>)
   805ce:	681a      	ldr	r2, [r3, #0]
   805d0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   805d4:	601a      	str	r2, [r3, #0]
    //Set pin A0 as output
    PIOA->PIO_OER  |= PIO_PA16;
   805d6:	691a      	ldr	r2, [r3, #16]
   805d8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   805dc:	611a      	str	r2, [r3, #16]
    //Disable pull up
    PIOA->PIO_PUDR |= PIO_PA16;
   805de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   805e0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   805e4:	661a      	str	r2, [r3, #96]	; 0x60
    //Set pin low
    PIOA->PIO_SODR |= PIO_PA16;
   805e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   805e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   805ec:	631a      	str	r2, [r3, #48]	; 0x30
   805ee:	4770      	bx	lr
   805f0:	400e0e00 	.word	0x400e0e00

000805f4 <printchar>:
#include "uart.h"


//insert function to print to here
static void printchar(char **str, int c)
{
   805f4:	b508      	push	{r3, lr}
	(void) uart_putchar(c);  //Send characters to uart
   805f6:	b2c8      	uxtb	r0, r1
   805f8:	4b01      	ldr	r3, [pc, #4]	; (80600 <printchar+0xc>)
   805fa:	4798      	blx	r3
   805fc:	bd08      	pop	{r3, pc}
   805fe:	bf00      	nop
   80600:	00080911 	.word	0x00080911

00080604 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   80604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80608:	4607      	mov	r7, r0
   8060a:	460e      	mov	r6, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   8060c:	1e15      	subs	r5, r2, #0
   8060e:	dd02      	ble.n	80616 <prints+0x12>
   80610:	460a      	mov	r2, r1
   80612:	2100      	movs	r1, #0
   80614:	e004      	b.n	80620 <prints+0x1c>
	register int pc = 0, padchar = ' ';
   80616:	f04f 0820 	mov.w	r8, #32
   8061a:	e00e      	b.n	8063a <prints+0x36>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   8061c:	3101      	adds	r1, #1
   8061e:	3201      	adds	r2, #1
   80620:	7810      	ldrb	r0, [r2, #0]
   80622:	2800      	cmp	r0, #0
   80624:	d1fa      	bne.n	8061c <prints+0x18>
		if (len >= width) width = 0;
   80626:	42a9      	cmp	r1, r5
   80628:	da01      	bge.n	8062e <prints+0x2a>
		else width -= len;
   8062a:	1a6d      	subs	r5, r5, r1
   8062c:	e000      	b.n	80630 <prints+0x2c>
		if (len >= width) width = 0;
   8062e:	2500      	movs	r5, #0
		if (pad & PAD_ZERO) padchar = '0';
   80630:	f013 0f02 	tst.w	r3, #2
   80634:	d106      	bne.n	80644 <prints+0x40>
	register int pc = 0, padchar = ' ';
   80636:	f04f 0820 	mov.w	r8, #32
	}
	if (!(pad & PAD_RIGHT)) {
   8063a:	f013 0401 	ands.w	r4, r3, #1
   8063e:	d00a      	beq.n	80656 <prints+0x52>
	register int pc = 0, padchar = ' ';
   80640:	2400      	movs	r4, #0
   80642:	e010      	b.n	80666 <prints+0x62>
		if (pad & PAD_ZERO) padchar = '0';
   80644:	f04f 0830 	mov.w	r8, #48	; 0x30
   80648:	e7f7      	b.n	8063a <prints+0x36>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
   8064a:	4641      	mov	r1, r8
   8064c:	4638      	mov	r0, r7
   8064e:	4b0d      	ldr	r3, [pc, #52]	; (80684 <prints+0x80>)
   80650:	4798      	blx	r3
			++pc;
   80652:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
   80654:	3d01      	subs	r5, #1
   80656:	2d00      	cmp	r5, #0
   80658:	dcf7      	bgt.n	8064a <prints+0x46>
   8065a:	e004      	b.n	80666 <prints+0x62>
		}
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
   8065c:	4638      	mov	r0, r7
   8065e:	4b09      	ldr	r3, [pc, #36]	; (80684 <prints+0x80>)
   80660:	4798      	blx	r3
		++pc;
   80662:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   80664:	3601      	adds	r6, #1
   80666:	7831      	ldrb	r1, [r6, #0]
   80668:	2900      	cmp	r1, #0
   8066a:	d1f7      	bne.n	8065c <prints+0x58>
   8066c:	e005      	b.n	8067a <prints+0x76>
	}
	for ( ; width > 0; --width) {
		printchar (out, padchar);
   8066e:	4641      	mov	r1, r8
   80670:	4638      	mov	r0, r7
   80672:	4b04      	ldr	r3, [pc, #16]	; (80684 <prints+0x80>)
   80674:	4798      	blx	r3
		++pc;
   80676:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
   80678:	3d01      	subs	r5, #1
   8067a:	2d00      	cmp	r5, #0
   8067c:	dcf7      	bgt.n	8066e <prints+0x6a>
	}

	return pc;
}
   8067e:	4620      	mov	r0, r4
   80680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80684:	000805f5 	.word	0x000805f5

00080688 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80688:	b5f0      	push	{r4, r5, r6, r7, lr}
   8068a:	b085      	sub	sp, #20
   8068c:	4607      	mov	r7, r0
   8068e:	980c      	ldr	r0, [sp, #48]	; 0x30
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   80690:	b151      	cbz	r1, 806a8 <printi+0x20>
   80692:	461e      	mov	r6, r3
   80694:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   80696:	b113      	cbz	r3, 8069e <printi+0x16>
   80698:	2a0a      	cmp	r2, #10
   8069a:	d012      	beq.n	806c2 <printi+0x3a>
	register int t, neg = 0, pc = 0;
   8069c:	2600      	movs	r6, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   8069e:	ad04      	add	r5, sp, #16
   806a0:	2300      	movs	r3, #0
   806a2:	f805 3d01 	strb.w	r3, [r5, #-1]!

	while (u) {
   806a6:	e018      	b.n	806da <printi+0x52>
		print_buf[0] = '0';
   806a8:	2330      	movs	r3, #48	; 0x30
   806aa:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   806ae:	2300      	movs	r3, #0
   806b0:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   806b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   806b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   806b8:	a901      	add	r1, sp, #4
   806ba:	4638      	mov	r0, r7
   806bc:	4c1b      	ldr	r4, [pc, #108]	; (8072c <printi+0xa4>)
   806be:	47a0      	blx	r4
   806c0:	e029      	b.n	80716 <printi+0x8e>
	if (sg && b == 10 && i < 0) {
   806c2:	2900      	cmp	r1, #0
   806c4:	db01      	blt.n	806ca <printi+0x42>
	register int t, neg = 0, pc = 0;
   806c6:	2600      	movs	r6, #0
   806c8:	e7e9      	b.n	8069e <printi+0x16>
		u = -i;
   806ca:	424c      	negs	r4, r1
		neg = 1;
   806cc:	2601      	movs	r6, #1
   806ce:	e7e6      	b.n	8069e <printi+0x16>
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
   806d0:	3330      	adds	r3, #48	; 0x30
   806d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   806d6:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   806da:	b14c      	cbz	r4, 806f0 <printi+0x68>
		t = u % b;
   806dc:	fbb4 f3f2 	udiv	r3, r4, r2
   806e0:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   806e4:	2b09      	cmp	r3, #9
   806e6:	ddf3      	ble.n	806d0 <printi+0x48>
			t += letbase - '0' - 10;
   806e8:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   806ec:	440b      	add	r3, r1
   806ee:	e7ef      	b.n	806d0 <printi+0x48>
	}

	if (neg) {
   806f0:	b156      	cbz	r6, 80708 <printi+0x80>
		if( width && (pad & PAD_ZERO) ) {
   806f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   806f4:	b11b      	cbz	r3, 806fe <printi+0x76>
   806f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   806f8:	f013 0f02 	tst.w	r3, #2
   806fc:	d10d      	bne.n	8071a <printi+0x92>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   806fe:	232d      	movs	r3, #45	; 0x2d
   80700:	f805 3c01 	strb.w	r3, [r5, #-1]
   80704:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   80706:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   80708:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8070a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8070c:	4629      	mov	r1, r5
   8070e:	4638      	mov	r0, r7
   80710:	4c06      	ldr	r4, [pc, #24]	; (8072c <printi+0xa4>)
   80712:	47a0      	blx	r4
   80714:	4430      	add	r0, r6
}
   80716:	b005      	add	sp, #20
   80718:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printchar (out, '-');
   8071a:	212d      	movs	r1, #45	; 0x2d
   8071c:	4638      	mov	r0, r7
   8071e:	4b04      	ldr	r3, [pc, #16]	; (80730 <printi+0xa8>)
   80720:	4798      	blx	r3
			--width;
   80722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80724:	3b01      	subs	r3, #1
   80726:	930a      	str	r3, [sp, #40]	; 0x28
   80728:	e7ee      	b.n	80708 <printi+0x80>
   8072a:	bf00      	nop
   8072c:	00080605 	.word	0x00080605
   80730:	000805f5 	.word	0x000805f5

00080734 <print>:

static int print( char **out, const char *format, va_list args )
{
   80734:	b5f0      	push	{r4, r5, r6, r7, lr}
   80736:	b089      	sub	sp, #36	; 0x24
   80738:	4606      	mov	r6, r0
   8073a:	460c      	mov	r4, r1
   8073c:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
   8073e:	2500      	movs	r5, #0
	char scr[2];

	for (; *format != 0; ++format) {
   80740:	e081      	b.n	80846 <print+0x112>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
   80742:	1ca2      	adds	r2, r4, #2
				pad = PAD_RIGHT;
   80744:	2301      	movs	r3, #1
   80746:	e08b      	b.n	80860 <print+0x12c>
			}
			while (*format == '0') {
				++format;
   80748:	3401      	adds	r4, #1
				pad |= PAD_ZERO;
   8074a:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   8074e:	7822      	ldrb	r2, [r4, #0]
   80750:	2a30      	cmp	r2, #48	; 0x30
   80752:	d0f9      	beq.n	80748 <print+0x14>
   80754:	2200      	movs	r2, #0
   80756:	e006      	b.n	80766 <print+0x32>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
   80758:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8075c:	0050      	lsls	r0, r2, #1
				width += *format - '0';
   8075e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80762:	4402      	add	r2, r0
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80764:	3401      	adds	r4, #1
   80766:	7821      	ldrb	r1, [r4, #0]
   80768:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   8076c:	b2c0      	uxtb	r0, r0
   8076e:	2809      	cmp	r0, #9
   80770:	d9f2      	bls.n	80758 <print+0x24>
			}
			if( *format == 's' ) {
   80772:	2973      	cmp	r1, #115	; 0x73
   80774:	d018      	beq.n	807a8 <print+0x74>
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
   80776:	2964      	cmp	r1, #100	; 0x64
   80778:	d022      	beq.n	807c0 <print+0x8c>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
				continue;
			}
			if( *format == 'x' ) {
   8077a:	2978      	cmp	r1, #120	; 0x78
   8077c:	d02f      	beq.n	807de <print+0xaa>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
   8077e:	2958      	cmp	r1, #88	; 0x58
   80780:	d03c      	beq.n	807fc <print+0xc8>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
   80782:	2975      	cmp	r1, #117	; 0x75
   80784:	d049      	beq.n	8081a <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
   80786:	2963      	cmp	r1, #99	; 0x63
   80788:	d15c      	bne.n	80844 <print+0x110>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
   8078a:	9905      	ldr	r1, [sp, #20]
   8078c:	1d08      	adds	r0, r1, #4
   8078e:	9005      	str	r0, [sp, #20]
   80790:	7809      	ldrb	r1, [r1, #0]
   80792:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
   80796:	2100      	movs	r1, #0
   80798:	f88d 101d 	strb.w	r1, [sp, #29]
				pc += prints (out, scr, width, pad);
   8079c:	a907      	add	r1, sp, #28
   8079e:	4630      	mov	r0, r6
   807a0:	4f34      	ldr	r7, [pc, #208]	; (80874 <print+0x140>)
   807a2:	47b8      	blx	r7
   807a4:	4405      	add	r5, r0
				continue;
   807a6:	e04d      	b.n	80844 <print+0x110>
				register char *s = (char *)va_arg( args, int );
   807a8:	9905      	ldr	r1, [sp, #20]
   807aa:	1d08      	adds	r0, r1, #4
   807ac:	9005      	str	r0, [sp, #20]
   807ae:	6809      	ldr	r1, [r1, #0]
				pc += prints (out, s?s:"(null)", width, pad);
   807b0:	b121      	cbz	r1, 807bc <print+0x88>
   807b2:	4630      	mov	r0, r6
   807b4:	4f2f      	ldr	r7, [pc, #188]	; (80874 <print+0x140>)
   807b6:	47b8      	blx	r7
   807b8:	4405      	add	r5, r0
				continue;
   807ba:	e043      	b.n	80844 <print+0x110>
				pc += prints (out, s?s:"(null)", width, pad);
   807bc:	492e      	ldr	r1, [pc, #184]	; (80878 <print+0x144>)
   807be:	e7f8      	b.n	807b2 <print+0x7e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   807c0:	9905      	ldr	r1, [sp, #20]
   807c2:	1d08      	adds	r0, r1, #4
   807c4:	9005      	str	r0, [sp, #20]
   807c6:	6809      	ldr	r1, [r1, #0]
   807c8:	2061      	movs	r0, #97	; 0x61
   807ca:	9002      	str	r0, [sp, #8]
   807cc:	9301      	str	r3, [sp, #4]
   807ce:	9200      	str	r2, [sp, #0]
   807d0:	2301      	movs	r3, #1
   807d2:	220a      	movs	r2, #10
   807d4:	4630      	mov	r0, r6
   807d6:	4f29      	ldr	r7, [pc, #164]	; (8087c <print+0x148>)
   807d8:	47b8      	blx	r7
   807da:	4405      	add	r5, r0
				continue;
   807dc:	e032      	b.n	80844 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   807de:	9905      	ldr	r1, [sp, #20]
   807e0:	1d08      	adds	r0, r1, #4
   807e2:	9005      	str	r0, [sp, #20]
   807e4:	6809      	ldr	r1, [r1, #0]
   807e6:	2061      	movs	r0, #97	; 0x61
   807e8:	9002      	str	r0, [sp, #8]
   807ea:	9301      	str	r3, [sp, #4]
   807ec:	9200      	str	r2, [sp, #0]
   807ee:	2300      	movs	r3, #0
   807f0:	2210      	movs	r2, #16
   807f2:	4630      	mov	r0, r6
   807f4:	4f21      	ldr	r7, [pc, #132]	; (8087c <print+0x148>)
   807f6:	47b8      	blx	r7
   807f8:	4405      	add	r5, r0
				continue;
   807fa:	e023      	b.n	80844 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   807fc:	9905      	ldr	r1, [sp, #20]
   807fe:	1d08      	adds	r0, r1, #4
   80800:	9005      	str	r0, [sp, #20]
   80802:	6809      	ldr	r1, [r1, #0]
   80804:	2041      	movs	r0, #65	; 0x41
   80806:	9002      	str	r0, [sp, #8]
   80808:	9301      	str	r3, [sp, #4]
   8080a:	9200      	str	r2, [sp, #0]
   8080c:	2300      	movs	r3, #0
   8080e:	2210      	movs	r2, #16
   80810:	4630      	mov	r0, r6
   80812:	4f1a      	ldr	r7, [pc, #104]	; (8087c <print+0x148>)
   80814:	47b8      	blx	r7
   80816:	4405      	add	r5, r0
				continue;
   80818:	e014      	b.n	80844 <print+0x110>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   8081a:	9905      	ldr	r1, [sp, #20]
   8081c:	1d08      	adds	r0, r1, #4
   8081e:	9005      	str	r0, [sp, #20]
   80820:	6809      	ldr	r1, [r1, #0]
   80822:	2061      	movs	r0, #97	; 0x61
   80824:	9002      	str	r0, [sp, #8]
   80826:	9301      	str	r3, [sp, #4]
   80828:	9200      	str	r2, [sp, #0]
   8082a:	2300      	movs	r3, #0
   8082c:	220a      	movs	r2, #10
   8082e:	4630      	mov	r0, r6
   80830:	4f12      	ldr	r7, [pc, #72]	; (8087c <print+0x148>)
   80832:	47b8      	blx	r7
   80834:	4405      	add	r5, r0
				continue;
   80836:	e005      	b.n	80844 <print+0x110>
			++format;
   80838:	4614      	mov	r4, r2
			}
		}
		else {
		out:
			printchar (out, *format);
   8083a:	7821      	ldrb	r1, [r4, #0]
   8083c:	4630      	mov	r0, r6
   8083e:	4b10      	ldr	r3, [pc, #64]	; (80880 <print+0x14c>)
   80840:	4798      	blx	r3
			++pc;
   80842:	3501      	adds	r5, #1
	for (; *format != 0; ++format) {
   80844:	3401      	adds	r4, #1
   80846:	7823      	ldrb	r3, [r4, #0]
   80848:	b163      	cbz	r3, 80864 <print+0x130>
		if (*format == '%') {
   8084a:	2b25      	cmp	r3, #37	; 0x25
   8084c:	d1f5      	bne.n	8083a <print+0x106>
			++format;
   8084e:	1c62      	adds	r2, r4, #1
			if (*format == '\0') break;
   80850:	7863      	ldrb	r3, [r4, #1]
   80852:	b13b      	cbz	r3, 80864 <print+0x130>
			if (*format == '%') goto out;
   80854:	2b25      	cmp	r3, #37	; 0x25
   80856:	d0ef      	beq.n	80838 <print+0x104>
			if (*format == '-') {
   80858:	2b2d      	cmp	r3, #45	; 0x2d
   8085a:	f43f af72 	beq.w	80742 <print+0xe>
			width = pad = 0;
   8085e:	2300      	movs	r3, #0
   80860:	4614      	mov	r4, r2
   80862:	e774      	b.n	8074e <print+0x1a>
		}
	}
	if (out) **out = '\0';
   80864:	b116      	cbz	r6, 8086c <print+0x138>
   80866:	6833      	ldr	r3, [r6, #0]
   80868:	2200      	movs	r2, #0
   8086a:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   8086c:	4628      	mov	r0, r5
   8086e:	b009      	add	sp, #36	; 0x24
   80870:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80872:	bf00      	nop
   80874:	00080605 	.word	0x00080605
   80878:	00080b40 	.word	0x00080b40
   8087c:	00080689 	.word	0x00080689
   80880:	000805f5 	.word	0x000805f5

00080884 <printf>:

int printf(const char *format, ...)
{
   80884:	b40f      	push	{r0, r1, r2, r3}
   80886:	b500      	push	{lr}
   80888:	b083      	sub	sp, #12
   8088a:	aa04      	add	r2, sp, #16
   8088c:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   80890:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   80892:	2000      	movs	r0, #0
   80894:	4b03      	ldr	r3, [pc, #12]	; (808a4 <printf+0x20>)
   80896:	4798      	blx	r3
}
   80898:	b003      	add	sp, #12
   8089a:	f85d eb04 	ldr.w	lr, [sp], #4
   8089e:	b004      	add	sp, #16
   808a0:	4770      	bx	lr
   808a2:	bf00      	nop
   808a4:	00080735 	.word	0x00080735

000808a8 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   808a8:	4b16      	ldr	r3, [pc, #88]	; (80904 <configure_uart+0x5c>)
   808aa:	2200      	movs	r2, #0
   808ac:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   808ae:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   808b0:	4b15      	ldr	r3, [pc, #84]	; (80908 <configure_uart+0x60>)
   808b2:	f44f 7140 	mov.w	r1, #768	; 0x300
   808b6:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   808b8:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   808ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   808bc:	6f18      	ldr	r0, [r3, #112]	; 0x70
   808be:	4002      	ands	r2, r0
   808c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   808c4:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   808c6:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   808c8:	f44f 7280 	mov.w	r2, #256	; 0x100
   808cc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   808d0:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   808d2:	f503 7300 	add.w	r3, r3, #512	; 0x200
   808d6:	21ac      	movs	r1, #172	; 0xac
   808d8:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   808da:	f240 2123 	movw	r1, #547	; 0x223
   808de:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   808e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
   808e4:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   808e6:	f240 2102 	movw	r1, #514	; 0x202
   808ea:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   808ee:	f04f 31ff 	mov.w	r1, #4294967295
   808f2:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   808f4:	21e1      	movs	r1, #225	; 0xe1
   808f6:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   808f8:	4904      	ldr	r1, [pc, #16]	; (8090c <configure_uart+0x64>)
   808fa:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   808fc:	2250      	movs	r2, #80	; 0x50
   808fe:	601a      	str	r2, [r3, #0]
   80900:	4770      	bx	lr
   80902:	bf00      	nop
   80904:	2000045c 	.word	0x2000045c
   80908:	400e0e00 	.word	0x400e0e00
   8090c:	e000e100 	.word	0xe000e100

00080910 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80910:	4b07      	ldr	r3, [pc, #28]	; (80930 <uart_putchar+0x20>)
   80912:	695b      	ldr	r3, [r3, #20]
   80914:	f013 0f02 	tst.w	r3, #2
   80918:	d008      	beq.n	8092c <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   8091a:	4b05      	ldr	r3, [pc, #20]	; (80930 <uart_putchar+0x20>)
   8091c:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   8091e:	4b04      	ldr	r3, [pc, #16]	; (80930 <uart_putchar+0x20>)
   80920:	695b      	ldr	r3, [r3, #20]
   80922:	f413 7f00 	tst.w	r3, #512	; 0x200
   80926:	d0fa      	beq.n	8091e <uart_putchar+0xe>
	return 0;
   80928:	2000      	movs	r0, #0
   8092a:	4770      	bx	lr
	return 1;
   8092c:	2001      	movs	r0, #1
}
   8092e:	4770      	bx	lr
   80930:	400e0800 	.word	0x400e0800

00080934 <UART_Handler>:

void UART_Handler(void)
{
   80934:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80936:	4b15      	ldr	r3, [pc, #84]	; (8098c <UART_Handler+0x58>)
   80938:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   8093a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   8093e:	d003      	beq.n	80948 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80940:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80944:	4a11      	ldr	r2, [pc, #68]	; (8098c <UART_Handler+0x58>)
   80946:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80948:	f013 0f01 	tst.w	r3, #1
   8094c:	d012      	beq.n	80974 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   8094e:	4810      	ldr	r0, [pc, #64]	; (80990 <UART_Handler+0x5c>)
   80950:	7842      	ldrb	r2, [r0, #1]
   80952:	1c53      	adds	r3, r2, #1
   80954:	4259      	negs	r1, r3
   80956:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   8095a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   8095e:	bf58      	it	pl
   80960:	424b      	negpl	r3, r1
   80962:	7801      	ldrb	r1, [r0, #0]
   80964:	428b      	cmp	r3, r1
   80966:	d006      	beq.n	80976 <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80968:	4908      	ldr	r1, [pc, #32]	; (8098c <UART_Handler+0x58>)
   8096a:	6988      	ldr	r0, [r1, #24]
   8096c:	4908      	ldr	r1, [pc, #32]	; (80990 <UART_Handler+0x5c>)
   8096e:	440a      	add	r2, r1
   80970:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80972:	704b      	strb	r3, [r1, #1]
   80974:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80976:	4807      	ldr	r0, [pc, #28]	; (80994 <UART_Handler+0x60>)
   80978:	4b07      	ldr	r3, [pc, #28]	; (80998 <UART_Handler+0x64>)
   8097a:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   8097c:	4b04      	ldr	r3, [pc, #16]	; (80990 <UART_Handler+0x5c>)
   8097e:	7859      	ldrb	r1, [r3, #1]
   80980:	4a02      	ldr	r2, [pc, #8]	; (8098c <UART_Handler+0x58>)
   80982:	6992      	ldr	r2, [r2, #24]
   80984:	440b      	add	r3, r1
   80986:	709a      	strb	r2, [r3, #2]
			return;
   80988:	bd08      	pop	{r3, pc}
   8098a:	bf00      	nop
   8098c:	400e0800 	.word	0x400e0800
   80990:	2000045c 	.word	0x2000045c
   80994:	00080b48 	.word	0x00080b48
   80998:	00080885 	.word	0x00080885

0008099c <__libc_init_array>:
   8099c:	b570      	push	{r4, r5, r6, lr}
   8099e:	4e0f      	ldr	r6, [pc, #60]	; (809dc <__libc_init_array+0x40>)
   809a0:	4d0f      	ldr	r5, [pc, #60]	; (809e0 <__libc_init_array+0x44>)
   809a2:	1b76      	subs	r6, r6, r5
   809a4:	10b6      	asrs	r6, r6, #2
   809a6:	bf18      	it	ne
   809a8:	2400      	movne	r4, #0
   809aa:	d005      	beq.n	809b8 <__libc_init_array+0x1c>
   809ac:	3401      	adds	r4, #1
   809ae:	f855 3b04 	ldr.w	r3, [r5], #4
   809b2:	4798      	blx	r3
   809b4:	42a6      	cmp	r6, r4
   809b6:	d1f9      	bne.n	809ac <__libc_init_array+0x10>
   809b8:	4e0a      	ldr	r6, [pc, #40]	; (809e4 <__libc_init_array+0x48>)
   809ba:	4d0b      	ldr	r5, [pc, #44]	; (809e8 <__libc_init_array+0x4c>)
   809bc:	f000 f8d6 	bl	80b6c <_init>
   809c0:	1b76      	subs	r6, r6, r5
   809c2:	10b6      	asrs	r6, r6, #2
   809c4:	bf18      	it	ne
   809c6:	2400      	movne	r4, #0
   809c8:	d006      	beq.n	809d8 <__libc_init_array+0x3c>
   809ca:	3401      	adds	r4, #1
   809cc:	f855 3b04 	ldr.w	r3, [r5], #4
   809d0:	4798      	blx	r3
   809d2:	42a6      	cmp	r6, r4
   809d4:	d1f9      	bne.n	809ca <__libc_init_array+0x2e>
   809d6:	bd70      	pop	{r4, r5, r6, pc}
   809d8:	bd70      	pop	{r4, r5, r6, pc}
   809da:	bf00      	nop
   809dc:	00080b78 	.word	0x00080b78
   809e0:	00080b78 	.word	0x00080b78
   809e4:	00080b80 	.word	0x00080b80
   809e8:	00080b78 	.word	0x00080b78

000809ec <register_fini>:
   809ec:	4b02      	ldr	r3, [pc, #8]	; (809f8 <register_fini+0xc>)
   809ee:	b113      	cbz	r3, 809f6 <register_fini+0xa>
   809f0:	4802      	ldr	r0, [pc, #8]	; (809fc <register_fini+0x10>)
   809f2:	f000 b805 	b.w	80a00 <atexit>
   809f6:	4770      	bx	lr
   809f8:	00000000 	.word	0x00000000
   809fc:	00080a0d 	.word	0x00080a0d

00080a00 <atexit>:
   80a00:	2300      	movs	r3, #0
   80a02:	4601      	mov	r1, r0
   80a04:	461a      	mov	r2, r3
   80a06:	4618      	mov	r0, r3
   80a08:	f000 b81e 	b.w	80a48 <__register_exitproc>

00080a0c <__libc_fini_array>:
   80a0c:	b538      	push	{r3, r4, r5, lr}
   80a0e:	4c0a      	ldr	r4, [pc, #40]	; (80a38 <__libc_fini_array+0x2c>)
   80a10:	4d0a      	ldr	r5, [pc, #40]	; (80a3c <__libc_fini_array+0x30>)
   80a12:	1b64      	subs	r4, r4, r5
   80a14:	10a4      	asrs	r4, r4, #2
   80a16:	d00a      	beq.n	80a2e <__libc_fini_array+0x22>
   80a18:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80a1c:	3b01      	subs	r3, #1
   80a1e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80a22:	3c01      	subs	r4, #1
   80a24:	f855 3904 	ldr.w	r3, [r5], #-4
   80a28:	4798      	blx	r3
   80a2a:	2c00      	cmp	r4, #0
   80a2c:	d1f9      	bne.n	80a22 <__libc_fini_array+0x16>
   80a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80a32:	f000 b8a5 	b.w	80b80 <_fini>
   80a36:	bf00      	nop
   80a38:	00080b90 	.word	0x00080b90
   80a3c:	00080b8c 	.word	0x00080b8c

00080a40 <__retarget_lock_acquire_recursive>:
   80a40:	4770      	bx	lr
   80a42:	bf00      	nop

00080a44 <__retarget_lock_release_recursive>:
   80a44:	4770      	bx	lr
   80a46:	bf00      	nop

00080a48 <__register_exitproc>:
   80a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80a4c:	4d2c      	ldr	r5, [pc, #176]	; (80b00 <__register_exitproc+0xb8>)
   80a4e:	4606      	mov	r6, r0
   80a50:	6828      	ldr	r0, [r5, #0]
   80a52:	4698      	mov	r8, r3
   80a54:	460f      	mov	r7, r1
   80a56:	4691      	mov	r9, r2
   80a58:	f7ff fff2 	bl	80a40 <__retarget_lock_acquire_recursive>
   80a5c:	4b29      	ldr	r3, [pc, #164]	; (80b04 <__register_exitproc+0xbc>)
   80a5e:	681c      	ldr	r4, [r3, #0]
   80a60:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80a64:	2b00      	cmp	r3, #0
   80a66:	d03e      	beq.n	80ae6 <__register_exitproc+0x9e>
   80a68:	685a      	ldr	r2, [r3, #4]
   80a6a:	2a1f      	cmp	r2, #31
   80a6c:	dc1c      	bgt.n	80aa8 <__register_exitproc+0x60>
   80a6e:	f102 0e01 	add.w	lr, r2, #1
   80a72:	b176      	cbz	r6, 80a92 <__register_exitproc+0x4a>
   80a74:	2101      	movs	r1, #1
   80a76:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80a7a:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80a7e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80a82:	4091      	lsls	r1, r2
   80a84:	4308      	orrs	r0, r1
   80a86:	2e02      	cmp	r6, #2
   80a88:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80a8c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80a90:	d023      	beq.n	80ada <__register_exitproc+0x92>
   80a92:	3202      	adds	r2, #2
   80a94:	f8c3 e004 	str.w	lr, [r3, #4]
   80a98:	6828      	ldr	r0, [r5, #0]
   80a9a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80a9e:	f7ff ffd1 	bl	80a44 <__retarget_lock_release_recursive>
   80aa2:	2000      	movs	r0, #0
   80aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80aa8:	4b17      	ldr	r3, [pc, #92]	; (80b08 <__register_exitproc+0xc0>)
   80aaa:	b30b      	cbz	r3, 80af0 <__register_exitproc+0xa8>
   80aac:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80ab0:	f3af 8000 	nop.w
   80ab4:	4603      	mov	r3, r0
   80ab6:	b1d8      	cbz	r0, 80af0 <__register_exitproc+0xa8>
   80ab8:	2000      	movs	r0, #0
   80aba:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80abe:	f04f 0e01 	mov.w	lr, #1
   80ac2:	6058      	str	r0, [r3, #4]
   80ac4:	6019      	str	r1, [r3, #0]
   80ac6:	4602      	mov	r2, r0
   80ac8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80acc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80ad0:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80ad4:	2e00      	cmp	r6, #0
   80ad6:	d0dc      	beq.n	80a92 <__register_exitproc+0x4a>
   80ad8:	e7cc      	b.n	80a74 <__register_exitproc+0x2c>
   80ada:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80ade:	4301      	orrs	r1, r0
   80ae0:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80ae4:	e7d5      	b.n	80a92 <__register_exitproc+0x4a>
   80ae6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80aea:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80aee:	e7bb      	b.n	80a68 <__register_exitproc+0x20>
   80af0:	6828      	ldr	r0, [r5, #0]
   80af2:	f7ff ffa7 	bl	80a44 <__retarget_lock_release_recursive>
   80af6:	f04f 30ff 	mov.w	r0, #4294967295
   80afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80afe:	bf00      	nop
   80b00:	20000430 	.word	0x20000430
   80b04:	00080b68 	.word	0x00080b68
   80b08:	00000000 	.word	0x00000000
   80b0c:	304e4143 	.word	0x304e4143
   80b10:	73656d20 	.word	0x73656d20
   80b14:	65676173 	.word	0x65676173
   80b18:	72726120 	.word	0x72726120
   80b1c:	64657669 	.word	0x64657669
   80b20:	206e6920 	.word	0x206e6920
   80b24:	2d6e6f6e 	.word	0x2d6e6f6e
   80b28:	64657375 	.word	0x64657375
   80b2c:	69616d20 	.word	0x69616d20
   80b30:	786f626c 	.word	0x786f626c
   80b34:	00000d0a 	.word	0x00000d0a
   80b38:	0d0a6425 	.word	0x0d0a6425
   80b3c:	00000000 	.word	0x00000000
   80b40:	6c756e28 	.word	0x6c756e28
   80b44:	0000296c 	.word	0x0000296c
   80b48:	3a525245 	.word	0x3a525245
   80b4c:	52415520 	.word	0x52415520
   80b50:	58522054 	.word	0x58522054
   80b54:	66756220 	.word	0x66756220
   80b58:	20726566 	.word	0x20726566
   80b5c:	66207369 	.word	0x66207369
   80b60:	0a6c6c75 	.word	0x0a6c6c75
   80b64:	0000000d 	.word	0x0000000d

00080b68 <_global_impure_ptr>:
   80b68:	20000008                                ... 

00080b6c <_init>:
   80b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80b6e:	bf00      	nop
   80b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80b72:	bc08      	pop	{r3}
   80b74:	469e      	mov	lr, r3
   80b76:	4770      	bx	lr

00080b78 <__init_array_start>:
   80b78:	000809ed 	.word	0x000809ed

00080b7c <__frame_dummy_init_array_entry>:
   80b7c:	00080119                                ....

00080b80 <_fini>:
   80b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80b82:	bf00      	nop
   80b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80b86:	bc08      	pop	{r3}
   80b88:	469e      	mov	lr, r3
   80b8a:	4770      	bx	lr

00080b8c <__fini_array_start>:
   80b8c:	000800f5 	.word	0x000800f5
