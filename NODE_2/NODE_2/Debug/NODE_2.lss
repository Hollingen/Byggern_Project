
NODE_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000142c  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  0008142c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000098  20000434  00081860  00020434  2**2
                  ALLOC
  3 .stack        00000404  200004cc  000818f8  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008d0  00081cfc  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00008d5c  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000171e  00000000  00000000  00029212  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001282  00000000  00000000  0002a930  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000280  00000000  00000000  0002bbb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e0  00000000  00000000  0002be32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001397e  00000000  00000000  0002c012  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005c1b  00000000  00000000  0003f990  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00055899  00000000  00000000  000455ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000724  00000000  00000000  0009ae44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	d0 08 00 20 e9 03 08 00 e5 03 08 00 e5 03 08 00     ... ............
   80010:	e5 03 08 00 e5 03 08 00 e5 03 08 00 00 00 00 00     ................
	...
   8002c:	e5 03 08 00 e5 03 08 00 00 00 00 00 e5 03 08 00     ................
   8003c:	e5 03 08 00 e5 03 08 00 e5 03 08 00 e5 03 08 00     ................
   8004c:	e5 03 08 00 e5 03 08 00 e5 03 08 00 e5 03 08 00     ................
   8005c:	e5 03 08 00 b1 0c 08 00 e5 03 08 00 00 00 00 00     ................
   8006c:	e5 03 08 00 e5 03 08 00 e5 03 08 00 e5 03 08 00     ................
	...
   80084:	e5 03 08 00 e5 03 08 00 e5 03 08 00 e5 03 08 00     ................
   80094:	e5 03 08 00 e5 03 08 00 e5 03 08 00 e5 03 08 00     ................
   800a4:	00 00 00 00 e5 03 08 00 e5 03 08 00 e5 03 08 00     ................
   800b4:	e5 03 08 00 e5 03 08 00 e5 03 08 00 e5 03 08 00     ................
   800c4:	e5 03 08 00 e5 03 08 00 e5 03 08 00 e5 03 08 00     ................
   800d4:	e5 03 08 00 e5 03 08 00 e5 03 08 00 e5 03 08 00     ................
   800e4:	e5 03 08 00 e5 03 08 00 41 03 08 00 e5 03 08 00     ........A.......

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	0008142c 	.word	0x0008142c

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	0008142c 	.word	0x0008142c
   80154:	20000438 	.word	0x20000438
   80158:	0008142c 	.word	0x0008142c
   8015c:	00000000 	.word	0x00000000

00080160 <ADC2_init>:


void ADC2_init(){

    // SEting the peropheral clock
    PMC->PMC_PCER1 |= PMC_PCER1_PID37;
   80160:	4a06      	ldr	r2, [pc, #24]	; (8017c <ADC2_init+0x1c>)
   80162:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80166:	f043 0320 	orr.w	r3, r3, #32
   8016a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    // Setting FREERUN mode, no trigger neeeded
    // Starts a new conversion when it's done
    ADC->ADC_MR = ADC_MR_FREERUN;
   8016e:	4b04      	ldr	r3, [pc, #16]	; (80180 <ADC2_init+0x20>)
   80170:	2280      	movs	r2, #128	; 0x80
   80172:	605a      	str	r2, [r3, #4]

    // Choosing channel 4
    // a.k.a PA22 a.k.a AD3
    ADC->ADC_CHER = ADC_CHER_CH4;
   80174:	2210      	movs	r2, #16
   80176:	611a      	str	r2, [r3, #16]
   80178:	4770      	bx	lr
   8017a:	bf00      	nop
   8017c:	400e0600 	.word	0x400e0600
   80180:	400c0000 	.word	0x400c0000

00080184 <ADC2_read>:
    
}

uint16_t ADC2_read(){
    // Reading from channel 0
    uint16_t readings = ADC->ADC_CDR[4];
   80184:	4b01      	ldr	r3, [pc, #4]	; (8018c <ADC2_read+0x8>)
   80186:	6e18      	ldr	r0, [r3, #96]	; 0x60

    return readings;
}
   80188:	b280      	uxth	r0, r0
   8018a:	4770      	bx	lr
   8018c:	400c0000 	.word	0x400c0000

00080190 <IR_check_goal>:


uint8_t IR_check_goal(){
   80190:	b508      	push	{r3, lr}
    uint16_t IR_value = ADC2_read();
   80192:	4b0b      	ldr	r3, [pc, #44]	; (801c0 <IR_check_goal+0x30>)
   80194:	4798      	blx	r3
    if((IR_value < IR_THRESHOLD) && (IR_prev_value >= IR_THRESHOLD) && !IR_goal) {
   80196:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   8019a:	d207      	bcs.n	801ac <IR_check_goal+0x1c>
   8019c:	4b09      	ldr	r3, [pc, #36]	; (801c4 <IR_check_goal+0x34>)
   8019e:	681b      	ldr	r3, [r3, #0]
   801a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   801a4:	d302      	bcc.n	801ac <IR_check_goal+0x1c>
   801a6:	4b07      	ldr	r3, [pc, #28]	; (801c4 <IR_check_goal+0x34>)
   801a8:	791b      	ldrb	r3, [r3, #4]
   801aa:	b11b      	cbz	r3, 801b4 <IR_check_goal+0x24>
		IR_prev_value = IR_value;
		IR_goal = 1;
		return 1;
	} else {
		IR_prev_value = IR_value;
   801ac:	4b05      	ldr	r3, [pc, #20]	; (801c4 <IR_check_goal+0x34>)
   801ae:	6018      	str	r0, [r3, #0]
		return 0;
   801b0:	2000      	movs	r0, #0
	}
}
   801b2:	bd08      	pop	{r3, pc}
		IR_prev_value = IR_value;
   801b4:	4b03      	ldr	r3, [pc, #12]	; (801c4 <IR_check_goal+0x34>)
   801b6:	6018      	str	r0, [r3, #0]
		IR_goal = 1;
   801b8:	2001      	movs	r0, #1
   801ba:	7118      	strb	r0, [r3, #4]
		return 1;
   801bc:	bd08      	pop	{r3, pc}
   801be:	bf00      	nop
   801c0:	00080185 	.word	0x00080185
   801c4:	20000450 	.word	0x20000450

000801c8 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   801c8:	b4f0      	push	{r4, r5, r6, r7}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   801ca:	1857      	adds	r7, r2, r1
   801cc:	2f08      	cmp	r7, #8
   801ce:	bfd4      	ite	le
   801d0:	2300      	movle	r3, #0
   801d2:	2301      	movgt	r3, #1
   801d4:	2908      	cmp	r1, #8
   801d6:	bf98      	it	ls
   801d8:	2a08      	cmpls	r2, #8
   801da:	d85c      	bhi.n	80296 <can_init+0xce>
   801dc:	460d      	mov	r5, r1
   801de:	2b00      	cmp	r3, #0
   801e0:	d159      	bne.n	80296 <can_init+0xce>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   801e2:	4a2e      	ldr	r2, [pc, #184]	; (8029c <can_init+0xd4>)
   801e4:	6813      	ldr	r3, [r2, #0]
   801e6:	f023 0301 	bic.w	r3, r3, #1
   801ea:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   801ec:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   801ee:	4b2c      	ldr	r3, [pc, #176]	; (802a0 <can_init+0xd8>)
   801f0:	f44f 7440 	mov.w	r4, #768	; 0x300
   801f4:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   801f6:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   801f8:	f024 0403 	bic.w	r4, r4, #3
   801fc:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   801fe:	2403      	movs	r4, #3
   80200:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   80202:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   80204:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80208:	4c26      	ldr	r4, [pc, #152]	; (802a4 <can_init+0xdc>)
   8020a:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   8020e:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   80212:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   80216:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   8021a:	6150      	str	r0, [r2, #20]
	

	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;
   8021c:	2400      	movs	r4, #0

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   8021e:	e019      	b.n	80254 <can_init+0x8c>
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   80220:	481e      	ldr	r0, [pc, #120]	; (8029c <can_init+0xd4>)
   80222:	f101 0310 	add.w	r3, r1, #16
   80226:	015b      	lsls	r3, r3, #5
   80228:	18c2      	adds	r2, r0, r3
   8022a:	2600      	movs	r6, #0
   8022c:	6056      	str	r6, [r2, #4]
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   8022e:	eb00 1241 	add.w	r2, r0, r1, lsl #5
   80232:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
   80236:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   8023a:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
   8023e:	50c6      	str	r6, [r0, r3]
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   80240:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
   80244:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   80248:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   8024c:	2301      	movs	r3, #1
   8024e:	408b      	lsls	r3, r1
   80250:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   80252:	3101      	adds	r1, #1
   80254:	42b9      	cmp	r1, r7
   80256:	dde3      	ble.n	80220 <can_init+0x58>
   80258:	2300      	movs	r3, #0
   8025a:	e00d      	b.n	80278 <can_init+0xb0>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   8025c:	490f      	ldr	r1, [pc, #60]	; (8029c <can_init+0xd4>)
   8025e:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80262:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   80266:	f8c2 0208 	str.w	r0, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   8026a:	f103 0210 	add.w	r2, r3, #16
   8026e:	0152      	lsls	r2, r2, #5
   80270:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   80274:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   80276:	3301      	adds	r3, #1
   80278:	42ab      	cmp	r3, r5
   8027a:	dbef      	blt.n	8025c <can_init+0x94>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   8027c:	4b07      	ldr	r3, [pc, #28]	; (8029c <can_init+0xd4>)
   8027e:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80280:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80284:	4a08      	ldr	r2, [pc, #32]	; (802a8 <can_init+0xe0>)
   80286:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80288:	681a      	ldr	r2, [r3, #0]
   8028a:	f042 0201 	orr.w	r2, r2, #1
   8028e:	601a      	str	r2, [r3, #0]

	return 0;
   80290:	2000      	movs	r0, #0
}
   80292:	bcf0      	pop	{r4, r5, r6, r7}
   80294:	4770      	bx	lr
		return 1; //Too many mailboxes is configured
   80296:	2001      	movs	r0, #1
   80298:	e7fb      	b.n	80292 <can_init+0xca>
   8029a:	bf00      	nop
   8029c:	400b4000 	.word	0x400b4000
   802a0:	400e0e00 	.word	0x400e0e00
   802a4:	1000102b 	.word	0x1000102b
   802a8:	e000e100 	.word	0xe000e100

000802ac <can_init_def_tx_rx_mb>:
{
   802ac:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   802ae:	2202      	movs	r2, #2
   802b0:	2101      	movs	r1, #1
   802b2:	4b01      	ldr	r3, [pc, #4]	; (802b8 <can_init_def_tx_rx_mb+0xc>)
   802b4:	4798      	blx	r3
}
   802b6:	bd08      	pop	{r3, pc}
   802b8:	000801c9 	.word	0x000801c9

000802bc <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   802bc:	014b      	lsls	r3, r1, #5
   802be:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802c2:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   802ca:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   802ce:	d033      	beq.n	80338 <can_receive+0x7c>
{
   802d0:	b470      	push	{r4, r5, r6}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   802d2:	014b      	lsls	r3, r1, #5
   802d4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802d8:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802dc:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   802e0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   802e4:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   802e8:	f3c5 458a 	ubfx	r5, r5, #18, #11
   802ec:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   802ee:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   802f2:	f3c5 4503 	ubfx	r5, r5, #16, #4
   802f6:	7085      	strb	r5, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   802f8:	2300      	movs	r3, #0
   802fa:	e003      	b.n	80304 <can_receive+0x48>
				can_msg->data[i] = (char)(data_low & 0xff);
				data_low = data_low >> 8;
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   802fc:	18c6      	adds	r6, r0, r3
   802fe:	70f2      	strb	r2, [r6, #3]
				data_high = data_high >> 8;
   80300:	0a12      	lsrs	r2, r2, #8
		for(int i = 0; i < can_msg->data_length;i++)
   80302:	3301      	adds	r3, #1
   80304:	42ab      	cmp	r3, r5
   80306:	da05      	bge.n	80314 <can_receive+0x58>
			if(i < 4)
   80308:	2b03      	cmp	r3, #3
   8030a:	dcf7      	bgt.n	802fc <can_receive+0x40>
				can_msg->data[i] = (char)(data_low & 0xff);
   8030c:	18c6      	adds	r6, r0, r3
   8030e:	70f4      	strb	r4, [r6, #3]
				data_low = data_low >> 8;
   80310:	0a24      	lsrs	r4, r4, #8
   80312:	e7f6      	b.n	80302 <can_receive+0x46>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   80314:	4b09      	ldr	r3, [pc, #36]	; (8033c <can_receive+0x80>)
   80316:	f101 0210 	add.w	r2, r1, #16
   8031a:	0152      	lsls	r2, r2, #5
   8031c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   80320:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   80322:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   80326:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   8032a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   8032e:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   80332:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   80334:	bc70      	pop	{r4, r5, r6}
   80336:	4770      	bx	lr
		return 1;
   80338:	2001      	movs	r0, #1
   8033a:	4770      	bx	lr
   8033c:	400b4000 	.word	0x400b4000

00080340 <CAN0_Handler>:
 * \retval 
 */


void CAN0_Handler( void )
{
   80340:	b510      	push	{r4, lr}
   80342:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   80344:	4b1b      	ldr	r3, [pc, #108]	; (803b4 <CAN0_Handler+0x74>)
   80346:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   80348:	f014 0f06 	tst.w	r4, #6
   8034c:	d025      	beq.n	8039a <CAN0_Handler+0x5a>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   8034e:	f014 0f02 	tst.w	r4, #2
   80352:	d10f      	bne.n	80374 <CAN0_Handler+0x34>
		{
			can_receive(&message, 1);
			

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   80354:	f014 0f04 	tst.w	r4, #4
   80358:	d011      	beq.n	8037e <CAN0_Handler+0x3e>
		
		{
			can_receive(&message, 2);
   8035a:	2102      	movs	r1, #2
   8035c:	a801      	add	r0, sp, #4
   8035e:	4b16      	ldr	r3, [pc, #88]	; (803b8 <CAN0_Handler+0x78>)
   80360:	4798      	blx	r3
		{
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		msgs.id = message.id;
   80362:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   80366:	4b15      	ldr	r3, [pc, #84]	; (803bc <CAN0_Handler+0x7c>)
   80368:	801a      	strh	r2, [r3, #0]
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		msgs.data_length = message.data_length;
   8036a:	f89d 0006 	ldrb.w	r0, [sp, #6]
   8036e:	7098      	strb	r0, [r3, #2]
		for (int i = 0; i < message.data_length; i++)
   80370:	2300      	movs	r3, #0
   80372:	e010      	b.n	80396 <CAN0_Handler+0x56>
			can_receive(&message, 1);
   80374:	2101      	movs	r1, #1
   80376:	a801      	add	r0, sp, #4
   80378:	4b0f      	ldr	r3, [pc, #60]	; (803b8 <CAN0_Handler+0x78>)
   8037a:	4798      	blx	r3
   8037c:	e7f1      	b.n	80362 <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   8037e:	4810      	ldr	r0, [pc, #64]	; (803c0 <CAN0_Handler+0x80>)
   80380:	4b10      	ldr	r3, [pc, #64]	; (803c4 <CAN0_Handler+0x84>)
   80382:	4798      	blx	r3
   80384:	e7ed      	b.n	80362 <CAN0_Handler+0x22>
		{
			msgs.data[i] = message.data[i];
   80386:	aa04      	add	r2, sp, #16
   80388:	441a      	add	r2, r3
   8038a:	f912 1c09 	ldrsb.w	r1, [r2, #-9]
   8038e:	4a0b      	ldr	r2, [pc, #44]	; (803bc <CAN0_Handler+0x7c>)
   80390:	441a      	add	r2, r3
   80392:	70d1      	strb	r1, [r2, #3]
		for (int i = 0; i < message.data_length; i++)
   80394:	3301      	adds	r3, #1
   80396:	4283      	cmp	r3, r0
   80398:	dbf5      	blt.n	80386 <CAN0_Handler+0x46>
		if(DEBUG_INTERRUPT)printf("\n\r");
		
		//can_send(&message, 0);
	}
	
	if(can_sr & CAN_SR_MB0)
   8039a:	f014 0f01 	tst.w	r4, #1
   8039e:	d002      	beq.n	803a6 <CAN0_Handler+0x66>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   803a0:	2201      	movs	r2, #1
   803a2:	4b04      	ldr	r3, [pc, #16]	; (803b4 <CAN0_Handler+0x74>)
   803a4:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   803a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   803aa:	4b07      	ldr	r3, [pc, #28]	; (803c8 <CAN0_Handler+0x88>)
   803ac:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   803b0:	b004      	add	sp, #16
   803b2:	bd10      	pop	{r4, pc}
   803b4:	400b4000 	.word	0x400b4000
   803b8:	000802bd 	.word	0x000802bd
   803bc:	20000458 	.word	0x20000458
   803c0:	00081390 	.word	0x00081390
   803c4:	00080c01 	.word	0x00080c01
   803c8:	e000e100 	.word	0xe000e100

000803cc <get_msg>:

CAN_MESSAGE get_msg(){
   803cc:	b410      	push	{r4}
	return msgs;
   803ce:	4a04      	ldr	r2, [pc, #16]	; (803e0 <get_msg+0x14>)
   803d0:	6814      	ldr	r4, [r2, #0]
   803d2:	6851      	ldr	r1, [r2, #4]
   803d4:	6892      	ldr	r2, [r2, #8]
   803d6:	6004      	str	r4, [r0, #0]
   803d8:	6041      	str	r1, [r0, #4]
   803da:	6082      	str	r2, [r0, #8]
}
   803dc:	bc10      	pop	{r4}
   803de:	4770      	bx	lr
   803e0:	20000458 	.word	0x20000458

000803e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   803e4:	e7fe      	b.n	803e4 <Dummy_Handler>
	...

000803e8 <Reset_Handler>:
{
   803e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   803ea:	4b11      	ldr	r3, [pc, #68]	; (80430 <Reset_Handler+0x48>)
   803ec:	4a11      	ldr	r2, [pc, #68]	; (80434 <Reset_Handler+0x4c>)
   803ee:	429a      	cmp	r2, r3
   803f0:	d009      	beq.n	80406 <Reset_Handler+0x1e>
   803f2:	4b0f      	ldr	r3, [pc, #60]	; (80430 <Reset_Handler+0x48>)
   803f4:	4a0f      	ldr	r2, [pc, #60]	; (80434 <Reset_Handler+0x4c>)
   803f6:	e003      	b.n	80400 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
   803f8:	6811      	ldr	r1, [r2, #0]
   803fa:	6019      	str	r1, [r3, #0]
   803fc:	3304      	adds	r3, #4
   803fe:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   80400:	490d      	ldr	r1, [pc, #52]	; (80438 <Reset_Handler+0x50>)
   80402:	428b      	cmp	r3, r1
   80404:	d3f8      	bcc.n	803f8 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   80406:	4b0d      	ldr	r3, [pc, #52]	; (8043c <Reset_Handler+0x54>)
   80408:	e002      	b.n	80410 <Reset_Handler+0x28>
                *pDest++ = 0;
   8040a:	2200      	movs	r2, #0
   8040c:	601a      	str	r2, [r3, #0]
   8040e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
   80410:	4a0b      	ldr	r2, [pc, #44]	; (80440 <Reset_Handler+0x58>)
   80412:	4293      	cmp	r3, r2
   80414:	d3f9      	bcc.n	8040a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80416:	4b0b      	ldr	r3, [pc, #44]	; (80444 <Reset_Handler+0x5c>)
   80418:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   8041c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80420:	4a09      	ldr	r2, [pc, #36]	; (80448 <Reset_Handler+0x60>)
   80422:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   80424:	4b09      	ldr	r3, [pc, #36]	; (8044c <Reset_Handler+0x64>)
   80426:	4798      	blx	r3
        main();
   80428:	4b09      	ldr	r3, [pc, #36]	; (80450 <Reset_Handler+0x68>)
   8042a:	4798      	blx	r3
   8042c:	e7fe      	b.n	8042c <Reset_Handler+0x44>
   8042e:	bf00      	nop
   80430:	20000000 	.word	0x20000000
   80434:	0008142c 	.word	0x0008142c
   80438:	20000434 	.word	0x20000434
   8043c:	20000434 	.word	0x20000434
   80440:	200004cc 	.word	0x200004cc
   80444:	00080000 	.word	0x00080000
   80448:	e000ed00 	.word	0xe000ed00
   8044c:	00081221 	.word	0x00081221
   80450:	000804f9 	.word	0x000804f9

00080454 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   80454:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80458:	4a20      	ldr	r2, [pc, #128]	; (804dc <SystemInit+0x88>)
   8045a:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   8045c:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80460:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   80462:	4b1f      	ldr	r3, [pc, #124]	; (804e0 <SystemInit+0x8c>)
   80464:	6a1b      	ldr	r3, [r3, #32]
   80466:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8046a:	d107      	bne.n	8047c <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   8046c:	4a1d      	ldr	r2, [pc, #116]	; (804e4 <SystemInit+0x90>)
   8046e:	4b1c      	ldr	r3, [pc, #112]	; (804e0 <SystemInit+0x8c>)
   80470:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   80472:	4b1b      	ldr	r3, [pc, #108]	; (804e0 <SystemInit+0x8c>)
   80474:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80476:	f013 0f01 	tst.w	r3, #1
   8047a:	d0fa      	beq.n	80472 <SystemInit+0x1e>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   8047c:	4a1a      	ldr	r2, [pc, #104]	; (804e8 <SystemInit+0x94>)
   8047e:	4b18      	ldr	r3, [pc, #96]	; (804e0 <SystemInit+0x8c>)
   80480:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   80482:	4b17      	ldr	r3, [pc, #92]	; (804e0 <SystemInit+0x8c>)
   80484:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80486:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   8048a:	d0fa      	beq.n	80482 <SystemInit+0x2e>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   8048c:	4a14      	ldr	r2, [pc, #80]	; (804e0 <SystemInit+0x8c>)
   8048e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80490:	f023 0303 	bic.w	r3, r3, #3
   80494:	f043 0301 	orr.w	r3, r3, #1
   80498:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   8049a:	4b11      	ldr	r3, [pc, #68]	; (804e0 <SystemInit+0x8c>)
   8049c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8049e:	f013 0f08 	tst.w	r3, #8
   804a2:	d0fa      	beq.n	8049a <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   804a4:	4a11      	ldr	r2, [pc, #68]	; (804ec <SystemInit+0x98>)
   804a6:	4b0e      	ldr	r3, [pc, #56]	; (804e0 <SystemInit+0x8c>)
   804a8:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   804aa:	4b0d      	ldr	r3, [pc, #52]	; (804e0 <SystemInit+0x8c>)
   804ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804ae:	f013 0f02 	tst.w	r3, #2
   804b2:	d0fa      	beq.n	804aa <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   804b4:	2211      	movs	r2, #17
   804b6:	4b0a      	ldr	r3, [pc, #40]	; (804e0 <SystemInit+0x8c>)
   804b8:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   804ba:	4b09      	ldr	r3, [pc, #36]	; (804e0 <SystemInit+0x8c>)
   804bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804be:	f013 0f08 	tst.w	r3, #8
   804c2:	d0fa      	beq.n	804ba <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   804c4:	2212      	movs	r2, #18
   804c6:	4b06      	ldr	r3, [pc, #24]	; (804e0 <SystemInit+0x8c>)
   804c8:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   804ca:	4b05      	ldr	r3, [pc, #20]	; (804e0 <SystemInit+0x8c>)
   804cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804ce:	f013 0f08 	tst.w	r3, #8
   804d2:	d0fa      	beq.n	804ca <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   804d4:	4a06      	ldr	r2, [pc, #24]	; (804f0 <SystemInit+0x9c>)
   804d6:	4b07      	ldr	r3, [pc, #28]	; (804f4 <SystemInit+0xa0>)
   804d8:	601a      	str	r2, [r3, #0]
   804da:	4770      	bx	lr
   804dc:	400e0a00 	.word	0x400e0a00
   804e0:	400e0600 	.word	0x400e0600
   804e4:	00370809 	.word	0x00370809
   804e8:	01370809 	.word	0x01370809
   804ec:	200d3f01 	.word	0x200d3f01
   804f0:	0501bd00 	.word	0x0501bd00
   804f4:	20000000 	.word	0x20000000

000804f8 <main>:


#define can_br 0x290165

int main(void)
{
   804f8:	b530      	push	{r4, r5, lr}
   804fa:	b091      	sub	sp, #68	; 0x44
    /* Initialize the SAM system */
	
    SystemInit();
   804fc:	4b33      	ldr	r3, [pc, #204]	; (805cc <main+0xd4>)
   804fe:	4798      	blx	r3
	can_init_def_tx_rx_mb(can_br);
   80500:	4833      	ldr	r0, [pc, #204]	; (805d0 <main+0xd8>)
   80502:	4b34      	ldr	r3, [pc, #208]	; (805d4 <main+0xdc>)
   80504:	4798      	blx	r3
	configure_uart();
   80506:	4b34      	ldr	r3, [pc, #208]	; (805d8 <main+0xe0>)
   80508:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS;
   8050a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8050e:	4b33      	ldr	r3, [pc, #204]	; (805dc <main+0xe4>)
   80510:	605a      	str	r2, [r3, #4]
	CAN_MESSAGE meld; 
	pidData_t pidData;
	
	CAN0_Handler();
   80512:	4b33      	ldr	r3, [pc, #204]	; (805e0 <main+0xe8>)
   80514:	4798      	blx	r3
	timer_init();
   80516:	4b33      	ldr	r3, [pc, #204]	; (805e4 <main+0xec>)
   80518:	4798      	blx	r3
	PWM_init();
   8051a:	4b33      	ldr	r3, [pc, #204]	; (805e8 <main+0xf0>)
   8051c:	4798      	blx	r3
	PWM_set_period_percentage(100);
   8051e:	2064      	movs	r0, #100	; 0x64
   80520:	4b32      	ldr	r3, [pc, #200]	; (805ec <main+0xf4>)
   80522:	4798      	blx	r3
	ADC2_init();
   80524:	4b32      	ldr	r3, [pc, #200]	; (805f0 <main+0xf8>)
   80526:	4798      	blx	r3
	
	solenoid_init();
   80528:	4b32      	ldr	r3, [pc, #200]	; (805f4 <main+0xfc>)
   8052a:	4798      	blx	r3
	motor_init();
   8052c:	4b32      	ldr	r3, [pc, #200]	; (805f8 <main+0x100>)
   8052e:	4798      	blx	r3
	PID_init(3, 1, 0, (1/50),&pidData);
   80530:	2200      	movs	r2, #0
   80532:	ab06      	add	r3, sp, #24
   80534:	9300      	str	r3, [sp, #0]
   80536:	4613      	mov	r3, r2
   80538:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8053c:	482f      	ldr	r0, [pc, #188]	; (805fc <main+0x104>)
   8053e:	4c30      	ldr	r4, [pc, #192]	; (80600 <main+0x108>)
   80540:	47a0      	blx	r4
	
	//can_receive(&meld, 0);
	//printf("%d", meld.data[0]);
    /* Replace with your application code */
	uint8_t game_on = 0;
	uint8_t goal = 0;
   80542:	2500      	movs	r5, #0
	uint8_t game_on = 0;
   80544:	462c      	mov	r4, r5
   80546:	e002      	b.n	8054e <main+0x56>
			game_on = game_data;
			if(game_on){
				printf("THE GAME IS ON!\n\r");
			}
			//printf("%d\n\r",meld.data[4]);
		}else if(game_on){
   80548:	b984      	cbnz	r4, 8056c <main+0x74>
			}

			old_delay_us(20000);
			
		}
		if(goal){
   8054a:	b105      	cbz	r5, 8054e <main+0x56>
			game_on = 0;
   8054c:	2400      	movs	r4, #0
		if(!game_on && !goal){
   8054e:	2c00      	cmp	r4, #0
   80550:	d1fa      	bne.n	80548 <main+0x50>
   80552:	2d00      	cmp	r5, #0
   80554:	d1f8      	bne.n	80548 <main+0x50>
			meld = get_msg();
   80556:	a80d      	add	r0, sp, #52	; 0x34
   80558:	4b2a      	ldr	r3, [pc, #168]	; (80604 <main+0x10c>)
   8055a:	4798      	blx	r3
			uint8_t game_data = meld.data[4];
   8055c:	f89d 403b 	ldrb.w	r4, [sp, #59]	; 0x3b
			if(game_on){
   80560:	2c00      	cmp	r4, #0
   80562:	d0f2      	beq.n	8054a <main+0x52>
				printf("THE GAME IS ON!\n\r");
   80564:	4828      	ldr	r0, [pc, #160]	; (80608 <main+0x110>)
   80566:	4b29      	ldr	r3, [pc, #164]	; (8060c <main+0x114>)
   80568:	4798      	blx	r3
   8056a:	e7ee      	b.n	8054a <main+0x52>
			meld = get_msg();
   8056c:	a802      	add	r0, sp, #8
   8056e:	4b25      	ldr	r3, [pc, #148]	; (80604 <main+0x10c>)
   80570:	4798      	blx	r3
   80572:	ab0d      	add	r3, sp, #52	; 0x34
   80574:	9802      	ldr	r0, [sp, #8]
   80576:	9903      	ldr	r1, [sp, #12]
   80578:	9a04      	ldr	r2, [sp, #16]
   8057a:	c307      	stmia	r3!, {r0, r1, r2}
			uint8_t rs_data = meld.data[3];
   8057c:	f89d 503a 	ldrb.w	r5, [sp, #58]	; 0x3a
			SHOOT(meld.data[2]);
   80580:	f99d 0039 	ldrsb.w	r0, [sp, #57]	; 0x39
   80584:	4b22      	ldr	r3, [pc, #136]	; (80610 <main+0x118>)
   80586:	4798      	blx	r3
			PWM_set_period_percentage(meld.data[0]);
   80588:	f99d 0037 	ldrsb.w	r0, [sp, #55]	; 0x37
   8058c:	4b17      	ldr	r3, [pc, #92]	; (805ec <main+0xf4>)
   8058e:	4798      	blx	r3
			uint16_t rs = rs_map(rs_data, 1524);
   80590:	f240 51f4 	movw	r1, #1524	; 0x5f4
   80594:	4628      	mov	r0, r5
   80596:	4b1f      	ldr	r3, [pc, #124]	; (80614 <main+0x11c>)
   80598:	4798      	blx	r3
   8059a:	4605      	mov	r5, r0
			int16_t encoder_data =  motor_encoder_read();
   8059c:	4b1e      	ldr	r3, [pc, #120]	; (80618 <main+0x120>)
   8059e:	4798      	blx	r3
			pid_output = PID_ctrl(rs, encoder_data, &pidData);
   805a0:	aa06      	add	r2, sp, #24
   805a2:	b201      	sxth	r1, r0
   805a4:	4628      	mov	r0, r5
   805a6:	4b1d      	ldr	r3, [pc, #116]	; (8061c <main+0x124>)
   805a8:	4798      	blx	r3
			motor_control_speed(pid_output);
   805aa:	b200      	sxth	r0, r0
   805ac:	4b1c      	ldr	r3, [pc, #112]	; (80620 <main+0x128>)
   805ae:	4798      	blx	r3
			goal = IR_check_goal();
   805b0:	4b1c      	ldr	r3, [pc, #112]	; (80624 <main+0x12c>)
   805b2:	4798      	blx	r3
   805b4:	b2c5      	uxtb	r5, r0
			if(goal){
   805b6:	b925      	cbnz	r5, 805c2 <main+0xca>
			old_delay_us(20000);
   805b8:	f644 6020 	movw	r0, #20000	; 0x4e20
   805bc:	4b1a      	ldr	r3, [pc, #104]	; (80628 <main+0x130>)
   805be:	4798      	blx	r3
   805c0:	e7c3      	b.n	8054a <main+0x52>
				printf("GAME OVER\n\r");
   805c2:	481a      	ldr	r0, [pc, #104]	; (8062c <main+0x134>)
   805c4:	4b11      	ldr	r3, [pc, #68]	; (8060c <main+0x114>)
   805c6:	4798      	blx	r3
   805c8:	e7f6      	b.n	805b8 <main+0xc0>
   805ca:	bf00      	nop
   805cc:	00080455 	.word	0x00080455
   805d0:	00290165 	.word	0x00290165
   805d4:	000802ad 	.word	0x000802ad
   805d8:	00080c25 	.word	0x00080c25
   805dc:	400e1a50 	.word	0x400e1a50
   805e0:	00080341 	.word	0x00080341
   805e4:	00080929 	.word	0x00080929
   805e8:	00080811 	.word	0x00080811
   805ec:	00080875 	.word	0x00080875
   805f0:	00080161 	.word	0x00080161
   805f4:	000808b5 	.word	0x000808b5
   805f8:	000806e5 	.word	0x000806e5
   805fc:	40400000 	.word	0x40400000
   80600:	00080789 	.word	0x00080789
   80604:	000803cd 	.word	0x000803cd
   80608:	000813bc 	.word	0x000813bc
   8060c:	00080c01 	.word	0x00080c01
   80610:	000808fd 	.word	0x000808fd
   80614:	0008076d 	.word	0x0008076d
   80618:	00080641 	.word	0x00080641
   8061c:	000807a9 	.word	0x000807a9
   80620:	00080689 	.word	0x00080689
   80624:	00080191 	.word	0x00080191
   80628:	0008094d 	.word	0x0008094d
   8062c:	000813d0 	.word	0x000813d0

00080630 <motor_encoder_init>:
}

void motor_encoder_init() {

    //PMC->PMC_PCER1 |= PMC_PCER1_PID38;
    PIOC->PIO_PER |= 0b111111110;
   80630:	4a02      	ldr	r2, [pc, #8]	; (8063c <motor_encoder_init+0xc>)
   80632:	6813      	ldr	r3, [r2, #0]
   80634:	f443 73ff 	orr.w	r3, r3, #510	; 0x1fe
   80638:	6013      	str	r3, [r2, #0]
   8063a:	4770      	bx	lr
   8063c:	400e1200 	.word	0x400e1200

00080640 <motor_encoder_read>:
    
    
}

uint16_t motor_encoder_read() {
   80640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	uint16_t encoder_value_low = 0;
	uint16_t encoder_value_high = 0;
	uint16_t encoder_value = 0;
    PIOD->PIO_CODR = NOT_OE;
   80644:	4c0d      	ldr	r4, [pc, #52]	; (8067c <motor_encoder_read+0x3c>)
   80646:	2601      	movs	r6, #1
   80648:	6366      	str	r6, [r4, #52]	; 0x34
    PIOD->PIO_CODR = SEL;
   8064a:	f04f 0904 	mov.w	r9, #4
   8064e:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34

    old_delay_us(20);
   80652:	2014      	movs	r0, #20
   80654:	f8df 802c 	ldr.w	r8, [pc, #44]	; 80684 <motor_encoder_read+0x44>
   80658:	47c0      	blx	r8

    uint32_t PIOC_PIN_DATA = PIOC->PIO_PDSR;
   8065a:	4f09      	ldr	r7, [pc, #36]	; (80680 <motor_encoder_read+0x40>)
   8065c:	6bfd      	ldr	r5, [r7, #60]	; 0x3c

    encoder_value_high =  (PIOC_PIN_DATA & (0x1FE));
   8065e:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe

    PIOD->PIO_SODR = SEL;
   80662:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30

    old_delay_us(20);
   80666:	2014      	movs	r0, #20
   80668:	47c0      	blx	r8
        

    uint32_t PIOC_PIN_DATA1 = PIOC->PIO_PDSR;
   8066a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    encoder_value_low = (PIOC_PIN_DATA1 & (0x1FE));
   8066c:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe

    

    encoder_value = (encoder_value_high << 7) | encoder_value_low ;

    PIOD->PIO_SODR = NOT_OE;
   80670:	6326      	str	r6, [r4, #48]	; 0x30
5: Set SEL high to output low byte
6: Wait approx. 20 microseconds
7: Read MJ2 to get low byte
8: Set !OE to high
*/
}
   80672:	ea40 10c5 	orr.w	r0, r0, r5, lsl #7
   80676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8067a:	bf00      	nop
   8067c:	400e1400 	.word	0x400e1400
   80680:	400e1200 	.word	0x400e1200
   80684:	0008094d 	.word	0x0008094d

00080688 <motor_control_speed>:


void motor_control_speed(int16_t position){

	//int32_t DACC_value = abs(position*1000/255) + 2500;
    if (position > 0){
   80688:	2800      	cmp	r0, #0
   8068a:	dd14      	ble.n	806b6 <motor_control_speed+0x2e>
        PIOD->PIO_CODR |= DIR;
   8068c:	4b13      	ldr	r3, [pc, #76]	; (806dc <motor_control_speed+0x54>)
   8068e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   80690:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   80694:	635a      	str	r2, [r3, #52]	; 0x34
        PIOD->PIO_SODR |= EN;
   80696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   8069c:	631a      	str	r2, [r3, #48]	; 0x30
        PIOD->PIO_SODR |= EN;
    }
    else{PIOD->PIO_CODR |= EN;;}
	//printf("%d\n\r", position);
	//uint16_t test = DACC_value;
    DACC->DACC_MR |= DACC_MR_USER_SEL_CHANNEL1;
   8069e:	4b10      	ldr	r3, [pc, #64]	; (806e0 <motor_control_speed+0x58>)
   806a0:	685a      	ldr	r2, [r3, #4]
   806a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   806a6:	605a      	str	r2, [r3, #4]
    DACC->DACC_CDR = abs(position) + MIN_VALUE;
   806a8:	2800      	cmp	r0, #0
   806aa:	bfb8      	it	lt
   806ac:	4240      	neglt	r0, r0
   806ae:	f500 7061 	add.w	r0, r0, #900	; 0x384
   806b2:	6218      	str	r0, [r3, #32]
   806b4:	4770      	bx	lr
    else if (position < 0) {
   806b6:	2800      	cmp	r0, #0
   806b8:	db05      	blt.n	806c6 <motor_control_speed+0x3e>
    else{PIOD->PIO_CODR |= EN;;}
   806ba:	4a08      	ldr	r2, [pc, #32]	; (806dc <motor_control_speed+0x54>)
   806bc:	6b53      	ldr	r3, [r2, #52]	; 0x34
   806be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   806c2:	6353      	str	r3, [r2, #52]	; 0x34
   806c4:	e7eb      	b.n	8069e <motor_control_speed+0x16>
        PIOD->PIO_SODR |= DIR;        
   806c6:	4b05      	ldr	r3, [pc, #20]	; (806dc <motor_control_speed+0x54>)
   806c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   806ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   806ce:	631a      	str	r2, [r3, #48]	; 0x30
        PIOD->PIO_SODR |= EN;
   806d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   806d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   806d6:	631a      	str	r2, [r3, #48]	; 0x30
   806d8:	e7e1      	b.n	8069e <motor_control_speed+0x16>
   806da:	bf00      	nop
   806dc:	400e1400 	.word	0x400e1400
   806e0:	400c8000 	.word	0x400c8000

000806e4 <motor_init>:
void motor_init(){
   806e4:	b510      	push	{r4, lr}
	motor_encoder_init();
   806e6:	4b1b      	ldr	r3, [pc, #108]	; (80754 <motor_init+0x70>)
   806e8:	4798      	blx	r3
    PMC->PMC_PCER0 |= PMC_PCER0_PID13;
   806ea:	4b1b      	ldr	r3, [pc, #108]	; (80758 <motor_init+0x74>)
   806ec:	691a      	ldr	r2, [r3, #16]
   806ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   806f2:	611a      	str	r2, [r3, #16]
    PIOD->PIO_PER |= DIR | EN | NOT_OE | NOT_RST | SEL;  
   806f4:	4c19      	ldr	r4, [pc, #100]	; (8075c <motor_init+0x78>)
   806f6:	6821      	ldr	r1, [r4, #0]
   806f8:	f240 6007 	movw	r0, #1543	; 0x607
   806fc:	4301      	orrs	r1, r0
   806fe:	6021      	str	r1, [r4, #0]
	PIOD->PIO_OER |= DIR | EN | NOT_OE | NOT_RST | SEL;
   80700:	6922      	ldr	r2, [r4, #16]
   80702:	4302      	orrs	r2, r0
   80704:	6122      	str	r2, [r4, #16]
    PMC->PMC_PCER1 |= PMC_PCER1_PID38;
   80706:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   8070a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   8070e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    DACC->DACC_MR |= DACC_MR_USER_SEL_CHANNEL1;
   80712:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
   80716:	685a      	ldr	r2, [r3, #4]
   80718:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   8071c:	605a      	str	r2, [r3, #4]
    DACC->DACC_MR |= DACC_MR_STARTUP_8;
   8071e:	685a      	ldr	r2, [r3, #4]
   80720:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   80724:	605a      	str	r2, [r3, #4]
    DACC->DACC_CHER |= DACC_CHER_CH1;
   80726:	691a      	ldr	r2, [r3, #16]
   80728:	f042 0202 	orr.w	r2, r2, #2
   8072c:	611a      	str	r2, [r3, #16]
    DACC->DACC_MR|= DACC_MR_TRGEN_DIS;
   8072e:	685a      	ldr	r2, [r3, #4]
   80730:	605a      	str	r2, [r3, #4]
    DACC->DACC_MR |= DACC_MR_REFRESH(0x1);
   80732:	685a      	ldr	r2, [r3, #4]
   80734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   80738:	605a      	str	r2, [r3, #4]
	motor_control_speed(-1500);
   8073a:	f6a0 30e3 	subw	r0, r0, #3043	; 0xbe3
   8073e:	4b08      	ldr	r3, [pc, #32]	; (80760 <motor_init+0x7c>)
   80740:	4798      	blx	r3
	old_delay_us(1000000);
   80742:	4808      	ldr	r0, [pc, #32]	; (80764 <motor_init+0x80>)
   80744:	4b08      	ldr	r3, [pc, #32]	; (80768 <motor_init+0x84>)
   80746:	4798      	blx	r3
    PIOD->PIO_SODR |= NOT_OE | NOT_RST;
   80748:	6b23      	ldr	r3, [r4, #48]	; 0x30
   8074a:	f043 0303 	orr.w	r3, r3, #3
   8074e:	6323      	str	r3, [r4, #48]	; 0x30
   80750:	bd10      	pop	{r4, pc}
   80752:	bf00      	nop
   80754:	00080631 	.word	0x00080631
   80758:	400e0600 	.word	0x400e0600
   8075c:	400e1400 	.word	0x400e1400
   80760:	00080689 	.word	0x00080689
   80764:	000f4240 	.word	0x000f4240
   80768:	0008094d 	.word	0x0008094d

0008076c <rs_map>:
    
}

uint16_t rs_map(uint8_t rs_raw, uint16_t max_enc){
	uint16_t rs_mapped;
	rs_mapped = rs_raw * max_enc/255;
   8076c:	fb01 f100 	mul.w	r1, r1, r0
   80770:	4804      	ldr	r0, [pc, #16]	; (80784 <rs_map+0x18>)
   80772:	fb80 3001 	smull	r3, r0, r0, r1
   80776:	4408      	add	r0, r1
   80778:	17c9      	asrs	r1, r1, #31
   8077a:	ebc1 10e0 	rsb	r0, r1, r0, asr #7
    //rs_mapped = abs(rs_raw-255) * max_enc/255;
	
	return rs_mapped;
   8077e:	b280      	uxth	r0, r0
   80780:	4770      	bx	lr
   80782:	bf00      	nop
   80784:	80808081 	.word	0x80808081

00080788 <PID_init>:
#include "PIDdrv.h"

void PID_init(float K_p, float K_i, float K_d, float timestep, struct PID_DATA *pid){
   80788:	b510      	push	{r4, lr}
   8078a:	9c02      	ldr	r4, [sp, #8]
    pid->K_p = K_p;
   8078c:	6020      	str	r0, [r4, #0]
    pid->K_i = K_i;
   8078e:	6061      	str	r1, [r4, #4]
    pid->K_d = K_d;
   80790:	60a2      	str	r2, [r4, #8]
    pid->prev_error = 0;
   80792:	2200      	movs	r2, #0
   80794:	6122      	str	r2, [r4, #16]
    pid->error = 0;
   80796:	60e2      	str	r2, [r4, #12]
    pid->timestep = timestep;
   80798:	4618      	mov	r0, r3
   8079a:	4b02      	ldr	r3, [pc, #8]	; (807a4 <PID_init+0x1c>)
   8079c:	4798      	blx	r3
   8079e:	6160      	str	r0, [r4, #20]
   807a0:	bd10      	pop	{r4, pc}
   807a2:	bf00      	nop
   807a4:	000811d5 	.word	0x000811d5

000807a8 <PID_ctrl>:
}

int PID_ctrl(int input, int current_value, struct PID_DATA *pid){
   807a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   807ac:	4688      	mov	r8, r1
   807ae:	4615      	mov	r5, r2
    int error, p_calc, i_calc, d_calc, error_temp, calc; 

    error = input - current_value;
	
	//printf("error: %d ", error);
    p_calc = pid->K_p * error;
   807b0:	6814      	ldr	r4, [r2, #0]
   807b2:	4f13      	ldr	r7, [pc, #76]	; (80800 <PID_ctrl+0x58>)
   807b4:	1a40      	subs	r0, r0, r1
   807b6:	47b8      	blx	r7
   807b8:	4e12      	ldr	r6, [pc, #72]	; (80804 <PID_ctrl+0x5c>)
   807ba:	4621      	mov	r1, r4
   807bc:	47b0      	blx	r6
   807be:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8080c <PID_ctrl+0x64>
   807c2:	47c8      	blx	r9
   807c4:	4604      	mov	r4, r0
	//printf("p_calc: %d ", p_calc);

    i_calc = pid->K_i*pid->timestep * pid->error;
   807c6:	f8d5 a004 	ldr.w	sl, [r5, #4]
   807ca:	6968      	ldr	r0, [r5, #20]
   807cc:	47b8      	blx	r7
   807ce:	4651      	mov	r1, sl
   807d0:	47b0      	blx	r6
   807d2:	4682      	mov	sl, r0
   807d4:	68e8      	ldr	r0, [r5, #12]
   807d6:	47b8      	blx	r7
   807d8:	4651      	mov	r1, sl
   807da:	47b0      	blx	r6
   807dc:	47c8      	blx	r9


    pid->prev_error = current_value;
   807de:	f8c5 8010 	str.w	r8, [r5, #16]

    calc = p_calc + i_calc + d_calc;
   807e2:	4420      	add	r0, r4
	
    if (calc > MAX_OUTPUT) {
   807e4:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   807e8:	dd03      	ble.n	807f2 <PID_ctrl+0x4a>
        calc = MAX_OUTPUT;
   807ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   807ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		//calc += MIN_VALUE;
    }
    else if (calc < -MAX_OUTPUT) {
   807f2:	f510 6ffa 	cmn.w	r0, #2000	; 0x7d0
   807f6:	db01      	blt.n	807fc <PID_ctrl+0x54>
		//calc -= MIN_VALUE;
    }
	//calc += MIN_VALUE;
    return calc;

   807f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        calc = -MAX_OUTPUT;
   807fc:	4802      	ldr	r0, [pc, #8]	; (80808 <PID_ctrl+0x60>)
    return calc;
   807fe:	e7fb      	b.n	807f8 <PID_ctrl+0x50>
   80800:	00080e8d 	.word	0x00080e8d
   80804:	00080f35 	.word	0x00080f35
   80808:	fffff830 	.word	0xfffff830
   8080c:	000811d5 	.word	0x000811d5

00080810 <PWM_init>:
void PWM_init()
{
    //MCLK    PERIOD     PRESCALER     CHANNEL
    //84MHz   20ms       128           5
	
	PMC->PMC_PCER1 |= PMC_PCER1_PID36;                                      // Enabling peripheral clock for PWM
   80810:	4a15      	ldr	r2, [pc, #84]	; (80868 <PWM_init+0x58>)
   80812:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80816:	f043 0310 	orr.w	r3, r3, #16
   8081a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	PIOC->PIO_PDR |= PIO_PDR_P19;                                           // Set PWM pin to an output
   8081e:	4b13      	ldr	r3, [pc, #76]	; (8086c <PWM_init+0x5c>)
   80820:	685a      	ldr	r2, [r3, #4]
   80822:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80826:	605a      	str	r2, [r3, #4]
	PIOC->PIO_ABSR |= PIO_ABSR_P19;                                         // Enable peripheral B for P19
   80828:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8082a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   8082e:	671a      	str	r2, [r3, #112]	; 0x70
	
	
	PWM->PWM_CH_NUM[5].PWM_CMR |= PWM_CMR_CPRE_MCK_DIV_128;           // Prescales MCLK with 128
   80830:	4b0f      	ldr	r3, [pc, #60]	; (80870 <PWM_init+0x60>)
   80832:	f8d3 22a0 	ldr.w	r2, [r3, #672]	; 0x2a0
   80836:	f042 0207 	orr.w	r2, r2, #7
   8083a:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	uint32_t CPRD = PWM_period_val;                                                  //CPRD = (84MHz*20ms)/128
	uint32_t CDTY = PWM_center_val;
	PWM->PWM_CH_NUM[5].PWM_CPRD |= PWM_CPRD_CPRD(CPRD);               //Set period to 20ms
   8083e:	f8d3 22ac 	ldr.w	r2, [r3, #684]	; 0x2ac
   80842:	f442 524d 	orr.w	r2, r2, #13120	; 0x3340
   80846:	f042 0205 	orr.w	r2, r2, #5
   8084a:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	
	PWM->PWM_CH_NUM[5].PWM_CDTY |= PWM_CDTY_CDTY(CDTY); //Set duty cycle to 1.5 ms 
   8084e:	f8d3 22a4 	ldr.w	r2, [r3, #676]	; 0x2a4
   80852:	f442 523d 	orr.w	r2, r2, #12096	; 0x2f40
   80856:	f042 022d 	orr.w	r2, r2, #45	; 0x2d
   8085a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	
	PWM->PWM_ENA |= PWM_ENA_CHID5;                                          //Enables PWM channel 0 
   8085e:	685a      	ldr	r2, [r3, #4]
   80860:	f042 0220 	orr.w	r2, r2, #32
   80864:	605a      	str	r2, [r3, #4]
   80866:	4770      	bx	lr
   80868:	400e0600 	.word	0x400e0600
   8086c:	400e1200 	.word	0x400e1200
   80870:	40094000 	.word	0x40094000

00080874 <PWM_set_period_percentage>:

uint32_t PWM_set_period_percentage(int16_t value)
{
	
	
	if (value > 100) {
   80874:	2864      	cmp	r0, #100	; 0x64
   80876:	dc05      	bgt.n	80884 <PWM_set_period_percentage+0x10>
		value = 100;
	} else if (value < -100) {
   80878:	f110 0f64 	cmn.w	r0, #100	; 0x64
   8087c:	da03      	bge.n	80886 <PWM_set_period_percentage+0x12>
		value = -100;
   8087e:	f06f 0063 	mvn.w	r0, #99	; 0x63
   80882:	e000      	b.n	80886 <PWM_set_period_percentage+0x12>
		value = 100;
   80884:	2064      	movs	r0, #100	; 0x64
	}
		
	uint32_t pwm_value =  PWM_center_val - (value * PWM_range_val)/100;
   80886:	4b08      	ldr	r3, [pc, #32]	; (808a8 <PWM_set_period_percentage+0x34>)
   80888:	fb03 f000 	mul.w	r0, r3, r0
   8088c:	4b07      	ldr	r3, [pc, #28]	; (808ac <PWM_set_period_percentage+0x38>)
   8088e:	fb83 2300 	smull	r2, r3, r3, r0
   80892:	17c0      	asrs	r0, r0, #31
   80894:	ebc0 1063 	rsb	r0, r0, r3, asr #5
   80898:	f500 503d 	add.w	r0, r0, #12096	; 0x2f40
   8089c:	302d      	adds	r0, #45	; 0x2d
	
	PWM->PWM_CH_NUM[5].PWM_CDTYUPD = (pwm_value);
   8089e:	4b04      	ldr	r3, [pc, #16]	; (808b0 <PWM_set_period_percentage+0x3c>)
   808a0:	f8c3 02a8 	str.w	r0, [r3, #680]	; 0x2a8
	return pwm_value;
   808a4:	4770      	bx	lr
   808a6:	bf00      	nop
   808a8:	fffffea2 	.word	0xfffffea2
   808ac:	51eb851f 	.word	0x51eb851f
   808b0:	40094000 	.word	0x40094000

000808b4 <solenoid_init>:
#include "SOLENOIDdrv.h"
#include "../TIMER/timerdrv.h"
uint8_t already_shote = 0;
void solenoid_init(){
    //Enable IO
    PIOA->PIO_PER  |= PIO_PA16;
   808b4:	4b06      	ldr	r3, [pc, #24]	; (808d0 <solenoid_init+0x1c>)
   808b6:	681a      	ldr	r2, [r3, #0]
   808b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   808bc:	601a      	str	r2, [r3, #0]
    //Set pin A0 as output
    PIOA->PIO_OER  |= PIO_PA16;
   808be:	691a      	ldr	r2, [r3, #16]
   808c0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   808c4:	611a      	str	r2, [r3, #16]
    //Disable pull up
    //PIOA->PIO_PUDR |= PIO_PA16;
    //Set pin low
    PIOA->PIO_CODR |= PIO_PA16;
   808c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   808c8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   808cc:	635a      	str	r2, [r3, #52]	; 0x34
   808ce:	4770      	bx	lr
   808d0:	400e0e00 	.word	0x400e0e00

000808d4 <solenoid_pulse>:
}

void solenoid_pulse(){
   808d4:	b510      	push	{r4, lr}
	//Setting and resetting pin for solenoid, with an ideal delay inbetween
    PIOA->PIO_SODR |= PIO_PA16;
   808d6:	4c07      	ldr	r4, [pc, #28]	; (808f4 <solenoid_pulse+0x20>)
   808d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   808da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   808de:	6323      	str	r3, [r4, #48]	; 0x30
    //Need timer inbetween
	//printf("shote\n\r");
	old_delay_us(20000);
   808e0:	f644 6020 	movw	r0, #20000	; 0x4e20
   808e4:	4b04      	ldr	r3, [pc, #16]	; (808f8 <solenoid_pulse+0x24>)
   808e6:	4798      	blx	r3
    //printf("shoot\n\r");
    PIOA->PIO_CODR |= PIO_PA16;
   808e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   808ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   808ee:	6363      	str	r3, [r4, #52]	; 0x34
   808f0:	bd10      	pop	{r4, pc}
   808f2:	bf00      	nop
   808f4:	400e0e00 	.word	0x400e0e00
   808f8:	0008094d 	.word	0x0008094d

000808fc <SHOOT>:
}

void SHOOT(uint8_t js_button){
   808fc:	b508      	push	{r3, lr}
    if(js_button && !already_shote){
   808fe:	4603      	mov	r3, r0
   80900:	b110      	cbz	r0, 80908 <SHOOT+0xc>
   80902:	4a07      	ldr	r2, [pc, #28]	; (80920 <SHOOT+0x24>)
   80904:	7812      	ldrb	r2, [r2, #0]
   80906:	b122      	cbz	r2, 80912 <SHOOT+0x16>
        solenoid_pulse();
        already_shote = 1;
    }else if(!js_button){
   80908:	b913      	cbnz	r3, 80910 <SHOOT+0x14>
        already_shote = 0;
   8090a:	2200      	movs	r2, #0
   8090c:	4b04      	ldr	r3, [pc, #16]	; (80920 <SHOOT+0x24>)
   8090e:	701a      	strb	r2, [r3, #0]
   80910:	bd08      	pop	{r3, pc}
        solenoid_pulse();
   80912:	4b04      	ldr	r3, [pc, #16]	; (80924 <SHOOT+0x28>)
   80914:	4798      	blx	r3
        already_shote = 1;
   80916:	2201      	movs	r2, #1
   80918:	4b01      	ldr	r3, [pc, #4]	; (80920 <SHOOT+0x24>)
   8091a:	701a      	strb	r2, [r3, #0]
   8091c:	bd08      	pop	{r3, pc}
   8091e:	bf00      	nop
   80920:	20000455 	.word	0x20000455
   80924:	000808d5 	.word	0x000808d5

00080928 <timer_init>:
#include "TIMERdrv.h"

void timer_init(){
    //Enable TC clock TC0
    
    PMC->PMC_PCER0 |= PMC_PCER0_PID27;
   80928:	4a06      	ldr	r2, [pc, #24]	; (80944 <timer_init+0x1c>)
   8092a:	6913      	ldr	r3, [r2, #16]
   8092c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   80930:	6113      	str	r3, [r2, #16]
    //Enable ch 0
    TC0->TC_CHANNEL[0].TC_CCR |= TC_CCR_CLKEN;
   80932:	4b05      	ldr	r3, [pc, #20]	; (80948 <timer_init+0x20>)
   80934:	681a      	ldr	r2, [r3, #0]
   80936:	f042 0201 	orr.w	r2, r2, #1
   8093a:	601a      	str	r2, [r3, #0]
    //Rising edge
    //TC0->TC_CHANNEL[0].TC_CMR |= TC_CMR_CPCTRG;
    TC0->TC_CHANNEL[0].TC_CCR = TC_CCR_SWTRG;
   8093c:	2204      	movs	r2, #4
   8093e:	601a      	str	r2, [r3, #0]
   80940:	4770      	bx	lr
   80942:	bf00      	nop
   80944:	400e0600 	.word	0x400e0600
   80948:	40080000 	.word	0x40080000

0008094c <old_delay_us>:
}

void old_delay_us(uint32_t microsec){
    //Reset counter
    //uint32_t now_time;
    uint32_t hvorfor = TC0->TC_CHANNEL[0].TC_CCR = TC_CCR_SWTRG;
   8094c:	4b07      	ldr	r3, [pc, #28]	; (8096c <old_delay_us+0x20>)
   8094e:	2204      	movs	r2, #4
   80950:	601a      	str	r2, [r3, #0]
    //Read counter value
    //0.000001 / (1/84MHz) / 2 = num of microsec per count
    uint32_t now_time = TC0->TC_CHANNEL[0].TC_CV;
   80952:	6919      	ldr	r1, [r3, #16]
   80954:	460b      	mov	r3, r1
	uint32_t prev_time = now_time;
    while((now_time - prev_time) < (microsec*42)){
   80956:	e001      	b.n	8095c <old_delay_us+0x10>
        now_time = TC0->TC_CHANNEL[0].TC_CV;
   80958:	4b04      	ldr	r3, [pc, #16]	; (8096c <old_delay_us+0x20>)
   8095a:	691b      	ldr	r3, [r3, #16]
    while((now_time - prev_time) < (microsec*42)){
   8095c:	1a5b      	subs	r3, r3, r1
   8095e:	222a      	movs	r2, #42	; 0x2a
   80960:	fb02 f200 	mul.w	r2, r2, r0
   80964:	4293      	cmp	r3, r2
   80966:	d3f7      	bcc.n	80958 <old_delay_us+0xc>
    }
   80968:	4770      	bx	lr
   8096a:	bf00      	nop
   8096c:	40080000 	.word	0x40080000

00080970 <printchar>:
#include "uart.h"


//insert function to print to here
static void printchar(char **str, int c)
{
   80970:	b508      	push	{r3, lr}
	(void) uart_putchar(c);  //Send characters to uart
   80972:	b2c8      	uxtb	r0, r1
   80974:	4b01      	ldr	r3, [pc, #4]	; (8097c <printchar+0xc>)
   80976:	4798      	blx	r3
   80978:	bd08      	pop	{r3, pc}
   8097a:	bf00      	nop
   8097c:	00080c8d 	.word	0x00080c8d

00080980 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   80980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80984:	4607      	mov	r7, r0
   80986:	460e      	mov	r6, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   80988:	1e15      	subs	r5, r2, #0
   8098a:	dd02      	ble.n	80992 <prints+0x12>
   8098c:	460a      	mov	r2, r1
   8098e:	2100      	movs	r1, #0
   80990:	e004      	b.n	8099c <prints+0x1c>
	register int pc = 0, padchar = ' ';
   80992:	f04f 0820 	mov.w	r8, #32
   80996:	e00e      	b.n	809b6 <prints+0x36>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   80998:	3101      	adds	r1, #1
   8099a:	3201      	adds	r2, #1
   8099c:	7810      	ldrb	r0, [r2, #0]
   8099e:	2800      	cmp	r0, #0
   809a0:	d1fa      	bne.n	80998 <prints+0x18>
		if (len >= width) width = 0;
   809a2:	42a9      	cmp	r1, r5
   809a4:	da01      	bge.n	809aa <prints+0x2a>
		else width -= len;
   809a6:	1a6d      	subs	r5, r5, r1
   809a8:	e000      	b.n	809ac <prints+0x2c>
		if (len >= width) width = 0;
   809aa:	2500      	movs	r5, #0
		if (pad & PAD_ZERO) padchar = '0';
   809ac:	f013 0f02 	tst.w	r3, #2
   809b0:	d106      	bne.n	809c0 <prints+0x40>
	register int pc = 0, padchar = ' ';
   809b2:	f04f 0820 	mov.w	r8, #32
	}
	if (!(pad & PAD_RIGHT)) {
   809b6:	f013 0401 	ands.w	r4, r3, #1
   809ba:	d00a      	beq.n	809d2 <prints+0x52>
	register int pc = 0, padchar = ' ';
   809bc:	2400      	movs	r4, #0
   809be:	e010      	b.n	809e2 <prints+0x62>
		if (pad & PAD_ZERO) padchar = '0';
   809c0:	f04f 0830 	mov.w	r8, #48	; 0x30
   809c4:	e7f7      	b.n	809b6 <prints+0x36>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
   809c6:	4641      	mov	r1, r8
   809c8:	4638      	mov	r0, r7
   809ca:	4b0d      	ldr	r3, [pc, #52]	; (80a00 <prints+0x80>)
   809cc:	4798      	blx	r3
			++pc;
   809ce:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
   809d0:	3d01      	subs	r5, #1
   809d2:	2d00      	cmp	r5, #0
   809d4:	dcf7      	bgt.n	809c6 <prints+0x46>
   809d6:	e004      	b.n	809e2 <prints+0x62>
		}
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
   809d8:	4638      	mov	r0, r7
   809da:	4b09      	ldr	r3, [pc, #36]	; (80a00 <prints+0x80>)
   809dc:	4798      	blx	r3
		++pc;
   809de:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   809e0:	3601      	adds	r6, #1
   809e2:	7831      	ldrb	r1, [r6, #0]
   809e4:	2900      	cmp	r1, #0
   809e6:	d1f7      	bne.n	809d8 <prints+0x58>
   809e8:	e005      	b.n	809f6 <prints+0x76>
	}
	for ( ; width > 0; --width) {
		printchar (out, padchar);
   809ea:	4641      	mov	r1, r8
   809ec:	4638      	mov	r0, r7
   809ee:	4b04      	ldr	r3, [pc, #16]	; (80a00 <prints+0x80>)
   809f0:	4798      	blx	r3
		++pc;
   809f2:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
   809f4:	3d01      	subs	r5, #1
   809f6:	2d00      	cmp	r5, #0
   809f8:	dcf7      	bgt.n	809ea <prints+0x6a>
	}

	return pc;
}
   809fa:	4620      	mov	r0, r4
   809fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80a00:	00080971 	.word	0x00080971

00080a04 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80a04:	b5f0      	push	{r4, r5, r6, r7, lr}
   80a06:	b085      	sub	sp, #20
   80a08:	4607      	mov	r7, r0
   80a0a:	980c      	ldr	r0, [sp, #48]	; 0x30
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   80a0c:	b151      	cbz	r1, 80a24 <printi+0x20>
   80a0e:	461e      	mov	r6, r3
   80a10:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   80a12:	b113      	cbz	r3, 80a1a <printi+0x16>
   80a14:	2a0a      	cmp	r2, #10
   80a16:	d012      	beq.n	80a3e <printi+0x3a>
	register int t, neg = 0, pc = 0;
   80a18:	2600      	movs	r6, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   80a1a:	ad04      	add	r5, sp, #16
   80a1c:	2300      	movs	r3, #0
   80a1e:	f805 3d01 	strb.w	r3, [r5, #-1]!

	while (u) {
   80a22:	e018      	b.n	80a56 <printi+0x52>
		print_buf[0] = '0';
   80a24:	2330      	movs	r3, #48	; 0x30
   80a26:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   80a2a:	2300      	movs	r3, #0
   80a2c:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   80a30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80a32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80a34:	a901      	add	r1, sp, #4
   80a36:	4638      	mov	r0, r7
   80a38:	4c1b      	ldr	r4, [pc, #108]	; (80aa8 <printi+0xa4>)
   80a3a:	47a0      	blx	r4
   80a3c:	e029      	b.n	80a92 <printi+0x8e>
	if (sg && b == 10 && i < 0) {
   80a3e:	2900      	cmp	r1, #0
   80a40:	db01      	blt.n	80a46 <printi+0x42>
	register int t, neg = 0, pc = 0;
   80a42:	2600      	movs	r6, #0
   80a44:	e7e9      	b.n	80a1a <printi+0x16>
		u = -i;
   80a46:	424c      	negs	r4, r1
		neg = 1;
   80a48:	2601      	movs	r6, #1
   80a4a:	e7e6      	b.n	80a1a <printi+0x16>
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
   80a4c:	3330      	adds	r3, #48	; 0x30
   80a4e:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   80a52:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   80a56:	b14c      	cbz	r4, 80a6c <printi+0x68>
		t = u % b;
   80a58:	fbb4 f3f2 	udiv	r3, r4, r2
   80a5c:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   80a60:	2b09      	cmp	r3, #9
   80a62:	ddf3      	ble.n	80a4c <printi+0x48>
			t += letbase - '0' - 10;
   80a64:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   80a68:	440b      	add	r3, r1
   80a6a:	e7ef      	b.n	80a4c <printi+0x48>
	}

	if (neg) {
   80a6c:	b156      	cbz	r6, 80a84 <printi+0x80>
		if( width && (pad & PAD_ZERO) ) {
   80a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80a70:	b11b      	cbz	r3, 80a7a <printi+0x76>
   80a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80a74:	f013 0f02 	tst.w	r3, #2
   80a78:	d10d      	bne.n	80a96 <printi+0x92>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   80a7a:	232d      	movs	r3, #45	; 0x2d
   80a7c:	f805 3c01 	strb.w	r3, [r5, #-1]
   80a80:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   80a82:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   80a84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80a86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80a88:	4629      	mov	r1, r5
   80a8a:	4638      	mov	r0, r7
   80a8c:	4c06      	ldr	r4, [pc, #24]	; (80aa8 <printi+0xa4>)
   80a8e:	47a0      	blx	r4
   80a90:	4430      	add	r0, r6
}
   80a92:	b005      	add	sp, #20
   80a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printchar (out, '-');
   80a96:	212d      	movs	r1, #45	; 0x2d
   80a98:	4638      	mov	r0, r7
   80a9a:	4b04      	ldr	r3, [pc, #16]	; (80aac <printi+0xa8>)
   80a9c:	4798      	blx	r3
			--width;
   80a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80aa0:	3b01      	subs	r3, #1
   80aa2:	930a      	str	r3, [sp, #40]	; 0x28
   80aa4:	e7ee      	b.n	80a84 <printi+0x80>
   80aa6:	bf00      	nop
   80aa8:	00080981 	.word	0x00080981
   80aac:	00080971 	.word	0x00080971

00080ab0 <print>:

static int print( char **out, const char *format, va_list args )
{
   80ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
   80ab2:	b089      	sub	sp, #36	; 0x24
   80ab4:	4606      	mov	r6, r0
   80ab6:	460c      	mov	r4, r1
   80ab8:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
   80aba:	2500      	movs	r5, #0
	char scr[2];

	for (; *format != 0; ++format) {
   80abc:	e081      	b.n	80bc2 <print+0x112>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
   80abe:	1ca2      	adds	r2, r4, #2
				pad = PAD_RIGHT;
   80ac0:	2301      	movs	r3, #1
   80ac2:	e08b      	b.n	80bdc <print+0x12c>
			}
			while (*format == '0') {
				++format;
   80ac4:	3401      	adds	r4, #1
				pad |= PAD_ZERO;
   80ac6:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   80aca:	7822      	ldrb	r2, [r4, #0]
   80acc:	2a30      	cmp	r2, #48	; 0x30
   80ace:	d0f9      	beq.n	80ac4 <print+0x14>
   80ad0:	2200      	movs	r2, #0
   80ad2:	e006      	b.n	80ae2 <print+0x32>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
   80ad4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80ad8:	0050      	lsls	r0, r2, #1
				width += *format - '0';
   80ada:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80ade:	4402      	add	r2, r0
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80ae0:	3401      	adds	r4, #1
   80ae2:	7821      	ldrb	r1, [r4, #0]
   80ae4:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80ae8:	b2c0      	uxtb	r0, r0
   80aea:	2809      	cmp	r0, #9
   80aec:	d9f2      	bls.n	80ad4 <print+0x24>
			}
			if( *format == 's' ) {
   80aee:	2973      	cmp	r1, #115	; 0x73
   80af0:	d018      	beq.n	80b24 <print+0x74>
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
   80af2:	2964      	cmp	r1, #100	; 0x64
   80af4:	d022      	beq.n	80b3c <print+0x8c>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
				continue;
			}
			if( *format == 'x' ) {
   80af6:	2978      	cmp	r1, #120	; 0x78
   80af8:	d02f      	beq.n	80b5a <print+0xaa>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
   80afa:	2958      	cmp	r1, #88	; 0x58
   80afc:	d03c      	beq.n	80b78 <print+0xc8>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
   80afe:	2975      	cmp	r1, #117	; 0x75
   80b00:	d049      	beq.n	80b96 <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
   80b02:	2963      	cmp	r1, #99	; 0x63
   80b04:	d15c      	bne.n	80bc0 <print+0x110>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
   80b06:	9905      	ldr	r1, [sp, #20]
   80b08:	1d08      	adds	r0, r1, #4
   80b0a:	9005      	str	r0, [sp, #20]
   80b0c:	7809      	ldrb	r1, [r1, #0]
   80b0e:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
   80b12:	2100      	movs	r1, #0
   80b14:	f88d 101d 	strb.w	r1, [sp, #29]
				pc += prints (out, scr, width, pad);
   80b18:	a907      	add	r1, sp, #28
   80b1a:	4630      	mov	r0, r6
   80b1c:	4f34      	ldr	r7, [pc, #208]	; (80bf0 <print+0x140>)
   80b1e:	47b8      	blx	r7
   80b20:	4405      	add	r5, r0
				continue;
   80b22:	e04d      	b.n	80bc0 <print+0x110>
				register char *s = (char *)va_arg( args, int );
   80b24:	9905      	ldr	r1, [sp, #20]
   80b26:	1d08      	adds	r0, r1, #4
   80b28:	9005      	str	r0, [sp, #20]
   80b2a:	6809      	ldr	r1, [r1, #0]
				pc += prints (out, s?s:"(null)", width, pad);
   80b2c:	b121      	cbz	r1, 80b38 <print+0x88>
   80b2e:	4630      	mov	r0, r6
   80b30:	4f2f      	ldr	r7, [pc, #188]	; (80bf0 <print+0x140>)
   80b32:	47b8      	blx	r7
   80b34:	4405      	add	r5, r0
				continue;
   80b36:	e043      	b.n	80bc0 <print+0x110>
				pc += prints (out, s?s:"(null)", width, pad);
   80b38:	492e      	ldr	r1, [pc, #184]	; (80bf4 <print+0x144>)
   80b3a:	e7f8      	b.n	80b2e <print+0x7e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80b3c:	9905      	ldr	r1, [sp, #20]
   80b3e:	1d08      	adds	r0, r1, #4
   80b40:	9005      	str	r0, [sp, #20]
   80b42:	6809      	ldr	r1, [r1, #0]
   80b44:	2061      	movs	r0, #97	; 0x61
   80b46:	9002      	str	r0, [sp, #8]
   80b48:	9301      	str	r3, [sp, #4]
   80b4a:	9200      	str	r2, [sp, #0]
   80b4c:	2301      	movs	r3, #1
   80b4e:	220a      	movs	r2, #10
   80b50:	4630      	mov	r0, r6
   80b52:	4f29      	ldr	r7, [pc, #164]	; (80bf8 <print+0x148>)
   80b54:	47b8      	blx	r7
   80b56:	4405      	add	r5, r0
				continue;
   80b58:	e032      	b.n	80bc0 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   80b5a:	9905      	ldr	r1, [sp, #20]
   80b5c:	1d08      	adds	r0, r1, #4
   80b5e:	9005      	str	r0, [sp, #20]
   80b60:	6809      	ldr	r1, [r1, #0]
   80b62:	2061      	movs	r0, #97	; 0x61
   80b64:	9002      	str	r0, [sp, #8]
   80b66:	9301      	str	r3, [sp, #4]
   80b68:	9200      	str	r2, [sp, #0]
   80b6a:	2300      	movs	r3, #0
   80b6c:	2210      	movs	r2, #16
   80b6e:	4630      	mov	r0, r6
   80b70:	4f21      	ldr	r7, [pc, #132]	; (80bf8 <print+0x148>)
   80b72:	47b8      	blx	r7
   80b74:	4405      	add	r5, r0
				continue;
   80b76:	e023      	b.n	80bc0 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   80b78:	9905      	ldr	r1, [sp, #20]
   80b7a:	1d08      	adds	r0, r1, #4
   80b7c:	9005      	str	r0, [sp, #20]
   80b7e:	6809      	ldr	r1, [r1, #0]
   80b80:	2041      	movs	r0, #65	; 0x41
   80b82:	9002      	str	r0, [sp, #8]
   80b84:	9301      	str	r3, [sp, #4]
   80b86:	9200      	str	r2, [sp, #0]
   80b88:	2300      	movs	r3, #0
   80b8a:	2210      	movs	r2, #16
   80b8c:	4630      	mov	r0, r6
   80b8e:	4f1a      	ldr	r7, [pc, #104]	; (80bf8 <print+0x148>)
   80b90:	47b8      	blx	r7
   80b92:	4405      	add	r5, r0
				continue;
   80b94:	e014      	b.n	80bc0 <print+0x110>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80b96:	9905      	ldr	r1, [sp, #20]
   80b98:	1d08      	adds	r0, r1, #4
   80b9a:	9005      	str	r0, [sp, #20]
   80b9c:	6809      	ldr	r1, [r1, #0]
   80b9e:	2061      	movs	r0, #97	; 0x61
   80ba0:	9002      	str	r0, [sp, #8]
   80ba2:	9301      	str	r3, [sp, #4]
   80ba4:	9200      	str	r2, [sp, #0]
   80ba6:	2300      	movs	r3, #0
   80ba8:	220a      	movs	r2, #10
   80baa:	4630      	mov	r0, r6
   80bac:	4f12      	ldr	r7, [pc, #72]	; (80bf8 <print+0x148>)
   80bae:	47b8      	blx	r7
   80bb0:	4405      	add	r5, r0
				continue;
   80bb2:	e005      	b.n	80bc0 <print+0x110>
			++format;
   80bb4:	4614      	mov	r4, r2
			}
		}
		else {
		out:
			printchar (out, *format);
   80bb6:	7821      	ldrb	r1, [r4, #0]
   80bb8:	4630      	mov	r0, r6
   80bba:	4b10      	ldr	r3, [pc, #64]	; (80bfc <print+0x14c>)
   80bbc:	4798      	blx	r3
			++pc;
   80bbe:	3501      	adds	r5, #1
	for (; *format != 0; ++format) {
   80bc0:	3401      	adds	r4, #1
   80bc2:	7823      	ldrb	r3, [r4, #0]
   80bc4:	b163      	cbz	r3, 80be0 <print+0x130>
		if (*format == '%') {
   80bc6:	2b25      	cmp	r3, #37	; 0x25
   80bc8:	d1f5      	bne.n	80bb6 <print+0x106>
			++format;
   80bca:	1c62      	adds	r2, r4, #1
			if (*format == '\0') break;
   80bcc:	7863      	ldrb	r3, [r4, #1]
   80bce:	b13b      	cbz	r3, 80be0 <print+0x130>
			if (*format == '%') goto out;
   80bd0:	2b25      	cmp	r3, #37	; 0x25
   80bd2:	d0ef      	beq.n	80bb4 <print+0x104>
			if (*format == '-') {
   80bd4:	2b2d      	cmp	r3, #45	; 0x2d
   80bd6:	f43f af72 	beq.w	80abe <print+0xe>
			width = pad = 0;
   80bda:	2300      	movs	r3, #0
   80bdc:	4614      	mov	r4, r2
   80bde:	e774      	b.n	80aca <print+0x1a>
		}
	}
	if (out) **out = '\0';
   80be0:	b116      	cbz	r6, 80be8 <print+0x138>
   80be2:	6833      	ldr	r3, [r6, #0]
   80be4:	2200      	movs	r2, #0
   80be6:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80be8:	4628      	mov	r0, r5
   80bea:	b009      	add	sp, #36	; 0x24
   80bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80bee:	bf00      	nop
   80bf0:	00080981 	.word	0x00080981
   80bf4:	000813dc 	.word	0x000813dc
   80bf8:	00080a05 	.word	0x00080a05
   80bfc:	00080971 	.word	0x00080971

00080c00 <printf>:

int printf(const char *format, ...)
{
   80c00:	b40f      	push	{r0, r1, r2, r3}
   80c02:	b500      	push	{lr}
   80c04:	b083      	sub	sp, #12
   80c06:	aa04      	add	r2, sp, #16
   80c08:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   80c0c:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   80c0e:	2000      	movs	r0, #0
   80c10:	4b03      	ldr	r3, [pc, #12]	; (80c20 <printf+0x20>)
   80c12:	4798      	blx	r3
}
   80c14:	b003      	add	sp, #12
   80c16:	f85d eb04 	ldr.w	lr, [sp], #4
   80c1a:	b004      	add	sp, #16
   80c1c:	4770      	bx	lr
   80c1e:	bf00      	nop
   80c20:	00080ab1 	.word	0x00080ab1

00080c24 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   80c24:	4b16      	ldr	r3, [pc, #88]	; (80c80 <configure_uart+0x5c>)
   80c26:	2200      	movs	r2, #0
   80c28:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   80c2a:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80c2c:	4b15      	ldr	r3, [pc, #84]	; (80c84 <configure_uart+0x60>)
   80c2e:	f44f 7140 	mov.w	r1, #768	; 0x300
   80c32:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80c34:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   80c36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80c38:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80c3a:	4002      	ands	r2, r0
   80c3c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80c40:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80c42:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   80c44:	f44f 7280 	mov.w	r2, #256	; 0x100
   80c48:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80c4c:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80c4e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80c52:	21ac      	movs	r1, #172	; 0xac
   80c54:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   80c56:	f240 2123 	movw	r1, #547	; 0x223
   80c5a:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80c5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80c60:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80c62:	f240 2102 	movw	r1, #514	; 0x202
   80c66:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80c6a:	f04f 31ff 	mov.w	r1, #4294967295
   80c6e:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80c70:	21e1      	movs	r1, #225	; 0xe1
   80c72:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80c74:	4904      	ldr	r1, [pc, #16]	; (80c88 <configure_uart+0x64>)
   80c76:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80c78:	2250      	movs	r2, #80	; 0x50
   80c7a:	601a      	str	r2, [r3, #0]
   80c7c:	4770      	bx	lr
   80c7e:	bf00      	nop
   80c80:	20000464 	.word	0x20000464
   80c84:	400e0e00 	.word	0x400e0e00
   80c88:	e000e100 	.word	0xe000e100

00080c8c <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80c8c:	4b07      	ldr	r3, [pc, #28]	; (80cac <uart_putchar+0x20>)
   80c8e:	695b      	ldr	r3, [r3, #20]
   80c90:	f013 0f02 	tst.w	r3, #2
   80c94:	d008      	beq.n	80ca8 <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80c96:	4b05      	ldr	r3, [pc, #20]	; (80cac <uart_putchar+0x20>)
   80c98:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80c9a:	4b04      	ldr	r3, [pc, #16]	; (80cac <uart_putchar+0x20>)
   80c9c:	695b      	ldr	r3, [r3, #20]
   80c9e:	f413 7f00 	tst.w	r3, #512	; 0x200
   80ca2:	d0fa      	beq.n	80c9a <uart_putchar+0xe>
	return 0;
   80ca4:	2000      	movs	r0, #0
   80ca6:	4770      	bx	lr
	return 1;
   80ca8:	2001      	movs	r0, #1
}
   80caa:	4770      	bx	lr
   80cac:	400e0800 	.word	0x400e0800

00080cb0 <UART_Handler>:

void UART_Handler(void)
{
   80cb0:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80cb2:	4b15      	ldr	r3, [pc, #84]	; (80d08 <UART_Handler+0x58>)
   80cb4:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80cb6:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80cba:	d003      	beq.n	80cc4 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80cbc:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80cc0:	4a11      	ldr	r2, [pc, #68]	; (80d08 <UART_Handler+0x58>)
   80cc2:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80cc4:	f013 0f01 	tst.w	r3, #1
   80cc8:	d012      	beq.n	80cf0 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80cca:	4810      	ldr	r0, [pc, #64]	; (80d0c <UART_Handler+0x5c>)
   80ccc:	7842      	ldrb	r2, [r0, #1]
   80cce:	1c53      	adds	r3, r2, #1
   80cd0:	4259      	negs	r1, r3
   80cd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80cd6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80cda:	bf58      	it	pl
   80cdc:	424b      	negpl	r3, r1
   80cde:	7801      	ldrb	r1, [r0, #0]
   80ce0:	428b      	cmp	r3, r1
   80ce2:	d006      	beq.n	80cf2 <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80ce4:	4908      	ldr	r1, [pc, #32]	; (80d08 <UART_Handler+0x58>)
   80ce6:	6988      	ldr	r0, [r1, #24]
   80ce8:	4908      	ldr	r1, [pc, #32]	; (80d0c <UART_Handler+0x5c>)
   80cea:	440a      	add	r2, r1
   80cec:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80cee:	704b      	strb	r3, [r1, #1]
   80cf0:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80cf2:	4807      	ldr	r0, [pc, #28]	; (80d10 <UART_Handler+0x60>)
   80cf4:	4b07      	ldr	r3, [pc, #28]	; (80d14 <UART_Handler+0x64>)
   80cf6:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80cf8:	4b04      	ldr	r3, [pc, #16]	; (80d0c <UART_Handler+0x5c>)
   80cfa:	7859      	ldrb	r1, [r3, #1]
   80cfc:	4a02      	ldr	r2, [pc, #8]	; (80d08 <UART_Handler+0x58>)
   80cfe:	6992      	ldr	r2, [r2, #24]
   80d00:	440b      	add	r3, r1
   80d02:	709a      	strb	r2, [r3, #2]
			return;
   80d04:	bd08      	pop	{r3, pc}
   80d06:	bf00      	nop
   80d08:	400e0800 	.word	0x400e0800
   80d0c:	20000464 	.word	0x20000464
   80d10:	000813e4 	.word	0x000813e4
   80d14:	00080c01 	.word	0x00080c01

00080d18 <__aeabi_frsub>:
   80d18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   80d1c:	e002      	b.n	80d24 <__addsf3>
   80d1e:	bf00      	nop

00080d20 <__aeabi_fsub>:
   80d20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00080d24 <__addsf3>:
   80d24:	0042      	lsls	r2, r0, #1
   80d26:	bf1f      	itttt	ne
   80d28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   80d2c:	ea92 0f03 	teqne	r2, r3
   80d30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   80d34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   80d38:	d06a      	beq.n	80e10 <__addsf3+0xec>
   80d3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   80d3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   80d42:	bfc1      	itttt	gt
   80d44:	18d2      	addgt	r2, r2, r3
   80d46:	4041      	eorgt	r1, r0
   80d48:	4048      	eorgt	r0, r1
   80d4a:	4041      	eorgt	r1, r0
   80d4c:	bfb8      	it	lt
   80d4e:	425b      	neglt	r3, r3
   80d50:	2b19      	cmp	r3, #25
   80d52:	bf88      	it	hi
   80d54:	4770      	bxhi	lr
   80d56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   80d5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   80d5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   80d62:	bf18      	it	ne
   80d64:	4240      	negne	r0, r0
   80d66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80d6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   80d6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   80d72:	bf18      	it	ne
   80d74:	4249      	negne	r1, r1
   80d76:	ea92 0f03 	teq	r2, r3
   80d7a:	d03f      	beq.n	80dfc <__addsf3+0xd8>
   80d7c:	f1a2 0201 	sub.w	r2, r2, #1
   80d80:	fa41 fc03 	asr.w	ip, r1, r3
   80d84:	eb10 000c 	adds.w	r0, r0, ip
   80d88:	f1c3 0320 	rsb	r3, r3, #32
   80d8c:	fa01 f103 	lsl.w	r1, r1, r3
   80d90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   80d94:	d502      	bpl.n	80d9c <__addsf3+0x78>
   80d96:	4249      	negs	r1, r1
   80d98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   80d9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   80da0:	d313      	bcc.n	80dca <__addsf3+0xa6>
   80da2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   80da6:	d306      	bcc.n	80db6 <__addsf3+0x92>
   80da8:	0840      	lsrs	r0, r0, #1
   80daa:	ea4f 0131 	mov.w	r1, r1, rrx
   80dae:	f102 0201 	add.w	r2, r2, #1
   80db2:	2afe      	cmp	r2, #254	; 0xfe
   80db4:	d251      	bcs.n	80e5a <__addsf3+0x136>
   80db6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   80dba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   80dbe:	bf08      	it	eq
   80dc0:	f020 0001 	biceq.w	r0, r0, #1
   80dc4:	ea40 0003 	orr.w	r0, r0, r3
   80dc8:	4770      	bx	lr
   80dca:	0049      	lsls	r1, r1, #1
   80dcc:	eb40 0000 	adc.w	r0, r0, r0
   80dd0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   80dd4:	f1a2 0201 	sub.w	r2, r2, #1
   80dd8:	d1ed      	bne.n	80db6 <__addsf3+0x92>
   80dda:	fab0 fc80 	clz	ip, r0
   80dde:	f1ac 0c08 	sub.w	ip, ip, #8
   80de2:	ebb2 020c 	subs.w	r2, r2, ip
   80de6:	fa00 f00c 	lsl.w	r0, r0, ip
   80dea:	bfaa      	itet	ge
   80dec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   80df0:	4252      	neglt	r2, r2
   80df2:	4318      	orrge	r0, r3
   80df4:	bfbc      	itt	lt
   80df6:	40d0      	lsrlt	r0, r2
   80df8:	4318      	orrlt	r0, r3
   80dfa:	4770      	bx	lr
   80dfc:	f092 0f00 	teq	r2, #0
   80e00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   80e04:	bf06      	itte	eq
   80e06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   80e0a:	3201      	addeq	r2, #1
   80e0c:	3b01      	subne	r3, #1
   80e0e:	e7b5      	b.n	80d7c <__addsf3+0x58>
   80e10:	ea4f 0341 	mov.w	r3, r1, lsl #1
   80e14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   80e18:	bf18      	it	ne
   80e1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   80e1e:	d021      	beq.n	80e64 <__addsf3+0x140>
   80e20:	ea92 0f03 	teq	r2, r3
   80e24:	d004      	beq.n	80e30 <__addsf3+0x10c>
   80e26:	f092 0f00 	teq	r2, #0
   80e2a:	bf08      	it	eq
   80e2c:	4608      	moveq	r0, r1
   80e2e:	4770      	bx	lr
   80e30:	ea90 0f01 	teq	r0, r1
   80e34:	bf1c      	itt	ne
   80e36:	2000      	movne	r0, #0
   80e38:	4770      	bxne	lr
   80e3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   80e3e:	d104      	bne.n	80e4a <__addsf3+0x126>
   80e40:	0040      	lsls	r0, r0, #1
   80e42:	bf28      	it	cs
   80e44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   80e48:	4770      	bx	lr
   80e4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   80e4e:	bf3c      	itt	cc
   80e50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   80e54:	4770      	bxcc	lr
   80e56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   80e5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   80e5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   80e62:	4770      	bx	lr
   80e64:	ea7f 6222 	mvns.w	r2, r2, asr #24
   80e68:	bf16      	itet	ne
   80e6a:	4608      	movne	r0, r1
   80e6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   80e70:	4601      	movne	r1, r0
   80e72:	0242      	lsls	r2, r0, #9
   80e74:	bf06      	itte	eq
   80e76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   80e7a:	ea90 0f01 	teqeq	r0, r1
   80e7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   80e82:	4770      	bx	lr

00080e84 <__aeabi_ui2f>:
   80e84:	f04f 0300 	mov.w	r3, #0
   80e88:	e004      	b.n	80e94 <__aeabi_i2f+0x8>
   80e8a:	bf00      	nop

00080e8c <__aeabi_i2f>:
   80e8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   80e90:	bf48      	it	mi
   80e92:	4240      	negmi	r0, r0
   80e94:	ea5f 0c00 	movs.w	ip, r0
   80e98:	bf08      	it	eq
   80e9a:	4770      	bxeq	lr
   80e9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   80ea0:	4601      	mov	r1, r0
   80ea2:	f04f 0000 	mov.w	r0, #0
   80ea6:	e01c      	b.n	80ee2 <__aeabi_l2f+0x2a>

00080ea8 <__aeabi_ul2f>:
   80ea8:	ea50 0201 	orrs.w	r2, r0, r1
   80eac:	bf08      	it	eq
   80eae:	4770      	bxeq	lr
   80eb0:	f04f 0300 	mov.w	r3, #0
   80eb4:	e00a      	b.n	80ecc <__aeabi_l2f+0x14>
   80eb6:	bf00      	nop

00080eb8 <__aeabi_l2f>:
   80eb8:	ea50 0201 	orrs.w	r2, r0, r1
   80ebc:	bf08      	it	eq
   80ebe:	4770      	bxeq	lr
   80ec0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   80ec4:	d502      	bpl.n	80ecc <__aeabi_l2f+0x14>
   80ec6:	4240      	negs	r0, r0
   80ec8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80ecc:	ea5f 0c01 	movs.w	ip, r1
   80ed0:	bf02      	ittt	eq
   80ed2:	4684      	moveq	ip, r0
   80ed4:	4601      	moveq	r1, r0
   80ed6:	2000      	moveq	r0, #0
   80ed8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   80edc:	bf08      	it	eq
   80ede:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   80ee2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   80ee6:	fabc f28c 	clz	r2, ip
   80eea:	3a08      	subs	r2, #8
   80eec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   80ef0:	db10      	blt.n	80f14 <__aeabi_l2f+0x5c>
   80ef2:	fa01 fc02 	lsl.w	ip, r1, r2
   80ef6:	4463      	add	r3, ip
   80ef8:	fa00 fc02 	lsl.w	ip, r0, r2
   80efc:	f1c2 0220 	rsb	r2, r2, #32
   80f00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80f04:	fa20 f202 	lsr.w	r2, r0, r2
   80f08:	eb43 0002 	adc.w	r0, r3, r2
   80f0c:	bf08      	it	eq
   80f0e:	f020 0001 	biceq.w	r0, r0, #1
   80f12:	4770      	bx	lr
   80f14:	f102 0220 	add.w	r2, r2, #32
   80f18:	fa01 fc02 	lsl.w	ip, r1, r2
   80f1c:	f1c2 0220 	rsb	r2, r2, #32
   80f20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   80f24:	fa21 f202 	lsr.w	r2, r1, r2
   80f28:	eb43 0002 	adc.w	r0, r3, r2
   80f2c:	bf08      	it	eq
   80f2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   80f32:	4770      	bx	lr

00080f34 <__aeabi_fmul>:
   80f34:	f04f 0cff 	mov.w	ip, #255	; 0xff
   80f38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   80f3c:	bf1e      	ittt	ne
   80f3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   80f42:	ea92 0f0c 	teqne	r2, ip
   80f46:	ea93 0f0c 	teqne	r3, ip
   80f4a:	d06f      	beq.n	8102c <__aeabi_fmul+0xf8>
   80f4c:	441a      	add	r2, r3
   80f4e:	ea80 0c01 	eor.w	ip, r0, r1
   80f52:	0240      	lsls	r0, r0, #9
   80f54:	bf18      	it	ne
   80f56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   80f5a:	d01e      	beq.n	80f9a <__aeabi_fmul+0x66>
   80f5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   80f60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   80f64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   80f68:	fba0 3101 	umull	r3, r1, r0, r1
   80f6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   80f70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   80f74:	bf3e      	ittt	cc
   80f76:	0049      	lslcc	r1, r1, #1
   80f78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   80f7c:	005b      	lslcc	r3, r3, #1
   80f7e:	ea40 0001 	orr.w	r0, r0, r1
   80f82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   80f86:	2afd      	cmp	r2, #253	; 0xfd
   80f88:	d81d      	bhi.n	80fc6 <__aeabi_fmul+0x92>
   80f8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   80f8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   80f92:	bf08      	it	eq
   80f94:	f020 0001 	biceq.w	r0, r0, #1
   80f98:	4770      	bx	lr
   80f9a:	f090 0f00 	teq	r0, #0
   80f9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   80fa2:	bf08      	it	eq
   80fa4:	0249      	lsleq	r1, r1, #9
   80fa6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   80faa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   80fae:	3a7f      	subs	r2, #127	; 0x7f
   80fb0:	bfc2      	ittt	gt
   80fb2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   80fb6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   80fba:	4770      	bxgt	lr
   80fbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   80fc0:	f04f 0300 	mov.w	r3, #0
   80fc4:	3a01      	subs	r2, #1
   80fc6:	dc5d      	bgt.n	81084 <__aeabi_fmul+0x150>
   80fc8:	f112 0f19 	cmn.w	r2, #25
   80fcc:	bfdc      	itt	le
   80fce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   80fd2:	4770      	bxle	lr
   80fd4:	f1c2 0200 	rsb	r2, r2, #0
   80fd8:	0041      	lsls	r1, r0, #1
   80fda:	fa21 f102 	lsr.w	r1, r1, r2
   80fde:	f1c2 0220 	rsb	r2, r2, #32
   80fe2:	fa00 fc02 	lsl.w	ip, r0, r2
   80fe6:	ea5f 0031 	movs.w	r0, r1, rrx
   80fea:	f140 0000 	adc.w	r0, r0, #0
   80fee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   80ff2:	bf08      	it	eq
   80ff4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   80ff8:	4770      	bx	lr
   80ffa:	f092 0f00 	teq	r2, #0
   80ffe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81002:	bf02      	ittt	eq
   81004:	0040      	lsleq	r0, r0, #1
   81006:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   8100a:	3a01      	subeq	r2, #1
   8100c:	d0f9      	beq.n	81002 <__aeabi_fmul+0xce>
   8100e:	ea40 000c 	orr.w	r0, r0, ip
   81012:	f093 0f00 	teq	r3, #0
   81016:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8101a:	bf02      	ittt	eq
   8101c:	0049      	lsleq	r1, r1, #1
   8101e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81022:	3b01      	subeq	r3, #1
   81024:	d0f9      	beq.n	8101a <__aeabi_fmul+0xe6>
   81026:	ea41 010c 	orr.w	r1, r1, ip
   8102a:	e78f      	b.n	80f4c <__aeabi_fmul+0x18>
   8102c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81030:	ea92 0f0c 	teq	r2, ip
   81034:	bf18      	it	ne
   81036:	ea93 0f0c 	teqne	r3, ip
   8103a:	d00a      	beq.n	81052 <__aeabi_fmul+0x11e>
   8103c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81040:	bf18      	it	ne
   81042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81046:	d1d8      	bne.n	80ffa <__aeabi_fmul+0xc6>
   81048:	ea80 0001 	eor.w	r0, r0, r1
   8104c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81050:	4770      	bx	lr
   81052:	f090 0f00 	teq	r0, #0
   81056:	bf17      	itett	ne
   81058:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   8105c:	4608      	moveq	r0, r1
   8105e:	f091 0f00 	teqne	r1, #0
   81062:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   81066:	d014      	beq.n	81092 <__aeabi_fmul+0x15e>
   81068:	ea92 0f0c 	teq	r2, ip
   8106c:	d101      	bne.n	81072 <__aeabi_fmul+0x13e>
   8106e:	0242      	lsls	r2, r0, #9
   81070:	d10f      	bne.n	81092 <__aeabi_fmul+0x15e>
   81072:	ea93 0f0c 	teq	r3, ip
   81076:	d103      	bne.n	81080 <__aeabi_fmul+0x14c>
   81078:	024b      	lsls	r3, r1, #9
   8107a:	bf18      	it	ne
   8107c:	4608      	movne	r0, r1
   8107e:	d108      	bne.n	81092 <__aeabi_fmul+0x15e>
   81080:	ea80 0001 	eor.w	r0, r0, r1
   81084:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81088:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   8108c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81090:	4770      	bx	lr
   81092:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81096:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   8109a:	4770      	bx	lr

0008109c <__aeabi_fdiv>:
   8109c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   810a0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   810a4:	bf1e      	ittt	ne
   810a6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   810aa:	ea92 0f0c 	teqne	r2, ip
   810ae:	ea93 0f0c 	teqne	r3, ip
   810b2:	d069      	beq.n	81188 <__aeabi_fdiv+0xec>
   810b4:	eba2 0203 	sub.w	r2, r2, r3
   810b8:	ea80 0c01 	eor.w	ip, r0, r1
   810bc:	0249      	lsls	r1, r1, #9
   810be:	ea4f 2040 	mov.w	r0, r0, lsl #9
   810c2:	d037      	beq.n	81134 <__aeabi_fdiv+0x98>
   810c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   810c8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   810cc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   810d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   810d4:	428b      	cmp	r3, r1
   810d6:	bf38      	it	cc
   810d8:	005b      	lslcc	r3, r3, #1
   810da:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   810de:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   810e2:	428b      	cmp	r3, r1
   810e4:	bf24      	itt	cs
   810e6:	1a5b      	subcs	r3, r3, r1
   810e8:	ea40 000c 	orrcs.w	r0, r0, ip
   810ec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   810f0:	bf24      	itt	cs
   810f2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   810f6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   810fa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   810fe:	bf24      	itt	cs
   81100:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   81104:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81108:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   8110c:	bf24      	itt	cs
   8110e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   81112:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81116:	011b      	lsls	r3, r3, #4
   81118:	bf18      	it	ne
   8111a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   8111e:	d1e0      	bne.n	810e2 <__aeabi_fdiv+0x46>
   81120:	2afd      	cmp	r2, #253	; 0xfd
   81122:	f63f af50 	bhi.w	80fc6 <__aeabi_fmul+0x92>
   81126:	428b      	cmp	r3, r1
   81128:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8112c:	bf08      	it	eq
   8112e:	f020 0001 	biceq.w	r0, r0, #1
   81132:	4770      	bx	lr
   81134:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81138:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   8113c:	327f      	adds	r2, #127	; 0x7f
   8113e:	bfc2      	ittt	gt
   81140:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81144:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81148:	4770      	bxgt	lr
   8114a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8114e:	f04f 0300 	mov.w	r3, #0
   81152:	3a01      	subs	r2, #1
   81154:	e737      	b.n	80fc6 <__aeabi_fmul+0x92>
   81156:	f092 0f00 	teq	r2, #0
   8115a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   8115e:	bf02      	ittt	eq
   81160:	0040      	lsleq	r0, r0, #1
   81162:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81166:	3a01      	subeq	r2, #1
   81168:	d0f9      	beq.n	8115e <__aeabi_fdiv+0xc2>
   8116a:	ea40 000c 	orr.w	r0, r0, ip
   8116e:	f093 0f00 	teq	r3, #0
   81172:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81176:	bf02      	ittt	eq
   81178:	0049      	lsleq	r1, r1, #1
   8117a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   8117e:	3b01      	subeq	r3, #1
   81180:	d0f9      	beq.n	81176 <__aeabi_fdiv+0xda>
   81182:	ea41 010c 	orr.w	r1, r1, ip
   81186:	e795      	b.n	810b4 <__aeabi_fdiv+0x18>
   81188:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   8118c:	ea92 0f0c 	teq	r2, ip
   81190:	d108      	bne.n	811a4 <__aeabi_fdiv+0x108>
   81192:	0242      	lsls	r2, r0, #9
   81194:	f47f af7d 	bne.w	81092 <__aeabi_fmul+0x15e>
   81198:	ea93 0f0c 	teq	r3, ip
   8119c:	f47f af70 	bne.w	81080 <__aeabi_fmul+0x14c>
   811a0:	4608      	mov	r0, r1
   811a2:	e776      	b.n	81092 <__aeabi_fmul+0x15e>
   811a4:	ea93 0f0c 	teq	r3, ip
   811a8:	d104      	bne.n	811b4 <__aeabi_fdiv+0x118>
   811aa:	024b      	lsls	r3, r1, #9
   811ac:	f43f af4c 	beq.w	81048 <__aeabi_fmul+0x114>
   811b0:	4608      	mov	r0, r1
   811b2:	e76e      	b.n	81092 <__aeabi_fmul+0x15e>
   811b4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   811b8:	bf18      	it	ne
   811ba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   811be:	d1ca      	bne.n	81156 <__aeabi_fdiv+0xba>
   811c0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   811c4:	f47f af5c 	bne.w	81080 <__aeabi_fmul+0x14c>
   811c8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   811cc:	f47f af3c 	bne.w	81048 <__aeabi_fmul+0x114>
   811d0:	e75f      	b.n	81092 <__aeabi_fmul+0x15e>
   811d2:	bf00      	nop

000811d4 <__aeabi_f2iz>:
   811d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
   811d8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   811dc:	d30f      	bcc.n	811fe <__aeabi_f2iz+0x2a>
   811de:	f04f 039e 	mov.w	r3, #158	; 0x9e
   811e2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   811e6:	d90d      	bls.n	81204 <__aeabi_f2iz+0x30>
   811e8:	ea4f 2300 	mov.w	r3, r0, lsl #8
   811ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   811f0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   811f4:	fa23 f002 	lsr.w	r0, r3, r2
   811f8:	bf18      	it	ne
   811fa:	4240      	negne	r0, r0
   811fc:	4770      	bx	lr
   811fe:	f04f 0000 	mov.w	r0, #0
   81202:	4770      	bx	lr
   81204:	f112 0f61 	cmn.w	r2, #97	; 0x61
   81208:	d101      	bne.n	8120e <__aeabi_f2iz+0x3a>
   8120a:	0242      	lsls	r2, r0, #9
   8120c:	d105      	bne.n	8121a <__aeabi_f2iz+0x46>
   8120e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   81212:	bf08      	it	eq
   81214:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81218:	4770      	bx	lr
   8121a:	f04f 0000 	mov.w	r0, #0
   8121e:	4770      	bx	lr

00081220 <__libc_init_array>:
   81220:	b570      	push	{r4, r5, r6, lr}
   81222:	4e0f      	ldr	r6, [pc, #60]	; (81260 <__libc_init_array+0x40>)
   81224:	4d0f      	ldr	r5, [pc, #60]	; (81264 <__libc_init_array+0x44>)
   81226:	1b76      	subs	r6, r6, r5
   81228:	10b6      	asrs	r6, r6, #2
   8122a:	bf18      	it	ne
   8122c:	2400      	movne	r4, #0
   8122e:	d005      	beq.n	8123c <__libc_init_array+0x1c>
   81230:	3401      	adds	r4, #1
   81232:	f855 3b04 	ldr.w	r3, [r5], #4
   81236:	4798      	blx	r3
   81238:	42a6      	cmp	r6, r4
   8123a:	d1f9      	bne.n	81230 <__libc_init_array+0x10>
   8123c:	4e0a      	ldr	r6, [pc, #40]	; (81268 <__libc_init_array+0x48>)
   8123e:	4d0b      	ldr	r5, [pc, #44]	; (8126c <__libc_init_array+0x4c>)
   81240:	f000 f8e2 	bl	81408 <_init>
   81244:	1b76      	subs	r6, r6, r5
   81246:	10b6      	asrs	r6, r6, #2
   81248:	bf18      	it	ne
   8124a:	2400      	movne	r4, #0
   8124c:	d006      	beq.n	8125c <__libc_init_array+0x3c>
   8124e:	3401      	adds	r4, #1
   81250:	f855 3b04 	ldr.w	r3, [r5], #4
   81254:	4798      	blx	r3
   81256:	42a6      	cmp	r6, r4
   81258:	d1f9      	bne.n	8124e <__libc_init_array+0x2e>
   8125a:	bd70      	pop	{r4, r5, r6, pc}
   8125c:	bd70      	pop	{r4, r5, r6, pc}
   8125e:	bf00      	nop
   81260:	00081414 	.word	0x00081414
   81264:	00081414 	.word	0x00081414
   81268:	0008141c 	.word	0x0008141c
   8126c:	00081414 	.word	0x00081414

00081270 <register_fini>:
   81270:	4b02      	ldr	r3, [pc, #8]	; (8127c <register_fini+0xc>)
   81272:	b113      	cbz	r3, 8127a <register_fini+0xa>
   81274:	4802      	ldr	r0, [pc, #8]	; (81280 <register_fini+0x10>)
   81276:	f000 b805 	b.w	81284 <atexit>
   8127a:	4770      	bx	lr
   8127c:	00000000 	.word	0x00000000
   81280:	00081291 	.word	0x00081291

00081284 <atexit>:
   81284:	2300      	movs	r3, #0
   81286:	4601      	mov	r1, r0
   81288:	461a      	mov	r2, r3
   8128a:	4618      	mov	r0, r3
   8128c:	f000 b81e 	b.w	812cc <__register_exitproc>

00081290 <__libc_fini_array>:
   81290:	b538      	push	{r3, r4, r5, lr}
   81292:	4c0a      	ldr	r4, [pc, #40]	; (812bc <__libc_fini_array+0x2c>)
   81294:	4d0a      	ldr	r5, [pc, #40]	; (812c0 <__libc_fini_array+0x30>)
   81296:	1b64      	subs	r4, r4, r5
   81298:	10a4      	asrs	r4, r4, #2
   8129a:	d00a      	beq.n	812b2 <__libc_fini_array+0x22>
   8129c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   812a0:	3b01      	subs	r3, #1
   812a2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   812a6:	3c01      	subs	r4, #1
   812a8:	f855 3904 	ldr.w	r3, [r5], #-4
   812ac:	4798      	blx	r3
   812ae:	2c00      	cmp	r4, #0
   812b0:	d1f9      	bne.n	812a6 <__libc_fini_array+0x16>
   812b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   812b6:	f000 b8b1 	b.w	8141c <_fini>
   812ba:	bf00      	nop
   812bc:	0008142c 	.word	0x0008142c
   812c0:	00081428 	.word	0x00081428

000812c4 <__retarget_lock_acquire_recursive>:
   812c4:	4770      	bx	lr
   812c6:	bf00      	nop

000812c8 <__retarget_lock_release_recursive>:
   812c8:	4770      	bx	lr
   812ca:	bf00      	nop

000812cc <__register_exitproc>:
   812cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   812d0:	4d2c      	ldr	r5, [pc, #176]	; (81384 <__register_exitproc+0xb8>)
   812d2:	4606      	mov	r6, r0
   812d4:	6828      	ldr	r0, [r5, #0]
   812d6:	4698      	mov	r8, r3
   812d8:	460f      	mov	r7, r1
   812da:	4691      	mov	r9, r2
   812dc:	f7ff fff2 	bl	812c4 <__retarget_lock_acquire_recursive>
   812e0:	4b29      	ldr	r3, [pc, #164]	; (81388 <__register_exitproc+0xbc>)
   812e2:	681c      	ldr	r4, [r3, #0]
   812e4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   812e8:	2b00      	cmp	r3, #0
   812ea:	d03e      	beq.n	8136a <__register_exitproc+0x9e>
   812ec:	685a      	ldr	r2, [r3, #4]
   812ee:	2a1f      	cmp	r2, #31
   812f0:	dc1c      	bgt.n	8132c <__register_exitproc+0x60>
   812f2:	f102 0e01 	add.w	lr, r2, #1
   812f6:	b176      	cbz	r6, 81316 <__register_exitproc+0x4a>
   812f8:	2101      	movs	r1, #1
   812fa:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   812fe:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   81302:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   81306:	4091      	lsls	r1, r2
   81308:	4308      	orrs	r0, r1
   8130a:	2e02      	cmp	r6, #2
   8130c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81310:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   81314:	d023      	beq.n	8135e <__register_exitproc+0x92>
   81316:	3202      	adds	r2, #2
   81318:	f8c3 e004 	str.w	lr, [r3, #4]
   8131c:	6828      	ldr	r0, [r5, #0]
   8131e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   81322:	f7ff ffd1 	bl	812c8 <__retarget_lock_release_recursive>
   81326:	2000      	movs	r0, #0
   81328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8132c:	4b17      	ldr	r3, [pc, #92]	; (8138c <__register_exitproc+0xc0>)
   8132e:	b30b      	cbz	r3, 81374 <__register_exitproc+0xa8>
   81330:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81334:	f3af 8000 	nop.w
   81338:	4603      	mov	r3, r0
   8133a:	b1d8      	cbz	r0, 81374 <__register_exitproc+0xa8>
   8133c:	2000      	movs	r0, #0
   8133e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   81342:	f04f 0e01 	mov.w	lr, #1
   81346:	6058      	str	r0, [r3, #4]
   81348:	6019      	str	r1, [r3, #0]
   8134a:	4602      	mov	r2, r0
   8134c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81350:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81354:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   81358:	2e00      	cmp	r6, #0
   8135a:	d0dc      	beq.n	81316 <__register_exitproc+0x4a>
   8135c:	e7cc      	b.n	812f8 <__register_exitproc+0x2c>
   8135e:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   81362:	4301      	orrs	r1, r0
   81364:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   81368:	e7d5      	b.n	81316 <__register_exitproc+0x4a>
   8136a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   8136e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81372:	e7bb      	b.n	812ec <__register_exitproc+0x20>
   81374:	6828      	ldr	r0, [r5, #0]
   81376:	f7ff ffa7 	bl	812c8 <__retarget_lock_release_recursive>
   8137a:	f04f 30ff 	mov.w	r0, #4294967295
   8137e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81382:	bf00      	nop
   81384:	20000430 	.word	0x20000430
   81388:	00081404 	.word	0x00081404
   8138c:	00000000 	.word	0x00000000
   81390:	304e4143 	.word	0x304e4143
   81394:	73656d20 	.word	0x73656d20
   81398:	65676173 	.word	0x65676173
   8139c:	72726120 	.word	0x72726120
   813a0:	64657669 	.word	0x64657669
   813a4:	206e6920 	.word	0x206e6920
   813a8:	2d6e6f6e 	.word	0x2d6e6f6e
   813ac:	64657375 	.word	0x64657375
   813b0:	69616d20 	.word	0x69616d20
   813b4:	786f626c 	.word	0x786f626c
   813b8:	00000d0a 	.word	0x00000d0a
   813bc:	20454854 	.word	0x20454854
   813c0:	454d4147 	.word	0x454d4147
   813c4:	20534920 	.word	0x20534920
   813c8:	0a214e4f 	.word	0x0a214e4f
   813cc:	0000000d 	.word	0x0000000d
   813d0:	454d4147 	.word	0x454d4147
   813d4:	45564f20 	.word	0x45564f20
   813d8:	000d0a52 	.word	0x000d0a52
   813dc:	6c756e28 	.word	0x6c756e28
   813e0:	0000296c 	.word	0x0000296c
   813e4:	3a525245 	.word	0x3a525245
   813e8:	52415520 	.word	0x52415520
   813ec:	58522054 	.word	0x58522054
   813f0:	66756220 	.word	0x66756220
   813f4:	20726566 	.word	0x20726566
   813f8:	66207369 	.word	0x66207369
   813fc:	0a6c6c75 	.word	0x0a6c6c75
   81400:	0000000d 	.word	0x0000000d

00081404 <_global_impure_ptr>:
   81404:	20000008                                ... 

00081408 <_init>:
   81408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8140a:	bf00      	nop
   8140c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8140e:	bc08      	pop	{r3}
   81410:	469e      	mov	lr, r3
   81412:	4770      	bx	lr

00081414 <__init_array_start>:
   81414:	00081271 	.word	0x00081271

00081418 <__frame_dummy_init_array_entry>:
   81418:	00080119                                ....

0008141c <_fini>:
   8141c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8141e:	bf00      	nop
   81420:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81422:	bc08      	pop	{r3}
   81424:	469e      	mov	lr, r3
   81426:	4770      	bx	lr

00081428 <__fini_array_start>:
   81428:	000800f5 	.word	0x000800f5
