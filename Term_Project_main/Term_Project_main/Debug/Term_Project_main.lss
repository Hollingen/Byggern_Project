
Term_Project_main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000984  00000a18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000984  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800106  00800106  00000a1e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a1e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001513  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b31  00000000  00000000  000020df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a7f  00000000  00000000  00002c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000030c  00000000  00000000  00003690  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065c  00000000  00000000  0000399c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000080e  00000000  00000000  00003ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00004806  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
   4:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__vector_1>
   8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
   c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
  78:	00 06       	cpc	r0, r16
  7a:	5f 5f       	subi	r21, 0xFF	; 255
  7c:	06 00       	.word	0x0006	; ????
  7e:	00 00       	nop
  80:	00 07       	cpc	r16, r16
  82:	07 00       	.word	0x0007	; ????
  84:	07 07       	cpc	r16, r23
  86:	00 00       	nop
  88:	14 7f       	andi	r17, 0xF4	; 244
  8a:	7f 14       	cp	r7, r15
  8c:	7f 7f       	andi	r23, 0xFF	; 255
  8e:	14 00       	.word	0x0014	; ????
  90:	24 2e       	mov	r2, r20
  92:	6b 6b       	ori	r22, 0xBB	; 187
  94:	3a 12       	cpse	r3, r26
  96:	00 00       	nop
  98:	46 66       	ori	r20, 0x66	; 102
  9a:	30 18       	sub	r3, r0
  9c:	0c 66       	ori	r16, 0x6C	; 108
  9e:	62 00       	.word	0x0062	; ????
  a0:	30 7a       	andi	r19, 0xA0	; 160
  a2:	4f 5d       	subi	r20, 0xDF	; 223
  a4:	37 7a       	andi	r19, 0xA7	; 167
  a6:	48 00       	.word	0x0048	; ????
  a8:	04 07       	cpc	r16, r20
  aa:	03 00       	.word	0x0003	; ????
  ac:	00 00       	nop
  ae:	00 00       	nop
  b0:	00 1c       	adc	r0, r0
  b2:	3e 63       	ori	r19, 0x3E	; 62
  b4:	41 00       	.word	0x0041	; ????
  b6:	00 00       	nop
  b8:	00 41       	sbci	r16, 0x10	; 16
  ba:	63 3e       	cpi	r22, 0xE3	; 227
  bc:	1c 00       	.word	0x001c	; ????
  be:	00 00       	nop
  c0:	08 2a       	or	r0, r24
  c2:	3e 1c       	adc	r3, r14
  c4:	1c 3e       	cpi	r17, 0xEC	; 236
  c6:	2a 08       	sbc	r2, r10
  c8:	08 08       	sbc	r0, r8
  ca:	3e 3e       	cpi	r19, 0xEE	; 238
  cc:	08 08       	sbc	r0, r8
  ce:	00 00       	nop
  d0:	00 a0       	ldd	r0, Z+32	; 0x20
  d2:	e0 60       	ori	r30, 0x00	; 0
  d4:	00 00       	nop
  d6:	00 00       	nop
  d8:	08 08       	sbc	r0, r8
  da:	08 08       	sbc	r0, r8
  dc:	08 08       	sbc	r0, r8
  de:	00 00       	nop
  e0:	00 00       	nop
  e2:	60 60       	ori	r22, 0x00	; 0
  e4:	00 00       	nop
  e6:	00 00       	nop
  e8:	60 30       	cpi	r22, 0x00	; 0
  ea:	18 0c       	add	r1, r8
  ec:	06 03       	mulsu	r16, r22
  ee:	01 00       	.word	0x0001	; ????
  f0:	3e 7f       	andi	r19, 0xFE	; 254
  f2:	59 4d       	sbci	r21, 0xD9	; 217
  f4:	7f 3e       	cpi	r23, 0xEF	; 239
  f6:	00 00       	nop
  f8:	42 42       	sbci	r20, 0x22	; 34
  fa:	7f 7f       	andi	r23, 0xFF	; 255
  fc:	40 40       	sbci	r20, 0x00	; 0
  fe:	00 00       	nop
 100:	62 73       	andi	r22, 0x32	; 50
 102:	59 49       	sbci	r21, 0x99	; 153
 104:	6f 66       	ori	r22, 0x6F	; 111
 106:	00 00       	nop
 108:	22 63       	ori	r18, 0x32	; 50
 10a:	49 49       	sbci	r20, 0x99	; 153
 10c:	7f 36       	cpi	r23, 0x6F	; 111
 10e:	00 00       	nop
 110:	18 1c       	adc	r1, r8
 112:	16 13       	cpse	r17, r22
 114:	7f 7f       	andi	r23, 0xFF	; 255
 116:	10 00       	.word	0x0010	; ????
 118:	27 67       	ori	r18, 0x77	; 119
 11a:	45 45       	sbci	r20, 0x55	; 85
 11c:	7d 39       	cpi	r23, 0x9D	; 157
 11e:	00 00       	nop
 120:	3c 7e       	andi	r19, 0xEC	; 236
 122:	4b 49       	sbci	r20, 0x9B	; 155
 124:	79 30       	cpi	r23, 0x09	; 9
 126:	00 00       	nop
 128:	03 63       	ori	r16, 0x33	; 51
 12a:	71 19       	sub	r23, r1
 12c:	0f 07       	cpc	r16, r31
 12e:	00 00       	nop
 130:	36 7f       	andi	r19, 0xF6	; 246
 132:	49 49       	sbci	r20, 0x99	; 153
 134:	7f 36       	cpi	r23, 0x6F	; 111
 136:	00 00       	nop
 138:	06 4f       	sbci	r16, 0xF6	; 246
 13a:	49 69       	ori	r20, 0x99	; 153
 13c:	3f 1e       	adc	r3, r31
 13e:	00 00       	nop
 140:	00 00       	nop
 142:	6c 6c       	ori	r22, 0xCC	; 204
 144:	00 00       	nop
 146:	00 00       	nop
 148:	00 a0       	ldd	r0, Z+32	; 0x20
 14a:	ec 6c       	ori	r30, 0xCC	; 204
 14c:	00 00       	nop
 14e:	00 00       	nop
 150:	08 1c       	adc	r0, r8
 152:	36 63       	ori	r19, 0x36	; 54
 154:	41 00       	.word	0x0041	; ????
 156:	00 00       	nop
 158:	14 14       	cp	r1, r4
 15a:	14 14       	cp	r1, r4
 15c:	14 14       	cp	r1, r4
 15e:	00 00       	nop
 160:	00 41       	sbci	r16, 0x10	; 16
 162:	63 36       	cpi	r22, 0x63	; 99
 164:	1c 08       	sbc	r1, r12
 166:	00 00       	nop
 168:	02 03       	mulsu	r16, r18
 16a:	51 59       	subi	r21, 0x91	; 145
 16c:	0f 06       	cpc	r0, r31
 16e:	00 00       	nop
 170:	3e 7f       	andi	r19, 0xFE	; 254
 172:	41 5d       	subi	r20, 0xD1	; 209
 174:	5d 1f       	adc	r21, r29
 176:	1e 00       	.word	0x001e	; ????
 178:	7c 7e       	andi	r23, 0xEC	; 236
 17a:	13 13       	cpse	r17, r19
 17c:	7e 7c       	andi	r23, 0xCE	; 206
 17e:	00 00       	nop
 180:	41 7f       	andi	r20, 0xF1	; 241
 182:	7f 49       	sbci	r23, 0x9F	; 159
 184:	49 7f       	andi	r20, 0xF9	; 249
 186:	36 00       	.word	0x0036	; ????
 188:	1c 3e       	cpi	r17, 0xEC	; 236
 18a:	63 41       	sbci	r22, 0x13	; 19
 18c:	41 63       	ori	r20, 0x31	; 49
 18e:	22 00       	.word	0x0022	; ????
 190:	41 7f       	andi	r20, 0xF1	; 241
 192:	7f 41       	sbci	r23, 0x1F	; 31
 194:	63 7f       	andi	r22, 0xF3	; 243
 196:	1c 00       	.word	0x001c	; ????
 198:	41 7f       	andi	r20, 0xF1	; 241
 19a:	7f 49       	sbci	r23, 0x9F	; 159
 19c:	5d 41       	sbci	r21, 0x1D	; 29
 19e:	63 00       	.word	0x0063	; ????
 1a0:	41 7f       	andi	r20, 0xF1	; 241
 1a2:	7f 49       	sbci	r23, 0x9F	; 159
 1a4:	1d 01       	movw	r2, r26
 1a6:	03 00       	.word	0x0003	; ????
 1a8:	1c 3e       	cpi	r17, 0xEC	; 236
 1aa:	63 41       	sbci	r22, 0x13	; 19
 1ac:	51 73       	andi	r21, 0x31	; 49
 1ae:	72 00       	.word	0x0072	; ????
 1b0:	7f 7f       	andi	r23, 0xFF	; 255
 1b2:	08 08       	sbc	r0, r8
 1b4:	7f 7f       	andi	r23, 0xFF	; 255
 1b6:	00 00       	nop
 1b8:	00 41       	sbci	r16, 0x10	; 16
 1ba:	7f 7f       	andi	r23, 0xFF	; 255
 1bc:	41 00       	.word	0x0041	; ????
 1be:	00 00       	nop
 1c0:	30 70       	andi	r19, 0x00	; 0
 1c2:	40 41       	sbci	r20, 0x10	; 16
 1c4:	7f 3f       	cpi	r23, 0xFF	; 255
 1c6:	01 00       	.word	0x0001	; ????
 1c8:	41 7f       	andi	r20, 0xF1	; 241
 1ca:	7f 08       	sbc	r7, r15
 1cc:	1c 77       	andi	r17, 0x7C	; 124
 1ce:	63 00       	.word	0x0063	; ????
 1d0:	41 7f       	andi	r20, 0xF1	; 241
 1d2:	7f 41       	sbci	r23, 0x1F	; 31
 1d4:	40 60       	ori	r20, 0x00	; 0
 1d6:	70 00       	.word	0x0070	; ????
 1d8:	7f 7f       	andi	r23, 0xFF	; 255
 1da:	06 0c       	add	r0, r6
 1dc:	06 7f       	andi	r16, 0xF6	; 246
 1de:	7f 00       	.word	0x007f	; ????
 1e0:	7f 7f       	andi	r23, 0xFF	; 255
 1e2:	06 0c       	add	r0, r6
 1e4:	18 7f       	andi	r17, 0xF8	; 248
 1e6:	7f 00       	.word	0x007f	; ????
 1e8:	1c 3e       	cpi	r17, 0xEC	; 236
 1ea:	63 41       	sbci	r22, 0x13	; 19
 1ec:	63 3e       	cpi	r22, 0xE3	; 227
 1ee:	1c 00       	.word	0x001c	; ????
 1f0:	41 7f       	andi	r20, 0xF1	; 241
 1f2:	7f 49       	sbci	r23, 0x9F	; 159
 1f4:	09 0f       	add	r16, r25
 1f6:	06 00       	.word	0x0006	; ????
 1f8:	1e 3f       	cpi	r17, 0xFE	; 254
 1fa:	21 71       	andi	r18, 0x11	; 17
 1fc:	7f 5e       	subi	r23, 0xEF	; 239
 1fe:	00 00       	nop
 200:	41 7f       	andi	r20, 0xF1	; 241
 202:	7f 19       	sub	r23, r15
 204:	39 6f       	ori	r19, 0xF9	; 249
 206:	46 00       	.word	0x0046	; ????
 208:	26 67       	ori	r18, 0x76	; 118
 20a:	4d 59       	subi	r20, 0x9D	; 157
 20c:	7b 32       	cpi	r23, 0x2B	; 43
 20e:	00 00       	nop
 210:	03 41       	sbci	r16, 0x13	; 19
 212:	7f 7f       	andi	r23, 0xFF	; 255
 214:	41 03       	mulsu	r20, r17
 216:	00 00       	nop
 218:	7f 7f       	andi	r23, 0xFF	; 255
 21a:	40 40       	sbci	r20, 0x00	; 0
 21c:	7f 7f       	andi	r23, 0xFF	; 255
 21e:	00 00       	nop
 220:	1f 3f       	cpi	r17, 0xFF	; 255
 222:	60 60       	ori	r22, 0x00	; 0
 224:	3f 1f       	adc	r19, r31
 226:	00 00       	nop
 228:	7f 7f       	andi	r23, 0xFF	; 255
 22a:	30 18       	sub	r3, r0
 22c:	30 7f       	andi	r19, 0xF0	; 240
 22e:	7f 00       	.word	0x007f	; ????
 230:	63 77       	andi	r22, 0x73	; 115
 232:	1c 08       	sbc	r1, r12
 234:	1c 77       	andi	r17, 0x7C	; 124
 236:	63 00       	.word	0x0063	; ????
 238:	07 4f       	sbci	r16, 0xF7	; 247
 23a:	78 78       	andi	r23, 0x88	; 136
 23c:	4f 07       	cpc	r20, r31
 23e:	00 00       	nop
 240:	67 73       	andi	r22, 0x37	; 55
 242:	59 4d       	sbci	r21, 0xD9	; 217
 244:	47 63       	ori	r20, 0x37	; 55
 246:	71 00       	.word	0x0071	; ????
 248:	00 7f       	andi	r16, 0xF0	; 240
 24a:	7f 41       	sbci	r23, 0x1F	; 31
 24c:	41 00       	.word	0x0041	; ????
 24e:	00 00       	nop
 250:	01 03       	mulsu	r16, r17
 252:	06 0c       	add	r0, r6
 254:	18 30       	cpi	r17, 0x08	; 8
 256:	60 00       	.word	0x0060	; ????
 258:	00 41       	sbci	r16, 0x10	; 16
 25a:	41 7f       	andi	r20, 0xF1	; 241
 25c:	7f 00       	.word	0x007f	; ????
 25e:	00 00       	nop
 260:	08 0c       	add	r0, r8
 262:	06 03       	mulsu	r16, r22
 264:	06 0c       	add	r0, r6
 266:	08 00       	.word	0x0008	; ????
 268:	80 80       	ld	r8, Z
 26a:	80 80       	ld	r8, Z
 26c:	80 80       	ld	r8, Z
 26e:	80 80       	ld	r8, Z
 270:	00 00       	nop
 272:	03 07       	cpc	r16, r19
 274:	04 00       	.word	0x0004	; ????
 276:	00 00       	nop
 278:	20 74       	andi	r18, 0x40	; 64
 27a:	54 54       	subi	r21, 0x44	; 68
 27c:	3c 78       	andi	r19, 0x8C	; 140
 27e:	40 00       	.word	0x0040	; ????
 280:	41 3f       	cpi	r20, 0xF1	; 241
 282:	7f 44       	sbci	r23, 0x4F	; 79
 284:	44 7c       	andi	r20, 0xC4	; 196
 286:	38 00       	.word	0x0038	; ????
 288:	38 7c       	andi	r19, 0xC8	; 200
 28a:	44 44       	sbci	r20, 0x44	; 68
 28c:	6c 28       	or	r6, r12
 28e:	00 00       	nop
 290:	30 78       	andi	r19, 0x80	; 128
 292:	48 49       	sbci	r20, 0x98	; 152
 294:	3f 7f       	andi	r19, 0xFF	; 255
 296:	40 00       	.word	0x0040	; ????
 298:	38 7c       	andi	r19, 0xC8	; 200
 29a:	54 54       	subi	r21, 0x44	; 68
 29c:	5c 18       	sub	r5, r12
 29e:	00 00       	nop
 2a0:	48 7e       	andi	r20, 0xE8	; 232
 2a2:	7f 49       	sbci	r23, 0x9F	; 159
 2a4:	03 02       	muls	r16, r19
 2a6:	00 00       	nop
 2a8:	98 bc       	out	0x28, r9	; 40
 2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
 2ac:	f8 7c       	andi	r31, 0xC8	; 200
 2ae:	04 00       	.word	0x0004	; ????
 2b0:	41 7f       	andi	r20, 0xF1	; 241
 2b2:	7f 08       	sbc	r7, r15
 2b4:	04 7c       	andi	r16, 0xC4	; 196
 2b6:	78 00       	.word	0x0078	; ????
 2b8:	00 44       	sbci	r16, 0x40	; 64
 2ba:	7d 7d       	andi	r23, 0xDD	; 221
 2bc:	40 00       	.word	0x0040	; ????
 2be:	00 00       	nop
 2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <__data_load_end+0x1b8>
 2c2:	84 fd       	sbrc	r24, 4
 2c4:	7d 00       	.word	0x007d	; ????
 2c6:	00 00       	nop
 2c8:	41 7f       	andi	r20, 0xF1	; 241
 2ca:	7f 10       	cpse	r7, r15
 2cc:	38 6c       	ori	r19, 0xC8	; 200
 2ce:	44 00       	.word	0x0044	; ????
 2d0:	00 41       	sbci	r16, 0x10	; 16
 2d2:	7f 7f       	andi	r23, 0xFF	; 255
 2d4:	40 00       	.word	0x0040	; ????
 2d6:	00 00       	nop
 2d8:	7c 7c       	andi	r23, 0xCC	; 204
 2da:	0c 18       	sub	r0, r12
 2dc:	0c 7c       	andi	r16, 0xCC	; 204
 2de:	78 00       	.word	0x0078	; ????
 2e0:	7c 7c       	andi	r23, 0xCC	; 204
 2e2:	04 04       	cpc	r0, r4
 2e4:	7c 78       	andi	r23, 0x8C	; 140
 2e6:	00 00       	nop
 2e8:	38 7c       	andi	r19, 0xC8	; 200
 2ea:	44 44       	sbci	r20, 0x44	; 68
 2ec:	7c 38       	cpi	r23, 0x8C	; 140
 2ee:	00 00       	nop
 2f0:	84 fc       	sbrc	r8, 4
 2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
 2f4:	24 3c       	cpi	r18, 0xC4	; 196
 2f6:	18 00       	.word	0x0018	; ????
 2f8:	18 3c       	cpi	r17, 0xC8	; 200
 2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
 2fc:	f8 fc       	.word	0xfcf8	; ????
 2fe:	84 00       	.word	0x0084	; ????
 300:	44 7c       	andi	r20, 0xC4	; 196
 302:	78 44       	sbci	r23, 0x48	; 72
 304:	1c 18       	sub	r1, r12
 306:	00 00       	nop
 308:	48 5c       	subi	r20, 0xC8	; 200
 30a:	54 54       	subi	r21, 0x44	; 68
 30c:	74 24       	eor	r7, r4
 30e:	00 00       	nop
 310:	00 04       	cpc	r0, r0
 312:	3e 7f       	andi	r19, 0xFE	; 254
 314:	44 24       	eor	r4, r4
 316:	00 00       	nop
 318:	3c 7c       	andi	r19, 0xCC	; 204
 31a:	40 40       	sbci	r20, 0x00	; 0
 31c:	3c 7c       	andi	r19, 0xCC	; 204
 31e:	40 00       	.word	0x0040	; ????
 320:	1c 3c       	cpi	r17, 0xCC	; 204
 322:	60 60       	ori	r22, 0x00	; 0
 324:	3c 1c       	adc	r3, r12
 326:	00 00       	nop
 328:	3c 7c       	andi	r19, 0xCC	; 204
 32a:	60 30       	cpi	r22, 0x00	; 0
 32c:	60 7c       	andi	r22, 0xC0	; 192
 32e:	3c 00       	.word	0x003c	; ????
 330:	44 6c       	ori	r20, 0xC4	; 196
 332:	38 10       	cpse	r3, r8
 334:	38 6c       	ori	r19, 0xC8	; 200
 336:	44 00       	.word	0x0044	; ????
 338:	9c bc       	out	0x2c, r9	; 44
 33a:	a0 a0       	ldd	r10, Z+32	; 0x20
 33c:	fc 7c       	andi	r31, 0xCC	; 204
 33e:	00 00       	nop
 340:	4c 64       	ori	r20, 0x4C	; 76
 342:	74 5c       	subi	r23, 0xC4	; 196
 344:	4c 64       	ori	r20, 0x4C	; 76
 346:	00 00       	nop
 348:	08 08       	sbc	r0, r8
 34a:	3e 77       	andi	r19, 0x7E	; 126
 34c:	41 41       	sbci	r20, 0x11	; 17
 34e:	00 00       	nop
 350:	00 00       	nop
 352:	00 77       	andi	r16, 0x70	; 112
 354:	77 00       	.word	0x0077	; ????
 356:	00 00       	nop
 358:	41 41       	sbci	r20, 0x11	; 17
 35a:	77 3e       	cpi	r23, 0xE7	; 231
 35c:	08 08       	sbc	r0, r8
 35e:	00 00       	nop
 360:	02 03       	mulsu	r16, r18
 362:	01 03       	mulsu	r16, r17
 364:	02 03       	mulsu	r16, r18
 366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
 368:	11 24       	eor	r1, r1
 36a:	1f be       	out	0x3f, r1	; 63
 36c:	cf ef       	ldi	r28, 0xFF	; 255
 36e:	d4 e0       	ldi	r29, 0x04	; 4
 370:	de bf       	out	0x3e, r29	; 62
 372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
 374:	11 e0       	ldi	r17, 0x01	; 1
 376:	a0 e0       	ldi	r26, 0x00	; 0
 378:	b1 e0       	ldi	r27, 0x01	; 1
 37a:	e4 e8       	ldi	r30, 0x84	; 132
 37c:	f9 e0       	ldi	r31, 0x09	; 9
 37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
 380:	05 90       	lpm	r0, Z+
 382:	0d 92       	st	X+, r0
 384:	a6 30       	cpi	r26, 0x06	; 6
 386:	b1 07       	cpc	r27, r17
 388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
 38a:	21 e0       	ldi	r18, 0x01	; 1
 38c:	a6 e0       	ldi	r26, 0x06	; 6
 38e:	b1 e0       	ldi	r27, 0x01	; 1
 390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
 392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
 394:	a1 31       	cpi	r26, 0x11	; 17
 396:	b2 07       	cpc	r27, r18
 398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
 39a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <main>
 39e:	0c 94 c0 04 	jmp	0x980	; 0x980 <_exit>

000003a2 <__bad_interrupt>:
 3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <ADC_Init>:

void ADC_calibrate(void){
	neutral_data_x = ADC_read(x_axis_ch);
	neutral_data_y = ADC_read(y_axis_ch);
	printf("x offset: %d, y offset: %d\n\r", neutral_data_x, neutral_data_y);
}
 3a6:	82 e8       	ldi	r24, 0x82	; 130
 3a8:	8f bd       	out	0x2f, r24	; 47
 3aa:	89 e1       	ldi	r24, 0x19	; 25
 3ac:	8e bd       	out	0x2e, r24	; 46
 3ae:	85 e0       	ldi	r24, 0x05	; 5
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	95 bd       	out	0x25, r25	; 37
 3b4:	84 bd       	out	0x24, r24	; 36
 3b6:	82 e0       	ldi	r24, 0x02	; 2
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	9b bd       	out	0x2b, r25	; 43
 3bc:	8a bd       	out	0x2a, r24	; 42
 3be:	81 b3       	in	r24, 0x11	; 17
 3c0:	80 62       	ori	r24, 0x20	; 32
 3c2:	81 bb       	out	0x11, r24	; 17
 3c4:	08 95       	ret

000003c6 <Int_INIT>:

void Int_INIT(void){
	
    GICR |= (1<<INT0);
 3c6:	8b b7       	in	r24, 0x3b	; 59
 3c8:	80 64       	ori	r24, 0x40	; 64
 3ca:	8b bf       	out	0x3b, r24	; 59
	
	MCUCR |= (1<<ISC00);
 3cc:	85 b7       	in	r24, 0x35	; 53
 3ce:	81 60       	ori	r24, 0x01	; 1
 3d0:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<ISC01);
 3d2:	85 b7       	in	r24, 0x35	; 53
 3d4:	82 60       	ori	r24, 0x02	; 2
 3d6:	85 bf       	out	0x35, r24	; 53
	
	sei();
 3d8:	78 94       	sei
 3da:	08 95       	ret

000003dc <__vector_1>:
}

ISR(INT0_vect){
 3dc:	1f 92       	push	r1
 3de:	0f 92       	push	r0
 3e0:	0f b6       	in	r0, 0x3f	; 63
 3e2:	0f 92       	push	r0
 3e4:	11 24       	eor	r1, r1
 3e6:	8f 93       	push	r24
    BUSY_flag = 1;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
}
 3ee:	8f 91       	pop	r24
 3f0:	0f 90       	pop	r0
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	0f 90       	pop	r0
 3f6:	1f 90       	pop	r1
 3f8:	18 95       	reti

000003fa <main>:
#include "ADC/ADCdrv.h"
#include "OLED/OLEDdrv.h"

int main(void)
{
	USART_Init(MYUBRR);
 3fa:	8f e1       	ldi	r24, 0x1F	; 31
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 94 24 03 	call	0x648	; 0x648 <USART_Init>
	XMEM_init();
 402:	0e 94 15 03 	call	0x62a	; 0x62a <XMEM_init>
	Int_INIT();
 406:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <Int_INIT>
	ADC_Init();
 40a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_Init>
	oled_init();
 40e:	0e 94 31 02 	call	0x462	; 0x462 <oled_init>
    /* Replace with your application code */
	
	//TESTE OLED;
	oled_reset();
 412:	0e 94 e5 02 	call	0x5ca	; 0x5ca <oled_reset>
	oled_home();
 416:	0e 94 a8 02 	call	0x550	; 0x550 <oled_home>
	oled_print_char('t');
 41a:	84 e7       	ldi	r24, 0x74	; 116
 41c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <oled_print_char>
    while (1) 
    {
		oled_fill_line(1);
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 af 02 	call	0x55e	; 0x55e <oled_fill_line>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 428:	2f ef       	ldi	r18, 0xFF	; 255
 42a:	8f ef       	ldi	r24, 0xFF	; 255
 42c:	9e e0       	ldi	r25, 0x0E	; 14
 42e:	21 50       	subi	r18, 0x01	; 1
 430:	80 40       	sbci	r24, 0x00	; 0
 432:	90 40       	sbci	r25, 0x00	; 0
 434:	e1 f7       	brne	.-8      	; 0x42e <__DATA_REGION_LENGTH__+0x2e>
 436:	00 c0       	rjmp	.+0      	; 0x438 <__DATA_REGION_LENGTH__+0x38>
 438:	00 00       	nop
		_delay_ms(1000);
		oled_clear_line(1);
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 ca 02 	call	0x594	; 0x594 <oled_clear_line>
 442:	2f ef       	ldi	r18, 0xFF	; 255
 444:	8f ef       	ldi	r24, 0xFF	; 255
 446:	9e e0       	ldi	r25, 0x0E	; 14
 448:	21 50       	subi	r18, 0x01	; 1
 44a:	80 40       	sbci	r24, 0x00	; 0
 44c:	90 40       	sbci	r25, 0x00	; 0
 44e:	e1 f7       	brne	.-8      	; 0x448 <__DATA_REGION_LENGTH__+0x48>
 450:	00 c0       	rjmp	.+0      	; 0x452 <__DATA_REGION_LENGTH__+0x52>
 452:	00 00       	nop
 454:	e5 cf       	rjmp	.-54     	; 0x420 <__DATA_REGION_LENGTH__+0x20>

00000456 <oled_write_command>:
volatile int column = 0;
volatile int line = 0;

void oled_write_command(uint8_t data){
	volatile char *ext_mem = (char *) OLED_COMMAND_ADDRESS;
	ext_mem[0]= data;
 456:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xeef>
 45a:	08 95       	ret

0000045c <oled_write_data>:
}

void oled_write_data(uint8_t data){
	volatile char *ext_mem = (char *) OLED_DATA_ADDRESS;
	ext_mem[0]= data;
 45c:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0x10ef>
 460:	08 95       	ret

00000462 <oled_init>:
}

void oled_init(){
    //Set inits according to datasheet
    oled_write_command(0xae); // display off
 462:	8e ea       	ldi	r24, 0xAE	; 174
 464:	0e 94 2b 02 	call	0x456	; 0x456 <oled_write_command>
    oled_write_command(0xa1); //segment remap
 468:	81 ea       	ldi	r24, 0xA1	; 161
 46a:	0e 94 2b 02 	call	0x456	; 0x456 <oled_write_command>
    oled_write_command(0xda); //common pads hardware: alternative
 46e:	8a ed       	ldi	r24, 0xDA	; 218
 470:	0e 94 2b 02 	call	0x456	; 0x456 <oled_write_command>
    oled_write_command(0x12);
 474:	82 e1       	ldi	r24, 0x12	; 18
 476:	0e 94 2b 02 	call	0x456	; 0x456 <oled_write_command>
    oled_write_command(0xc8); //common output scan direction:com63~com0
 47a:	88 ec       	ldi	r24, 0xC8	; 200
 47c:	0e 94 2b 02 	call	0x456	; 0x456 <oled_write_command>
    oled_write_command(0xa8); //multiplex ration mode:63
 480:	88 ea       	ldi	r24, 0xA8	; 168
 482:	0e 94 2b 02 	call	0x456	; 0x456 <oled_write_command>
    oled_write_command(0x3f);
 486:	8f e3       	ldi	r24, 0x3F	; 63
 488:	0e 94 2b 02 	call	0x456	; 0x456 <oled_write_command>
    oled_write_command(0xd5); //display divide ratio/osc. freq. mode
 48c:	85 ed       	ldi	r24, 0xD5	; 213
 48e:	0e 94 2b 02 	call	0x456	; 0x456 <oled_write_command>
    oled_write_command(0x80);
 492:	80 e8       	ldi	r24, 0x80	; 128
 494:	0e 94 2b 02 	call	0x456	; 0x456 <oled_write_command>
    oled_write_command(0x81); //contrast control
 498:	81 e8       	ldi	r24, 0x81	; 129
 49a:	0e 94 2b 02 	call	0x456	; 0x456 <oled_write_command>
    oled_write_command(0x50);
 49e:	80 e5       	ldi	r24, 0x50	; 80
 4a0:	0e 94 2b 02 	call	0x456	; 0x456 <oled_write_command>
    oled_write_command(0xd9); //set pre-charge period
 4a4:	89 ed       	ldi	r24, 0xD9	; 217
 4a6:	0e 94 2b 02 	call	0x456	; 0x456 <oled_write_command>
    oled_write_command(0x21);
 4aa:	81 e2       	ldi	r24, 0x21	; 33
 4ac:	0e 94 2b 02 	call	0x456	; 0x456 <oled_write_command>
    oled_write_command(0x20); //Set Memory Addressing Mode
 4b0:	80 e2       	ldi	r24, 0x20	; 32
 4b2:	0e 94 2b 02 	call	0x456	; 0x456 <oled_write_command>
    oled_write_command(0x02);
 4b6:	82 e0       	ldi	r24, 0x02	; 2
 4b8:	0e 94 2b 02 	call	0x456	; 0x456 <oled_write_command>
    oled_write_command(0xdb); //VCOM deselect level mode
 4bc:	8b ed       	ldi	r24, 0xDB	; 219
 4be:	0e 94 2b 02 	call	0x456	; 0x456 <oled_write_command>
    oled_write_command(0x30);
 4c2:	80 e3       	ldi	r24, 0x30	; 48
 4c4:	0e 94 2b 02 	call	0x456	; 0x456 <oled_write_command>
    oled_write_command(0xad); //master configuration
 4c8:	8d ea       	ldi	r24, 0xAD	; 173
 4ca:	0e 94 2b 02 	call	0x456	; 0x456 <oled_write_command>
    oled_write_command(0x00);
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	0e 94 2b 02 	call	0x456	; 0x456 <oled_write_command>
    oled_write_command(0xa4); //out follows RAM content
 4d4:	84 ea       	ldi	r24, 0xA4	; 164
 4d6:	0e 94 2b 02 	call	0x456	; 0x456 <oled_write_command>
    oled_write_command(0xa6); //set normal display
 4da:	86 ea       	ldi	r24, 0xA6	; 166
 4dc:	0e 94 2b 02 	call	0x456	; 0x456 <oled_write_command>
    oled_write_command(0xaf); // display on
 4e0:	8f ea       	ldi	r24, 0xAF	; 175
 4e2:	0e 94 2b 02 	call	0x456	; 0x456 <oled_write_command>

    //Set to page adressing mode
    oled_write_command(0x20);
 4e6:	80 e2       	ldi	r24, 0x20	; 32
 4e8:	0e 94 2b 02 	call	0x456	; 0x456 <oled_write_command>
	oled_write_command(0b10);
 4ec:	82 e0       	ldi	r24, 0x02	; 2
 4ee:	0e 94 2b 02 	call	0x456	; 0x456 <oled_write_command>
 4f2:	08 95       	ret

000004f4 <oled_goto_line>:

void oled_goto_line(int line){
    //Add check for if line is between 0-7
    //page adressing mode
    int command = 0xB0 + line;
    oled_write_command(command);
 4f4:	80 55       	subi	r24, 0x50	; 80
 4f6:	0e 94 2b 02 	call	0x456	; 0x456 <oled_write_command>
 4fa:	08 95       	ret

000004fc <oled_goto_column>:
}

void oled_goto_column(int column){
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	ec 01       	movw	r28, r24
    //Add check if line is between 0-127
    //This is page adressing mode
    oled_write_command(0x00 + (column % 16)); // Lower nibble
 502:	8f 70       	andi	r24, 0x0F	; 15
 504:	90 78       	andi	r25, 0x80	; 128
 506:	99 23       	and	r25, r25
 508:	24 f4       	brge	.+8      	; 0x512 <__stack+0x13>
 50a:	01 97       	sbiw	r24, 0x01	; 1
 50c:	80 6f       	ori	r24, 0xF0	; 240
 50e:	9f 6f       	ori	r25, 0xFF	; 255
 510:	01 96       	adiw	r24, 0x01	; 1
 512:	0e 94 2b 02 	call	0x456	; 0x456 <oled_write_command>
	oled_write_command(0x10 + (column / 16)); // Higher nibble
 516:	ce 01       	movw	r24, r28
 518:	dd 23       	and	r29, r29
 51a:	0c f4       	brge	.+2      	; 0x51e <__stack+0x1f>
 51c:	0f 96       	adiw	r24, 0x0f	; 15
 51e:	95 95       	asr	r25
 520:	87 95       	ror	r24
 522:	95 95       	asr	r25
 524:	87 95       	ror	r24
 526:	95 95       	asr	r25
 528:	87 95       	ror	r24
 52a:	95 95       	asr	r25
 52c:	87 95       	ror	r24
 52e:	80 5f       	subi	r24, 0xF0	; 240
 530:	0e 94 2b 02 	call	0x456	; 0x456 <oled_write_command>

}
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	08 95       	ret

0000053a <oled_goto_pos>:
    oled_goto_line(line); //Go back to the 


}

void oled_goto_pos(int row, int column){
 53a:	cf 93       	push	r28
 53c:	df 93       	push	r29
 53e:	eb 01       	movw	r28, r22
    //Page adressing mode
    oled_goto_line(row);
 540:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <oled_goto_line>
    oled_goto_column(column);
 544:	ce 01       	movw	r24, r28
 546:	0e 94 7e 02 	call	0x4fc	; 0x4fc <oled_goto_column>

}
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	08 95       	ret

00000550 <oled_home>:
    oled_home();

}

void oled_home(){
    oled_goto_pos(0, 0);
 550:	60 e0       	ldi	r22, 0x00	; 0
 552:	70 e0       	ldi	r23, 0x00	; 0
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0e 94 9d 02 	call	0x53a	; 0x53a <oled_goto_pos>
 55c:	08 95       	ret

0000055e <oled_fill_line>:
    //This is page adressing mode
    oled_write_command(0x00 + (column % 16)); // Lower nibble
	oled_write_command(0x10 + (column / 16)); // Higher nibble

}
void oled_fill_line(int line){
 55e:	0f 93       	push	r16
 560:	1f 93       	push	r17
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
 566:	8c 01       	movw	r16, r24
    oled_goto_pos(line, 0); // Go to the right line and start at the first column
 568:	60 e0       	ldi	r22, 0x00	; 0
 56a:	70 e0       	ldi	r23, 0x00	; 0
 56c:	0e 94 9d 02 	call	0x53a	; 0x53a <oled_goto_pos>
    for (int i = 0; i < 128; i++) { //For every column write the data to 0 so that the line is cleared
 570:	c0 e0       	ldi	r28, 0x00	; 0
 572:	d0 e0       	ldi	r29, 0x00	; 0
 574:	04 c0       	rjmp	.+8      	; 0x57e <oled_fill_line+0x20>
		oled_write_data(0b11111111);
 576:	8f ef       	ldi	r24, 0xFF	; 255
 578:	0e 94 2e 02 	call	0x45c	; 0x45c <oled_write_data>
	oled_write_command(0x10 + (column / 16)); // Higher nibble

}
void oled_fill_line(int line){
    oled_goto_pos(line, 0); // Go to the right line and start at the first column
    for (int i = 0; i < 128; i++) { //For every column write the data to 0 so that the line is cleared
 57c:	21 96       	adiw	r28, 0x01	; 1
 57e:	c0 38       	cpi	r28, 0x80	; 128
 580:	d1 05       	cpc	r29, r1
 582:	cc f3       	brlt	.-14     	; 0x576 <oled_fill_line+0x18>
		oled_write_data(0b11111111);
	}
    oled_goto_line(line); //Go back to the 
 584:	c8 01       	movw	r24, r16
 586:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <oled_goto_line>

}
 58a:	df 91       	pop	r29
 58c:	cf 91       	pop	r28
 58e:	1f 91       	pop	r17
 590:	0f 91       	pop	r16
 592:	08 95       	ret

00000594 <oled_clear_line>:
void oled_clear_line(int line){
 594:	0f 93       	push	r16
 596:	1f 93       	push	r17
 598:	cf 93       	push	r28
 59a:	df 93       	push	r29
 59c:	8c 01       	movw	r16, r24
    oled_goto_pos(line, 0); // Go to the right line and start at the first column
 59e:	60 e0       	ldi	r22, 0x00	; 0
 5a0:	70 e0       	ldi	r23, 0x00	; 0
 5a2:	0e 94 9d 02 	call	0x53a	; 0x53a <oled_goto_pos>
    for (int i = 0; i < 128; i++) { //For every column write the data to 0 so that the line is cleared
 5a6:	c0 e0       	ldi	r28, 0x00	; 0
 5a8:	d0 e0       	ldi	r29, 0x00	; 0
 5aa:	04 c0       	rjmp	.+8      	; 0x5b4 <oled_clear_line+0x20>
		oled_write_data(0b00000000);
 5ac:	80 e0       	ldi	r24, 0x00	; 0
 5ae:	0e 94 2e 02 	call	0x45c	; 0x45c <oled_write_data>
    oled_goto_line(line); //Go back to the 

}
void oled_clear_line(int line){
    oled_goto_pos(line, 0); // Go to the right line and start at the first column
    for (int i = 0; i < 128; i++) { //For every column write the data to 0 so that the line is cleared
 5b2:	21 96       	adiw	r28, 0x01	; 1
 5b4:	c0 38       	cpi	r28, 0x80	; 128
 5b6:	d1 05       	cpc	r29, r1
 5b8:	cc f3       	brlt	.-14     	; 0x5ac <oled_clear_line+0x18>
		oled_write_data(0b00000000);
	}
    oled_goto_line(line); //Go back to the 
 5ba:	c8 01       	movw	r24, r16
 5bc:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <oled_goto_line>


}
 5c0:	df 91       	pop	r29
 5c2:	cf 91       	pop	r28
 5c4:	1f 91       	pop	r17
 5c6:	0f 91       	pop	r16
 5c8:	08 95       	ret

000005ca <oled_reset>:
    oled_write_command(0x20);
	oled_write_command(0b10);

}

void oled_reset(){
 5ca:	cf 93       	push	r28
 5cc:	df 93       	push	r29
    for (int i = 0; i < 8; i++) { //For every column write the data to 0 so that the line is cleared
 5ce:	c0 e0       	ldi	r28, 0x00	; 0
 5d0:	d0 e0       	ldi	r29, 0x00	; 0
 5d2:	04 c0       	rjmp	.+8      	; 0x5dc <oled_reset+0x12>
		oled_clear_line(i);
 5d4:	ce 01       	movw	r24, r28
 5d6:	0e 94 ca 02 	call	0x594	; 0x594 <oled_clear_line>
	oled_write_command(0b10);

}

void oled_reset(){
    for (int i = 0; i < 8; i++) { //For every column write the data to 0 so that the line is cleared
 5da:	21 96       	adiw	r28, 0x01	; 1
 5dc:	c8 30       	cpi	r28, 0x08	; 8
 5de:	d1 05       	cpc	r29, r1
 5e0:	cc f3       	brlt	.-14     	; 0x5d4 <oled_reset+0xa>
		oled_clear_line(i);
	}
    oled_home();
 5e2:	0e 94 a8 02 	call	0x550	; 0x550 <oled_home>

}
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	08 95       	ret

000005ec <oled_print_char>:
    oled_goto_line(row);
    oled_goto_column(column);

}

void oled_print_char(char character){
 5ec:	1f 93       	push	r17
 5ee:	cf 93       	push	r28
 5f0:	df 93       	push	r29
    //This is if the page adressing mode
    character = character - 32; //To make it line up with fonts.h since there are no special characters
 5f2:	10 ee       	ldi	r17, 0xE0	; 224
 5f4:	18 0f       	add	r17, r24
        for (int i = 0; i < 8; i++) {
 5f6:	c0 e0       	ldi	r28, 0x00	; 0
 5f8:	d0 e0       	ldi	r29, 0x00	; 0
 5fa:	10 c0       	rjmp	.+32     	; 0x61c <oled_print_char+0x30>
        char column = pgm_read_byte(&font8[character][i]);
 5fc:	e1 2f       	mov	r30, r17
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	ee 0f       	add	r30, r30
 602:	ff 1f       	adc	r31, r31
 604:	ee 0f       	add	r30, r30
 606:	ff 1f       	adc	r31, r31
 608:	ee 0f       	add	r30, r30
 60a:	ff 1f       	adc	r31, r31
 60c:	ec 0f       	add	r30, r28
 60e:	fd 1f       	adc	r31, r29
 610:	e0 59       	subi	r30, 0x90	; 144
 612:	ff 4f       	sbci	r31, 0xFF	; 255
 614:	84 91       	lpm	r24, Z
        oled_write_data(column);
 616:	0e 94 2e 02 	call	0x45c	; 0x45c <oled_write_data>
}

void oled_print_char(char character){
    //This is if the page adressing mode
    character = character - 32; //To make it line up with fonts.h since there are no special characters
        for (int i = 0; i < 8; i++) {
 61a:	21 96       	adiw	r28, 0x01	; 1
 61c:	c8 30       	cpi	r28, 0x08	; 8
 61e:	d1 05       	cpc	r29, r1
 620:	6c f3       	brlt	.-38     	; 0x5fc <oled_print_char+0x10>
        char column = pgm_read_byte(&font8[character][i]);
        oled_write_data(column);
  }
}
 622:	df 91       	pop	r29
 624:	cf 91       	pop	r28
 626:	1f 91       	pop	r17
 628:	08 95       	ret

0000062a <XMEM_init>:
#include "SRAMdrv.h"

void XMEM_init(void){
	MCUCR |= (1<<SRE); //enable XMEM
 62a:	85 b7       	in	r24, 0x35	; 53
 62c:	80 68       	ori	r24, 0x80	; 128
 62e:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2); // Masking P7-P4
 630:	80 b7       	in	r24, 0x30	; 48
 632:	80 62       	ori	r24, 0x20	; 32
 634:	80 bf       	out	0x30, r24	; 48
 636:	08 95       	ret

00000638 <USART_Transmit>:
#include "UARTdrv.h"

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
 638:	5d 9b       	sbis	0x0b, 5	; 11
 63a:	fe cf       	rjmp	.-4      	; 0x638 <USART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 63c:	8c b9       	out	0x0c, r24	; 12
 63e:	08 95       	ret

00000640 <USART_Receive>:
}
unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
 640:	5f 9b       	sbis	0x0b, 7	; 11
 642:	fe cf       	rjmp	.-4      	; 0x640 <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR0;
 644:	8c b1       	in	r24, 0x0c	; 12
}
 646:	08 95       	ret

00000648 <USART_Init>:
void USART_Init( unsigned int ubrr )
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 648:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
 64a:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 64c:	88 e1       	ldi	r24, 0x18	; 24
 64e:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
 650:	8e e8       	ldi	r24, 0x8E	; 142
 652:	80 bd       	out	0x20, r24	; 32
	fdevopen(USART_Transmit,USART_Receive);
 654:	60 e2       	ldi	r22, 0x20	; 32
 656:	73 e0       	ldi	r23, 0x03	; 3
 658:	8c e1       	ldi	r24, 0x1C	; 28
 65a:	93 e0       	ldi	r25, 0x03	; 3
 65c:	0e 94 31 03 	call	0x662	; 0x662 <fdevopen>
 660:	08 95       	ret

00000662 <fdevopen>:
 662:	0f 93       	push	r16
 664:	1f 93       	push	r17
 666:	cf 93       	push	r28
 668:	df 93       	push	r29
 66a:	00 97       	sbiw	r24, 0x00	; 0
 66c:	31 f4       	brne	.+12     	; 0x67a <fdevopen+0x18>
 66e:	61 15       	cp	r22, r1
 670:	71 05       	cpc	r23, r1
 672:	19 f4       	brne	.+6      	; 0x67a <fdevopen+0x18>
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	3a c0       	rjmp	.+116    	; 0x6ee <fdevopen+0x8c>
 67a:	8b 01       	movw	r16, r22
 67c:	ec 01       	movw	r28, r24
 67e:	6e e0       	ldi	r22, 0x0E	; 14
 680:	70 e0       	ldi	r23, 0x00	; 0
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <calloc>
 68a:	fc 01       	movw	r30, r24
 68c:	89 2b       	or	r24, r25
 68e:	91 f3       	breq	.-28     	; 0x674 <fdevopen+0x12>
 690:	80 e8       	ldi	r24, 0x80	; 128
 692:	83 83       	std	Z+3, r24	; 0x03
 694:	01 15       	cp	r16, r1
 696:	11 05       	cpc	r17, r1
 698:	71 f0       	breq	.+28     	; 0x6b6 <fdevopen+0x54>
 69a:	13 87       	std	Z+11, r17	; 0x0b
 69c:	02 87       	std	Z+10, r16	; 0x0a
 69e:	81 e8       	ldi	r24, 0x81	; 129
 6a0:	83 83       	std	Z+3, r24	; 0x03
 6a2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__iob>
 6a6:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__iob+0x1>
 6aa:	89 2b       	or	r24, r25
 6ac:	21 f4       	brne	.+8      	; 0x6b6 <fdevopen+0x54>
 6ae:	f0 93 08 01 	sts	0x0108, r31	; 0x800108 <__iob+0x1>
 6b2:	e0 93 07 01 	sts	0x0107, r30	; 0x800107 <__iob>
 6b6:	20 97       	sbiw	r28, 0x00	; 0
 6b8:	c9 f0       	breq	.+50     	; 0x6ec <fdevopen+0x8a>
 6ba:	d1 87       	std	Z+9, r29	; 0x09
 6bc:	c0 87       	std	Z+8, r28	; 0x08
 6be:	83 81       	ldd	r24, Z+3	; 0x03
 6c0:	82 60       	ori	r24, 0x02	; 2
 6c2:	83 83       	std	Z+3, r24	; 0x03
 6c4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__iob+0x2>
 6c8:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__iob+0x3>
 6cc:	89 2b       	or	r24, r25
 6ce:	71 f4       	brne	.+28     	; 0x6ec <fdevopen+0x8a>
 6d0:	f0 93 0a 01 	sts	0x010A, r31	; 0x80010a <__iob+0x3>
 6d4:	e0 93 09 01 	sts	0x0109, r30	; 0x800109 <__iob+0x2>
 6d8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__iob+0x4>
 6dc:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__iob+0x5>
 6e0:	89 2b       	or	r24, r25
 6e2:	21 f4       	brne	.+8      	; 0x6ec <fdevopen+0x8a>
 6e4:	f0 93 0c 01 	sts	0x010C, r31	; 0x80010c <__iob+0x5>
 6e8:	e0 93 0b 01 	sts	0x010B, r30	; 0x80010b <__iob+0x4>
 6ec:	cf 01       	movw	r24, r30
 6ee:	df 91       	pop	r29
 6f0:	cf 91       	pop	r28
 6f2:	1f 91       	pop	r17
 6f4:	0f 91       	pop	r16
 6f6:	08 95       	ret

000006f8 <calloc>:
 6f8:	0f 93       	push	r16
 6fa:	1f 93       	push	r17
 6fc:	cf 93       	push	r28
 6fe:	df 93       	push	r29
 700:	86 9f       	mul	r24, r22
 702:	80 01       	movw	r16, r0
 704:	87 9f       	mul	r24, r23
 706:	10 0d       	add	r17, r0
 708:	96 9f       	mul	r25, r22
 70a:	10 0d       	add	r17, r0
 70c:	11 24       	eor	r1, r1
 70e:	c8 01       	movw	r24, r16
 710:	0e 94 98 03 	call	0x730	; 0x730 <malloc>
 714:	ec 01       	movw	r28, r24
 716:	00 97       	sbiw	r24, 0x00	; 0
 718:	29 f0       	breq	.+10     	; 0x724 <calloc+0x2c>
 71a:	a8 01       	movw	r20, r16
 71c:	60 e0       	ldi	r22, 0x00	; 0
 71e:	70 e0       	ldi	r23, 0x00	; 0
 720:	0e 94 b9 04 	call	0x972	; 0x972 <memset>
 724:	ce 01       	movw	r24, r28
 726:	df 91       	pop	r29
 728:	cf 91       	pop	r28
 72a:	1f 91       	pop	r17
 72c:	0f 91       	pop	r16
 72e:	08 95       	ret

00000730 <malloc>:
 730:	0f 93       	push	r16
 732:	1f 93       	push	r17
 734:	cf 93       	push	r28
 736:	df 93       	push	r29
 738:	82 30       	cpi	r24, 0x02	; 2
 73a:	91 05       	cpc	r25, r1
 73c:	10 f4       	brcc	.+4      	; 0x742 <malloc+0x12>
 73e:	82 e0       	ldi	r24, 0x02	; 2
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <__flp>
 746:	f0 91 10 01 	lds	r31, 0x0110	; 0x800110 <__flp+0x1>
 74a:	20 e0       	ldi	r18, 0x00	; 0
 74c:	30 e0       	ldi	r19, 0x00	; 0
 74e:	a0 e0       	ldi	r26, 0x00	; 0
 750:	b0 e0       	ldi	r27, 0x00	; 0
 752:	30 97       	sbiw	r30, 0x00	; 0
 754:	19 f1       	breq	.+70     	; 0x79c <malloc+0x6c>
 756:	40 81       	ld	r20, Z
 758:	51 81       	ldd	r21, Z+1	; 0x01
 75a:	02 81       	ldd	r16, Z+2	; 0x02
 75c:	13 81       	ldd	r17, Z+3	; 0x03
 75e:	48 17       	cp	r20, r24
 760:	59 07       	cpc	r21, r25
 762:	c8 f0       	brcs	.+50     	; 0x796 <malloc+0x66>
 764:	84 17       	cp	r24, r20
 766:	95 07       	cpc	r25, r21
 768:	69 f4       	brne	.+26     	; 0x784 <malloc+0x54>
 76a:	10 97       	sbiw	r26, 0x00	; 0
 76c:	31 f0       	breq	.+12     	; 0x77a <malloc+0x4a>
 76e:	12 96       	adiw	r26, 0x02	; 2
 770:	0c 93       	st	X, r16
 772:	12 97       	sbiw	r26, 0x02	; 2
 774:	13 96       	adiw	r26, 0x03	; 3
 776:	1c 93       	st	X, r17
 778:	27 c0       	rjmp	.+78     	; 0x7c8 <malloc+0x98>
 77a:	00 93 0f 01 	sts	0x010F, r16	; 0x80010f <__flp>
 77e:	10 93 10 01 	sts	0x0110, r17	; 0x800110 <__flp+0x1>
 782:	22 c0       	rjmp	.+68     	; 0x7c8 <malloc+0x98>
 784:	21 15       	cp	r18, r1
 786:	31 05       	cpc	r19, r1
 788:	19 f0       	breq	.+6      	; 0x790 <malloc+0x60>
 78a:	42 17       	cp	r20, r18
 78c:	53 07       	cpc	r21, r19
 78e:	18 f4       	brcc	.+6      	; 0x796 <malloc+0x66>
 790:	9a 01       	movw	r18, r20
 792:	bd 01       	movw	r22, r26
 794:	ef 01       	movw	r28, r30
 796:	df 01       	movw	r26, r30
 798:	f8 01       	movw	r30, r16
 79a:	db cf       	rjmp	.-74     	; 0x752 <malloc+0x22>
 79c:	21 15       	cp	r18, r1
 79e:	31 05       	cpc	r19, r1
 7a0:	f9 f0       	breq	.+62     	; 0x7e0 <malloc+0xb0>
 7a2:	28 1b       	sub	r18, r24
 7a4:	39 0b       	sbc	r19, r25
 7a6:	24 30       	cpi	r18, 0x04	; 4
 7a8:	31 05       	cpc	r19, r1
 7aa:	80 f4       	brcc	.+32     	; 0x7cc <malloc+0x9c>
 7ac:	8a 81       	ldd	r24, Y+2	; 0x02
 7ae:	9b 81       	ldd	r25, Y+3	; 0x03
 7b0:	61 15       	cp	r22, r1
 7b2:	71 05       	cpc	r23, r1
 7b4:	21 f0       	breq	.+8      	; 0x7be <malloc+0x8e>
 7b6:	fb 01       	movw	r30, r22
 7b8:	93 83       	std	Z+3, r25	; 0x03
 7ba:	82 83       	std	Z+2, r24	; 0x02
 7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <malloc+0x96>
 7be:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <__flp+0x1>
 7c2:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <__flp>
 7c6:	fe 01       	movw	r30, r28
 7c8:	32 96       	adiw	r30, 0x02	; 2
 7ca:	44 c0       	rjmp	.+136    	; 0x854 <malloc+0x124>
 7cc:	fe 01       	movw	r30, r28
 7ce:	e2 0f       	add	r30, r18
 7d0:	f3 1f       	adc	r31, r19
 7d2:	81 93       	st	Z+, r24
 7d4:	91 93       	st	Z+, r25
 7d6:	22 50       	subi	r18, 0x02	; 2
 7d8:	31 09       	sbc	r19, r1
 7da:	39 83       	std	Y+1, r19	; 0x01
 7dc:	28 83       	st	Y, r18
 7de:	3a c0       	rjmp	.+116    	; 0x854 <malloc+0x124>
 7e0:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <__brkval>
 7e4:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <__brkval+0x1>
 7e8:	23 2b       	or	r18, r19
 7ea:	41 f4       	brne	.+16     	; 0x7fc <malloc+0xcc>
 7ec:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 7f0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 7f4:	30 93 0e 01 	sts	0x010E, r19	; 0x80010e <__brkval+0x1>
 7f8:	20 93 0d 01 	sts	0x010D, r18	; 0x80010d <__brkval>
 7fc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 800:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 804:	21 15       	cp	r18, r1
 806:	31 05       	cpc	r19, r1
 808:	41 f4       	brne	.+16     	; 0x81a <malloc+0xea>
 80a:	2d b7       	in	r18, 0x3d	; 61
 80c:	3e b7       	in	r19, 0x3e	; 62
 80e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 812:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 816:	24 1b       	sub	r18, r20
 818:	35 0b       	sbc	r19, r21
 81a:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <__brkval>
 81e:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <__brkval+0x1>
 822:	e2 17       	cp	r30, r18
 824:	f3 07       	cpc	r31, r19
 826:	a0 f4       	brcc	.+40     	; 0x850 <malloc+0x120>
 828:	2e 1b       	sub	r18, r30
 82a:	3f 0b       	sbc	r19, r31
 82c:	28 17       	cp	r18, r24
 82e:	39 07       	cpc	r19, r25
 830:	78 f0       	brcs	.+30     	; 0x850 <malloc+0x120>
 832:	ac 01       	movw	r20, r24
 834:	4e 5f       	subi	r20, 0xFE	; 254
 836:	5f 4f       	sbci	r21, 0xFF	; 255
 838:	24 17       	cp	r18, r20
 83a:	35 07       	cpc	r19, r21
 83c:	48 f0       	brcs	.+18     	; 0x850 <malloc+0x120>
 83e:	4e 0f       	add	r20, r30
 840:	5f 1f       	adc	r21, r31
 842:	50 93 0e 01 	sts	0x010E, r21	; 0x80010e <__brkval+0x1>
 846:	40 93 0d 01 	sts	0x010D, r20	; 0x80010d <__brkval>
 84a:	81 93       	st	Z+, r24
 84c:	91 93       	st	Z+, r25
 84e:	02 c0       	rjmp	.+4      	; 0x854 <malloc+0x124>
 850:	e0 e0       	ldi	r30, 0x00	; 0
 852:	f0 e0       	ldi	r31, 0x00	; 0
 854:	cf 01       	movw	r24, r30
 856:	df 91       	pop	r29
 858:	cf 91       	pop	r28
 85a:	1f 91       	pop	r17
 85c:	0f 91       	pop	r16
 85e:	08 95       	ret

00000860 <free>:
 860:	cf 93       	push	r28
 862:	df 93       	push	r29
 864:	00 97       	sbiw	r24, 0x00	; 0
 866:	09 f4       	brne	.+2      	; 0x86a <free+0xa>
 868:	81 c0       	rjmp	.+258    	; 0x96c <free+0x10c>
 86a:	fc 01       	movw	r30, r24
 86c:	32 97       	sbiw	r30, 0x02	; 2
 86e:	13 82       	std	Z+3, r1	; 0x03
 870:	12 82       	std	Z+2, r1	; 0x02
 872:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <__flp>
 876:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <__flp+0x1>
 87a:	10 97       	sbiw	r26, 0x00	; 0
 87c:	81 f4       	brne	.+32     	; 0x89e <free+0x3e>
 87e:	20 81       	ld	r18, Z
 880:	31 81       	ldd	r19, Z+1	; 0x01
 882:	82 0f       	add	r24, r18
 884:	93 1f       	adc	r25, r19
 886:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <__brkval>
 88a:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <__brkval+0x1>
 88e:	28 17       	cp	r18, r24
 890:	39 07       	cpc	r19, r25
 892:	51 f5       	brne	.+84     	; 0x8e8 <free+0x88>
 894:	f0 93 0e 01 	sts	0x010E, r31	; 0x80010e <__brkval+0x1>
 898:	e0 93 0d 01 	sts	0x010D, r30	; 0x80010d <__brkval>
 89c:	67 c0       	rjmp	.+206    	; 0x96c <free+0x10c>
 89e:	ed 01       	movw	r28, r26
 8a0:	20 e0       	ldi	r18, 0x00	; 0
 8a2:	30 e0       	ldi	r19, 0x00	; 0
 8a4:	ce 17       	cp	r28, r30
 8a6:	df 07       	cpc	r29, r31
 8a8:	40 f4       	brcc	.+16     	; 0x8ba <free+0x5a>
 8aa:	4a 81       	ldd	r20, Y+2	; 0x02
 8ac:	5b 81       	ldd	r21, Y+3	; 0x03
 8ae:	9e 01       	movw	r18, r28
 8b0:	41 15       	cp	r20, r1
 8b2:	51 05       	cpc	r21, r1
 8b4:	f1 f0       	breq	.+60     	; 0x8f2 <free+0x92>
 8b6:	ea 01       	movw	r28, r20
 8b8:	f5 cf       	rjmp	.-22     	; 0x8a4 <free+0x44>
 8ba:	d3 83       	std	Z+3, r29	; 0x03
 8bc:	c2 83       	std	Z+2, r28	; 0x02
 8be:	40 81       	ld	r20, Z
 8c0:	51 81       	ldd	r21, Z+1	; 0x01
 8c2:	84 0f       	add	r24, r20
 8c4:	95 1f       	adc	r25, r21
 8c6:	c8 17       	cp	r28, r24
 8c8:	d9 07       	cpc	r29, r25
 8ca:	59 f4       	brne	.+22     	; 0x8e2 <free+0x82>
 8cc:	88 81       	ld	r24, Y
 8ce:	99 81       	ldd	r25, Y+1	; 0x01
 8d0:	84 0f       	add	r24, r20
 8d2:	95 1f       	adc	r25, r21
 8d4:	02 96       	adiw	r24, 0x02	; 2
 8d6:	91 83       	std	Z+1, r25	; 0x01
 8d8:	80 83       	st	Z, r24
 8da:	8a 81       	ldd	r24, Y+2	; 0x02
 8dc:	9b 81       	ldd	r25, Y+3	; 0x03
 8de:	93 83       	std	Z+3, r25	; 0x03
 8e0:	82 83       	std	Z+2, r24	; 0x02
 8e2:	21 15       	cp	r18, r1
 8e4:	31 05       	cpc	r19, r1
 8e6:	29 f4       	brne	.+10     	; 0x8f2 <free+0x92>
 8e8:	f0 93 10 01 	sts	0x0110, r31	; 0x800110 <__flp+0x1>
 8ec:	e0 93 0f 01 	sts	0x010F, r30	; 0x80010f <__flp>
 8f0:	3d c0       	rjmp	.+122    	; 0x96c <free+0x10c>
 8f2:	e9 01       	movw	r28, r18
 8f4:	fb 83       	std	Y+3, r31	; 0x03
 8f6:	ea 83       	std	Y+2, r30	; 0x02
 8f8:	49 91       	ld	r20, Y+
 8fa:	59 91       	ld	r21, Y+
 8fc:	c4 0f       	add	r28, r20
 8fe:	d5 1f       	adc	r29, r21
 900:	ec 17       	cp	r30, r28
 902:	fd 07       	cpc	r31, r29
 904:	61 f4       	brne	.+24     	; 0x91e <free+0xbe>
 906:	80 81       	ld	r24, Z
 908:	91 81       	ldd	r25, Z+1	; 0x01
 90a:	84 0f       	add	r24, r20
 90c:	95 1f       	adc	r25, r21
 90e:	02 96       	adiw	r24, 0x02	; 2
 910:	e9 01       	movw	r28, r18
 912:	99 83       	std	Y+1, r25	; 0x01
 914:	88 83       	st	Y, r24
 916:	82 81       	ldd	r24, Z+2	; 0x02
 918:	93 81       	ldd	r25, Z+3	; 0x03
 91a:	9b 83       	std	Y+3, r25	; 0x03
 91c:	8a 83       	std	Y+2, r24	; 0x02
 91e:	e0 e0       	ldi	r30, 0x00	; 0
 920:	f0 e0       	ldi	r31, 0x00	; 0
 922:	12 96       	adiw	r26, 0x02	; 2
 924:	8d 91       	ld	r24, X+
 926:	9c 91       	ld	r25, X
 928:	13 97       	sbiw	r26, 0x03	; 3
 92a:	00 97       	sbiw	r24, 0x00	; 0
 92c:	19 f0       	breq	.+6      	; 0x934 <free+0xd4>
 92e:	fd 01       	movw	r30, r26
 930:	dc 01       	movw	r26, r24
 932:	f7 cf       	rjmp	.-18     	; 0x922 <free+0xc2>
 934:	8d 91       	ld	r24, X+
 936:	9c 91       	ld	r25, X
 938:	11 97       	sbiw	r26, 0x01	; 1
 93a:	9d 01       	movw	r18, r26
 93c:	2e 5f       	subi	r18, 0xFE	; 254
 93e:	3f 4f       	sbci	r19, 0xFF	; 255
 940:	82 0f       	add	r24, r18
 942:	93 1f       	adc	r25, r19
 944:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <__brkval>
 948:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <__brkval+0x1>
 94c:	28 17       	cp	r18, r24
 94e:	39 07       	cpc	r19, r25
 950:	69 f4       	brne	.+26     	; 0x96c <free+0x10c>
 952:	30 97       	sbiw	r30, 0x00	; 0
 954:	29 f4       	brne	.+10     	; 0x960 <free+0x100>
 956:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__flp+0x1>
 95a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__flp>
 95e:	02 c0       	rjmp	.+4      	; 0x964 <free+0x104>
 960:	13 82       	std	Z+3, r1	; 0x03
 962:	12 82       	std	Z+2, r1	; 0x02
 964:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <__brkval+0x1>
 968:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <__brkval>
 96c:	df 91       	pop	r29
 96e:	cf 91       	pop	r28
 970:	08 95       	ret

00000972 <memset>:
 972:	dc 01       	movw	r26, r24
 974:	01 c0       	rjmp	.+2      	; 0x978 <memset+0x6>
 976:	6d 93       	st	X+, r22
 978:	41 50       	subi	r20, 0x01	; 1
 97a:	50 40       	sbci	r21, 0x00	; 0
 97c:	e0 f7       	brcc	.-8      	; 0x976 <memset+0x4>
 97e:	08 95       	ret

00000980 <_exit>:
 980:	f8 94       	cli

00000982 <__stop_program>:
 982:	ff cf       	rjmp	.-2      	; 0x982 <__stop_program>
