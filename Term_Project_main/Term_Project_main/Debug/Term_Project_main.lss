
Term_Project_main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  00001252  000012e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001252  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080018c  0080018c  00001372  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001372  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  0000140c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000196e  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d72  00000000  00000000  00002f62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e63  00000000  00000000  00003cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000494  00000000  00000000  00004b38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000078e  00000000  00000000  00004fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b1f  00000000  00000000  0000575a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00006279  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__vector_1>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <vfprintf+0x10c>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	11 e0       	ldi	r17, 0x01	; 1
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e2 e5       	ldi	r30, 0x52	; 82
     37c:	f2 e1       	ldi	r31, 0x12	; 18
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	ac 38       	cpi	r26, 0x8C	; 140
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	21 e0       	ldi	r18, 0x01	; 1
     38c:	ac e8       	ldi	r26, 0x8C	; 140
     38e:	b1 e0       	ldi	r27, 0x01	; 1
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a9 39       	cpi	r26, 0x99	; 153
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <main>
     39e:	0c 94 27 09 	jmp	0x124e	; 0x124e <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <ADC_Init>:

uint8_t BUSY_flag = 0;

void ADC_Init(void){

    TCCR1A = (1<<COM1A1)|(1<<WGM11);  // Clear OCnA/OCnB on Compare Match, set OCnA/OCnB at TOP.
     3a6:	82 e8       	ldi	r24, 0x82	; 130
     3a8:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10);   // Fast PWM, TOP=ICRn, Update OCRnx on TOP. // Prescaler = 1
     3aa:	89 e1       	ldi	r24, 0x19	; 25
     3ac:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 5;
     3ae:	85 e0       	ldi	r24, 0x05	; 5
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	95 bd       	out	0x25, r25	; 37
     3b4:	84 bd       	out	0x24, r24	; 36
	OCR1A = 2;  // 50% Duty Cycle, ~0,8Mhz
     3b6:	82 e0       	ldi	r24, 0x02	; 2
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	9b bd       	out	0x2b, r25	; 43
     3bc:	8a bd       	out	0x2a, r24	; 42
	
	DDRD |= (1<<PD5);
     3be:	81 b3       	in	r24, 0x11	; 17
     3c0:	80 62       	ori	r24, 0x20	; 32
     3c2:	81 bb       	out	0x11, r24	; 17
     3c4:	08 95       	ret

000003c6 <ADC_read>:

}

uint8_t ADC_read(uint8_t channel){
     3c6:	0f 93       	push	r16
     3c8:	1f 93       	push	r17
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	d8 2f       	mov	r29, r24
	
	volatile *adc_in = (char *) ADC_ADDRESS;
	
	uint8_t data_x, data_y, data_ls, data_rs;
	
	adc_in[0] = 0x00;
     3d0:	10 92 01 14 	sts	0x1401, r1	; 0x801401 <__bss_end+0x1268>
     3d4:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <__bss_end+0x1267>
	
	sei();
     3d8:	78 94       	sei
	while(!BUSY_flag){};
     3da:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end>
     3de:	88 23       	and	r24, r24
     3e0:	e1 f3       	breq	.-8      	; 0x3da <ADC_read+0x14>
	cli();
     3e2:	f8 94       	cli
	
	data_x = XMEM_read(0x400);
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	94 e0       	ldi	r25, 0x04	; 4
     3e8:	0e 94 49 04 	call	0x892	; 0x892 <XMEM_read>
     3ec:	18 2f       	mov	r17, r24
	data_y = XMEM_read(0x400);
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	94 e0       	ldi	r25, 0x04	; 4
     3f2:	0e 94 49 04 	call	0x892	; 0x892 <XMEM_read>
     3f6:	c8 2f       	mov	r28, r24
	data_ls = XMEM_read(0x400);
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	94 e0       	ldi	r25, 0x04	; 4
     3fc:	0e 94 49 04 	call	0x892	; 0x892 <XMEM_read>
     400:	08 2f       	mov	r16, r24
	data_rs = XMEM_read(0x400);
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	94 e0       	ldi	r25, 0x04	; 4
     406:	0e 94 49 04 	call	0x892	; 0x892 <XMEM_read>
	
	switch (channel){
     40a:	d1 30       	cpi	r29, 0x01	; 1
     40c:	59 f0       	breq	.+22     	; 0x424 <__DATA_REGION_LENGTH__+0x24>
     40e:	40 f0       	brcs	.+16     	; 0x420 <__DATA_REGION_LENGTH__+0x20>
     410:	d2 30       	cpi	r29, 0x02	; 2
     412:	19 f0       	breq	.+6      	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
     414:	d3 30       	cpi	r29, 0x03	; 3
     416:	39 f0       	breq	.+14     	; 0x426 <__DATA_REGION_LENGTH__+0x26>
     418:	02 c0       	rjmp	.+4      	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
			break;
		case 1:
			return data_y;
			break;
		case 2:
			return data_ls;
     41a:	80 2f       	mov	r24, r16
     41c:	04 c0       	rjmp	.+8      	; 0x426 <__DATA_REGION_LENGTH__+0x26>
			break;
		default:
			break;
	}
	
}
     41e:	03 c0       	rjmp	.+6      	; 0x426 <__DATA_REGION_LENGTH__+0x26>
	data_ls = XMEM_read(0x400);
	data_rs = XMEM_read(0x400);
	
	switch (channel){
		case 0:
			return data_x;
     420:	81 2f       	mov	r24, r17
     422:	01 c0       	rjmp	.+2      	; 0x426 <__DATA_REGION_LENGTH__+0x26>
			break;
		case 1:
			return data_y;
     424:	8c 2f       	mov	r24, r28
			break;
		default:
			break;
	}
	
}
     426:	df 91       	pop	r29
     428:	cf 91       	pop	r28
     42a:	1f 91       	pop	r17
     42c:	0f 91       	pop	r16
     42e:	08 95       	ret

00000430 <ADC_calibrate>:

void ADC_calibrate(void){
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
	offset.x = ADC_read(CHANNEL_X);
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <ADC_read>
     43a:	cd e8       	ldi	r28, 0x8D	; 141
     43c:	d1 e0       	ldi	r29, 0x01	; 1
     43e:	88 83       	st	Y, r24
	offset.y = ADC_read(CHANNEL_Y);
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <ADC_read>
     446:	89 83       	std	Y+1, r24	; 0x01
	printf("x offset: %d, y offset: %d\n\r", offset.x, offset.y);
     448:	98 81       	ld	r25, Y
     44a:	1f 92       	push	r1
     44c:	8f 93       	push	r24
     44e:	1f 92       	push	r1
     450:	9f 93       	push	r25
     452:	86 e0       	ldi	r24, 0x06	; 6
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	9f 93       	push	r25
     458:	8f 93       	push	r24
     45a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <printf>
}
     45e:	0f 90       	pop	r0
     460:	0f 90       	pop	r0
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	08 95       	ret

00000470 <Int_INIT>:

void Int_INIT(void){
	
    GICR |= (1<<INT0);
     470:	8b b7       	in	r24, 0x3b	; 59
     472:	80 64       	ori	r24, 0x40	; 64
     474:	8b bf       	out	0x3b, r24	; 59
	
	MCUCR |= (1<<ISC00);
     476:	85 b7       	in	r24, 0x35	; 53
     478:	81 60       	ori	r24, 0x01	; 1
     47a:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<ISC01);
     47c:	85 b7       	in	r24, 0x35	; 53
     47e:	82 60       	ori	r24, 0x02	; 2
     480:	85 bf       	out	0x35, r24	; 53
	
	sei();
     482:	78 94       	sei
     484:	08 95       	ret

00000486 <adc_get_pos>:
}

adc_pos adc_get_pos(){
     486:	1f 93       	push	r17
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
	
	adc_pos pos;
	uint8_t adc_raw[2];

	adc_raw[0] = ADC_read(CHANNEL_X);
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <ADC_read>
     492:	c8 2f       	mov	r28, r24
	adc_raw[1] = ADC_read(CHANNEL_Y);
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <ADC_read>
     49a:	e8 2f       	mov	r30, r24

	if (adc_raw[0] > offset.x){
     49c:	40 91 8d 01 	lds	r20, 0x018D	; 0x80018d <offset>
     4a0:	4c 17       	cp	r20, r28
     4a2:	98 f4       	brcc	.+38     	; 0x4ca <adc_get_pos+0x44>
		pos.x = (adc_raw[0] - offset.x)*100/(ADC_MAX_VALUE - offset.x);
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	2c 2f       	mov	r18, r28
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	24 1b       	sub	r18, r20
     4ac:	35 0b       	sbc	r19, r21
     4ae:	64 e6       	ldi	r22, 0x64	; 100
     4b0:	62 9f       	mul	r22, r18
     4b2:	c0 01       	movw	r24, r0
     4b4:	63 9f       	mul	r22, r19
     4b6:	90 0d       	add	r25, r0
     4b8:	11 24       	eor	r1, r1
     4ba:	6f ef       	ldi	r22, 0xFF	; 255
     4bc:	70 e0       	ldi	r23, 0x00	; 0
     4be:	64 1b       	sub	r22, r20
     4c0:	75 0b       	sbc	r23, r21
     4c2:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__divmodhi4>
     4c6:	16 2f       	mov	r17, r22
     4c8:	11 c0       	rjmp	.+34     	; 0x4ec <adc_get_pos+0x66>
	}else if(adc_raw[0] < offset.x){
     4ca:	c4 17       	cp	r28, r20
     4cc:	78 f4       	brcc	.+30     	; 0x4ec <adc_get_pos+0x66>
		pos.x = -(offset.x - adc_raw[0])*100/offset.x;
     4ce:	64 2f       	mov	r22, r20
     4d0:	70 e0       	ldi	r23, 0x00	; 0
     4d2:	2c 2f       	mov	r18, r28
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	26 1b       	sub	r18, r22
     4d8:	37 0b       	sbc	r19, r23
     4da:	44 e6       	ldi	r20, 0x64	; 100
     4dc:	42 9f       	mul	r20, r18
     4de:	c0 01       	movw	r24, r0
     4e0:	43 9f       	mul	r20, r19
     4e2:	90 0d       	add	r25, r0
     4e4:	11 24       	eor	r1, r1
     4e6:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__divmodhi4>
     4ea:	16 2f       	mov	r17, r22
	}

	if (adc_raw[1] > offset.y){
     4ec:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <offset+0x1>
     4f0:	2e 17       	cp	r18, r30
     4f2:	90 f4       	brcc	.+36     	; 0x518 <__stack+0x19>
		pos.y = (adc_raw[1] - offset.y)*100/(ADC_MAX_VALUE - offset.y);
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	e2 1b       	sub	r30, r18
     4fa:	f3 0b       	sbc	r31, r19
     4fc:	44 e6       	ldi	r20, 0x64	; 100
     4fe:	4e 9f       	mul	r20, r30
     500:	c0 01       	movw	r24, r0
     502:	4f 9f       	mul	r20, r31
     504:	90 0d       	add	r25, r0
     506:	11 24       	eor	r1, r1
     508:	6f ef       	ldi	r22, 0xFF	; 255
     50a:	70 e0       	ldi	r23, 0x00	; 0
     50c:	62 1b       	sub	r22, r18
     50e:	73 0b       	sbc	r23, r19
     510:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__divmodhi4>
     514:	d6 2f       	mov	r29, r22
     516:	11 c0       	rjmp	.+34     	; 0x53a <__stack+0x3b>
	}else if(adc_raw[1] < offset.y){
     518:	e2 17       	cp	r30, r18
     51a:	78 f4       	brcc	.+30     	; 0x53a <__stack+0x3b>
		pos.y = -(offset.y - adc_raw[1])*100/offset.y;
     51c:	62 2f       	mov	r22, r18
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	2e 2f       	mov	r18, r30
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	26 1b       	sub	r18, r22
     526:	37 0b       	sbc	r19, r23
     528:	44 e6       	ldi	r20, 0x64	; 100
     52a:	42 9f       	mul	r20, r18
     52c:	c0 01       	movw	r24, r0
     52e:	43 9f       	mul	r20, r19
     530:	90 0d       	add	r25, r0
     532:	11 24       	eor	r1, r1
     534:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__divmodhi4>
     538:	d6 2f       	mov	r29, r22
	}

	return pos;

}
     53a:	81 2f       	mov	r24, r17
     53c:	9d 2f       	mov	r25, r29
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	08 95       	ret

00000546 <adc_get_dir>:

adc_dir adc_get_dir(adc_pos pos){

	if(abs(pos.y) >= ADC_THRESHHOLD){
     546:	29 2f       	mov	r18, r25
     548:	09 2e       	mov	r0, r25
     54a:	00 0c       	add	r0, r0
     54c:	33 0b       	sbc	r19, r19
     54e:	33 23       	and	r19, r19
     550:	1c f4       	brge	.+6      	; 0x558 <adc_get_dir+0x12>
     552:	31 95       	neg	r19
     554:	21 95       	neg	r18
     556:	31 09       	sbc	r19, r1
     558:	2a 30       	cpi	r18, 0x0A	; 10
     55a:	31 05       	cpc	r19, r1
     55c:	2c f0       	brlt	.+10     	; 0x568 <adc_get_dir+0x22>
		if(pos.y >= ADC_THRESHHOLD){
     55e:	9a 30       	cpi	r25, 0x0A	; 10
     560:	9c f4       	brge	.+38     	; 0x588 <adc_get_dir+0x42>
			return UP;
		}else if(pos.y <= (-ADC_THRESHHOLD)){
     562:	97 3f       	cpi	r25, 0xF7	; 247
     564:	9c f0       	brlt	.+38     	; 0x58c <adc_get_dir+0x46>
     566:	0f c0       	rjmp	.+30     	; 0x586 <adc_get_dir+0x40>
			return DOWN;
		}
	}else if(abs(pos.x) >= ADC_THRESHHOLD){
     568:	28 2f       	mov	r18, r24
     56a:	08 2e       	mov	r0, r24
     56c:	00 0c       	add	r0, r0
     56e:	99 0b       	sbc	r25, r25
     570:	99 23       	and	r25, r25
     572:	1c f4       	brge	.+6      	; 0x57a <adc_get_dir+0x34>
     574:	91 95       	neg	r25
     576:	81 95       	neg	r24
     578:	91 09       	sbc	r25, r1
     57a:	0a 97       	sbiw	r24, 0x0a	; 10
     57c:	4c f0       	brlt	.+18     	; 0x590 <adc_get_dir+0x4a>
		if(pos.x >= ADC_THRESHHOLD){
     57e:	2a 30       	cpi	r18, 0x0A	; 10
     580:	4c f4       	brge	.+18     	; 0x594 <adc_get_dir+0x4e>
			return RIGHT;
		}else if(pos.x <= (-ADC_THRESHHOLD)){
     582:	27 3f       	cpi	r18, 0xF7	; 247
     584:	4c f0       	brlt	.+18     	; 0x598 <adc_get_dir+0x52>
			return LEFT;
		}
	}else{
		return NEUTRAL;
	}
}
     586:	08 95       	ret

adc_dir adc_get_dir(adc_pos pos){

	if(abs(pos.y) >= ADC_THRESHHOLD){
		if(pos.y >= ADC_THRESHHOLD){
			return UP;
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	08 95       	ret
		}else if(pos.y <= (-ADC_THRESHHOLD)){
			return DOWN;
     58c:	82 e0       	ldi	r24, 0x02	; 2
     58e:	08 95       	ret
			return RIGHT;
		}else if(pos.x <= (-ADC_THRESHHOLD)){
			return LEFT;
		}
	}else{
		return NEUTRAL;
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	08 95       	ret
		}else if(pos.y <= (-ADC_THRESHHOLD)){
			return DOWN;
		}
	}else if(abs(pos.x) >= ADC_THRESHHOLD){
		if(pos.x >= ADC_THRESHHOLD){
			return RIGHT;
     594:	84 e0       	ldi	r24, 0x04	; 4
     596:	08 95       	ret
		}else if(pos.x <= (-ADC_THRESHHOLD)){
			return LEFT;
     598:	83 e0       	ldi	r24, 0x03	; 3
		}
	}else{
		return NEUTRAL;
	}
}
     59a:	08 95       	ret

0000059c <__vector_1>:

ISR(INT0_vect){
     59c:	1f 92       	push	r1
     59e:	0f 92       	push	r0
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	0f 92       	push	r0
     5a4:	11 24       	eor	r1, r1
     5a6:	8f 93       	push	r24
    BUSY_flag = 1;
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <__data_end>
}
     5ae:	8f 91       	pop	r24
     5b0:	0f 90       	pop	r0
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	0f 90       	pop	r0
     5b6:	1f 90       	pop	r1
     5b8:	18 95       	reti

000005ba <main>:
#include "SPI/SPIdrv.h"
#include "MCP2515/MCP2515drv.h"

int main(void)
{
	USART_Init(MYUBRR);
     5ba:	8f e1       	ldi	r24, 0x1F	; 31
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 55 04 	call	0x8aa	; 0x8aa <USART_Init>
	XMEM_init();
     5c2:	0e 94 42 04 	call	0x884	; 0x884 <XMEM_init>
	Int_INIT();
     5c6:	0e 94 38 02 	call	0x470	; 0x470 <Int_INIT>
	ADC_Init();
     5ca:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_Init>
	oled_init();
     5ce:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <oled_init>
	printf("her\n");
     5d2:	8c e2       	ldi	r24, 0x2C	; 44
     5d4:	91 e0       	ldi	r25, 0x01	; 1
     5d6:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <puts>
	mcp2515_init();
     5da:	0e 94 4a 03 	call	0x694	; 0x694 <mcp2515_init>
	printf("men ikke her\n");
     5de:	83 e2       	ldi	r24, 0x23	; 35
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <puts>
    /* Replace with your application code */
	
	//TESTE OLED;
	oled_reset();
     5e6:	0e 94 03 04 	call	0x806	; 0x806 <oled_reset>
	oled_home();
     5ea:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <oled_home>
	oled_print_char('t');
     5ee:	84 e7       	ldi	r24, 0x74	; 116
     5f0:	0e 94 14 04 	call	0x828	; 0x828 <oled_print_char>

	ADC_calibrate();
     5f4:	0e 94 18 02 	call	0x430	; 0x430 <ADC_calibrate>
	adc_pos pos;
	adc_dir dir;
    while (1) 
    {	

		pos = adc_get_pos();
     5f8:	0e 94 43 02 	call	0x486	; 0x486 <adc_get_pos>
     5fc:	c8 2f       	mov	r28, r24
     5fe:	d9 2f       	mov	r29, r25
		dir = adc_get_dir(pos);
     600:	0e 94 a3 02 	call	0x546	; 0x546 <adc_get_dir>
     604:	18 2f       	mov	r17, r24

		printf("Positions X: %d%%  Y: %d%%\n\r", pos.x, pos.y);
     606:	8d 2f       	mov	r24, r29
     608:	0d 2e       	mov	r0, r29
     60a:	00 0c       	add	r0, r0
     60c:	99 0b       	sbc	r25, r25
     60e:	9f 93       	push	r25
     610:	df 93       	push	r29
     612:	8c 2f       	mov	r24, r28
     614:	0c 2e       	mov	r0, r28
     616:	00 0c       	add	r0, r0
     618:	99 0b       	sbc	r25, r25
     61a:	9f 93       	push	r25
     61c:	cf 93       	push	r28
     61e:	80 e3       	ldi	r24, 0x30	; 48
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	9f 93       	push	r25
     624:	8f 93       	push	r24
     626:	0e 94 d5 04 	call	0x9aa	; 0x9aa <printf>
		printf("Direction: %d\n\r", dir);
     62a:	1f 92       	push	r1
     62c:	1f 93       	push	r17
     62e:	8d e4       	ldi	r24, 0x4D	; 77
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	9f 93       	push	r25
     634:	8f 93       	push	r24
     636:	0e 94 d5 04 	call	0x9aa	; 0x9aa <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     63a:	2f ef       	ldi	r18, 0xFF	; 255
     63c:	8f ef       	ldi	r24, 0xFF	; 255
     63e:	9e e0       	ldi	r25, 0x0E	; 14
     640:	21 50       	subi	r18, 0x01	; 1
     642:	80 40       	sbci	r24, 0x00	; 0
     644:	90 40       	sbci	r25, 0x00	; 0
     646:	e1 f7       	brne	.-8      	; 0x640 <main+0x86>
     648:	00 c0       	rjmp	.+0      	; 0x64a <main+0x90>
     64a:	00 00       	nop
     64c:	8d b7       	in	r24, 0x3d	; 61
     64e:	9e b7       	in	r25, 0x3e	; 62
     650:	0a 96       	adiw	r24, 0x0a	; 10
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	f8 94       	cli
     656:	9e bf       	out	0x3e, r25	; 62
     658:	0f be       	out	0x3f, r0	; 63
     65a:	8d bf       	out	0x3d, r24	; 61
     65c:	cd cf       	rjmp	.-102    	; 0x5f8 <main+0x3e>

0000065e <mcp2515_read>:
    // More initialization
    return 0;
}


uint8_t mcp2515_read (uint8_t instruction, uint8_t address){
     65e:	cf 93       	push	r28
     660:	c6 2f       	mov	r28, r22
    uint8_t result;
    PORTB &= ~(1 << CAN_CS); // Select CAN - controller
     662:	98 b3       	in	r25, 0x18	; 24
     664:	9f 7e       	andi	r25, 0xEF	; 239
     666:	98 bb       	out	0x18, r25	; 24
    spi_write_char(instruction); // Send read instruction
     668:	0e 94 38 04 	call	0x870	; 0x870 <spi_write_char>
    spi_write_char(address); // Send address
     66c:	8c 2f       	mov	r24, r28
     66e:	0e 94 38 04 	call	0x870	; 0x870 <spi_write_char>
    result = spi_read_char() ; // Read result
     672:	0e 94 3c 04 	call	0x878	; 0x878 <spi_read_char>
    PORTB |= (1 << CAN_CS); // Deselect CAN - controller
     676:	98 b3       	in	r25, 0x18	; 24
     678:	90 61       	ori	r25, 0x10	; 16
     67a:	98 bb       	out	0x18, r25	; 24
    return result;
}
     67c:	cf 91       	pop	r28
     67e:	08 95       	ret

00000680 <mcp2515_reset>:

void mcp2515_reset(){
    PORTB &= ~(1 << CAN_CS); // Select CAN - controller
     680:	88 b3       	in	r24, 0x18	; 24
     682:	8f 7e       	andi	r24, 0xEF	; 239
     684:	88 bb       	out	0x18, r24	; 24
    spi_write_char(MCP_RESET);   //Write reset bit to SPI
     686:	80 ec       	ldi	r24, 0xC0	; 192
     688:	0e 94 38 04 	call	0x870	; 0x870 <spi_write_char>
    PORTB |= (1 << CAN_CS); // Deselect CAN - controller
     68c:	88 b3       	in	r24, 0x18	; 24
     68e:	80 61       	ori	r24, 0x10	; 16
     690:	88 bb       	out	0x18, r24	; 24
     692:	08 95       	ret

00000694 <mcp2515_init>:
#include "MCP2515drv.h"




uint8_t mcp2515_init(){
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	1f 92       	push	r1
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
    uint8_t value ;
    spi_init_master(); // Initialize SPI
     69e:	0e 94 33 04 	call	0x866	; 0x866 <spi_init_master>
    mcp2515_reset(); // Send reset - command
     6a2:	0e 94 40 03 	call	0x680	; 0x680 <mcp2515_reset>
    // Self - test
    mcp2515_read(MCP_CANSTAT, &value);
     6a6:	6c 2f       	mov	r22, r28
     6a8:	6f 5f       	subi	r22, 0xFF	; 255
     6aa:	8e e0       	ldi	r24, 0x0E	; 14
     6ac:	0e 94 2f 03 	call	0x65e	; 0x65e <mcp2515_read>
    if ((value & MODE_MASK) != MODE_NORMAL) {
     6b0:	89 81       	ldd	r24, Y+1	; 0x01
     6b2:	80 7e       	andi	r24, 0xE0	; 224
     6b4:	29 f0       	breq	.+10     	; 0x6c0 <mcp2515_init+0x2c>
    printf ("MCP2515 is NOT in loopback mode after reset !\n");
     6b6:	8d e5       	ldi	r24, 0x5D	; 93
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <puts>
    return 1;
     6be:	81 e0       	ldi	r24, 0x01	; 1
    }
    // More initialization
    return 0;
}
     6c0:	0f 90       	pop	r0
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	08 95       	ret

000006c8 <oled_write_command>:
    for (int i = 0; i < 128; i++) { //For every column write the data to 0 so that the line is cleared
		oled_write_data(0b11111111);
	}
    oled_goto_line(line); //Go back to the 

}
     6c8:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xe67>
     6cc:	08 95       	ret

000006ce <oled_write_data>:
     6ce:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0x1067>
     6d2:	08 95       	ret

000006d4 <oled_init>:
     6d4:	8e ea       	ldi	r24, 0xAE	; 174
     6d6:	0e 94 64 03 	call	0x6c8	; 0x6c8 <oled_write_command>
     6da:	81 ea       	ldi	r24, 0xA1	; 161
     6dc:	0e 94 64 03 	call	0x6c8	; 0x6c8 <oled_write_command>
     6e0:	8a ed       	ldi	r24, 0xDA	; 218
     6e2:	0e 94 64 03 	call	0x6c8	; 0x6c8 <oled_write_command>
     6e6:	82 e1       	ldi	r24, 0x12	; 18
     6e8:	0e 94 64 03 	call	0x6c8	; 0x6c8 <oled_write_command>
     6ec:	88 ec       	ldi	r24, 0xC8	; 200
     6ee:	0e 94 64 03 	call	0x6c8	; 0x6c8 <oled_write_command>
     6f2:	88 ea       	ldi	r24, 0xA8	; 168
     6f4:	0e 94 64 03 	call	0x6c8	; 0x6c8 <oled_write_command>
     6f8:	8f e3       	ldi	r24, 0x3F	; 63
     6fa:	0e 94 64 03 	call	0x6c8	; 0x6c8 <oled_write_command>
     6fe:	85 ed       	ldi	r24, 0xD5	; 213
     700:	0e 94 64 03 	call	0x6c8	; 0x6c8 <oled_write_command>
     704:	80 e8       	ldi	r24, 0x80	; 128
     706:	0e 94 64 03 	call	0x6c8	; 0x6c8 <oled_write_command>
     70a:	81 e8       	ldi	r24, 0x81	; 129
     70c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <oled_write_command>
     710:	80 e5       	ldi	r24, 0x50	; 80
     712:	0e 94 64 03 	call	0x6c8	; 0x6c8 <oled_write_command>
     716:	89 ed       	ldi	r24, 0xD9	; 217
     718:	0e 94 64 03 	call	0x6c8	; 0x6c8 <oled_write_command>
     71c:	81 e2       	ldi	r24, 0x21	; 33
     71e:	0e 94 64 03 	call	0x6c8	; 0x6c8 <oled_write_command>
     722:	80 e2       	ldi	r24, 0x20	; 32
     724:	0e 94 64 03 	call	0x6c8	; 0x6c8 <oled_write_command>
     728:	82 e0       	ldi	r24, 0x02	; 2
     72a:	0e 94 64 03 	call	0x6c8	; 0x6c8 <oled_write_command>
     72e:	8b ed       	ldi	r24, 0xDB	; 219
     730:	0e 94 64 03 	call	0x6c8	; 0x6c8 <oled_write_command>
     734:	80 e3       	ldi	r24, 0x30	; 48
     736:	0e 94 64 03 	call	0x6c8	; 0x6c8 <oled_write_command>
     73a:	8d ea       	ldi	r24, 0xAD	; 173
     73c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <oled_write_command>
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	0e 94 64 03 	call	0x6c8	; 0x6c8 <oled_write_command>
     746:	84 ea       	ldi	r24, 0xA4	; 164
     748:	0e 94 64 03 	call	0x6c8	; 0x6c8 <oled_write_command>
     74c:	86 ea       	ldi	r24, 0xA6	; 166
     74e:	0e 94 64 03 	call	0x6c8	; 0x6c8 <oled_write_command>
     752:	8f ea       	ldi	r24, 0xAF	; 175
     754:	0e 94 64 03 	call	0x6c8	; 0x6c8 <oled_write_command>
     758:	80 e2       	ldi	r24, 0x20	; 32
     75a:	0e 94 64 03 	call	0x6c8	; 0x6c8 <oled_write_command>
     75e:	82 e0       	ldi	r24, 0x02	; 2
     760:	0e 94 64 03 	call	0x6c8	; 0x6c8 <oled_write_command>
     764:	08 95       	ret

00000766 <oled_goto_line>:
     766:	80 55       	subi	r24, 0x50	; 80
     768:	0e 94 64 03 	call	0x6c8	; 0x6c8 <oled_write_command>
     76c:	08 95       	ret

0000076e <oled_goto_column>:
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	ec 01       	movw	r28, r24
     774:	8f 70       	andi	r24, 0x0F	; 15
     776:	90 78       	andi	r25, 0x80	; 128
     778:	99 23       	and	r25, r25
     77a:	24 f4       	brge	.+8      	; 0x784 <oled_goto_column+0x16>
     77c:	01 97       	sbiw	r24, 0x01	; 1
     77e:	80 6f       	ori	r24, 0xF0	; 240
     780:	9f 6f       	ori	r25, 0xFF	; 255
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	0e 94 64 03 	call	0x6c8	; 0x6c8 <oled_write_command>
     788:	ce 01       	movw	r24, r28
     78a:	dd 23       	and	r29, r29
     78c:	0c f4       	brge	.+2      	; 0x790 <oled_goto_column+0x22>
     78e:	0f 96       	adiw	r24, 0x0f	; 15
     790:	95 95       	asr	r25
     792:	87 95       	ror	r24
     794:	95 95       	asr	r25
     796:	87 95       	ror	r24
     798:	95 95       	asr	r25
     79a:	87 95       	ror	r24
     79c:	95 95       	asr	r25
     79e:	87 95       	ror	r24
     7a0:	80 5f       	subi	r24, 0xF0	; 240
     7a2:	0e 94 64 03 	call	0x6c8	; 0x6c8 <oled_write_command>
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	08 95       	ret

000007ac <oled_goto_pos>:
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	eb 01       	movw	r28, r22
     7b2:	0e 94 b3 03 	call	0x766	; 0x766 <oled_goto_line>
     7b6:	ce 01       	movw	r24, r28
     7b8:	0e 94 b7 03 	call	0x76e	; 0x76e <oled_goto_column>
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	08 95       	ret

000007c2 <oled_home>:
     7c2:	60 e0       	ldi	r22, 0x00	; 0
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	0e 94 d6 03 	call	0x7ac	; 0x7ac <oled_goto_pos>
     7ce:	08 95       	ret

000007d0 <oled_clear_line>:
void oled_clear_line(int line){
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	8c 01       	movw	r16, r24
    oled_goto_pos(line, 0); // Go to the right line and start at the first column
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	0e 94 d6 03 	call	0x7ac	; 0x7ac <oled_goto_pos>
    for (int i = 0; i < 128; i++) { //For every column write the data to 0 so that the line is cleared
     7e2:	c0 e0       	ldi	r28, 0x00	; 0
     7e4:	d0 e0       	ldi	r29, 0x00	; 0
     7e6:	04 c0       	rjmp	.+8      	; 0x7f0 <oled_clear_line+0x20>
		oled_write_data(0b00000000);
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	0e 94 67 03 	call	0x6ce	; 0x6ce <oled_write_data>
    oled_goto_line(line); //Go back to the 

}
void oled_clear_line(int line){
    oled_goto_pos(line, 0); // Go to the right line and start at the first column
    for (int i = 0; i < 128; i++) { //For every column write the data to 0 so that the line is cleared
     7ee:	21 96       	adiw	r28, 0x01	; 1
     7f0:	c0 38       	cpi	r28, 0x80	; 128
     7f2:	d1 05       	cpc	r29, r1
     7f4:	cc f3       	brlt	.-14     	; 0x7e8 <oled_clear_line+0x18>
		oled_write_data(0b00000000);
	}
    oled_goto_line(line); //Go back to the 
     7f6:	c8 01       	movw	r24, r16
     7f8:	0e 94 b3 03 	call	0x766	; 0x766 <oled_goto_line>


}
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	1f 91       	pop	r17
     802:	0f 91       	pop	r16
     804:	08 95       	ret

00000806 <oled_reset>:
    oled_write_command(0x20);
	oled_write_command(0b10);

}

void oled_reset(){
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
    for (int i = 0; i < 8; i++) { //For every column write the data to 0 so that the line is cleared
     80a:	c0 e0       	ldi	r28, 0x00	; 0
     80c:	d0 e0       	ldi	r29, 0x00	; 0
     80e:	04 c0       	rjmp	.+8      	; 0x818 <oled_reset+0x12>
		oled_clear_line(i);
     810:	ce 01       	movw	r24, r28
     812:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <oled_clear_line>
	oled_write_command(0b10);

}

void oled_reset(){
    for (int i = 0; i < 8; i++) { //For every column write the data to 0 so that the line is cleared
     816:	21 96       	adiw	r28, 0x01	; 1
     818:	c8 30       	cpi	r28, 0x08	; 8
     81a:	d1 05       	cpc	r29, r1
     81c:	cc f3       	brlt	.-14     	; 0x810 <oled_reset+0xa>
		oled_clear_line(i);
	}
    oled_home();
     81e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <oled_home>

}
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	08 95       	ret

00000828 <oled_print_char>:
    oled_goto_line(row);
    oled_goto_column(column);

}

void oled_print_char(char character){
     828:	1f 93       	push	r17
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
    //This is if the page adressing mode
    character = character - 32; //To make it line up with fonts.h since there are no special characters
     82e:	10 ee       	ldi	r17, 0xE0	; 224
     830:	18 0f       	add	r17, r24
        for (int i = 0; i < 8; i++) {
     832:	c0 e0       	ldi	r28, 0x00	; 0
     834:	d0 e0       	ldi	r29, 0x00	; 0
     836:	10 c0       	rjmp	.+32     	; 0x858 <oled_print_char+0x30>
        char column = pgm_read_byte(&font8[character][i]);
     838:	e1 2f       	mov	r30, r17
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	ee 0f       	add	r30, r30
     83e:	ff 1f       	adc	r31, r31
     840:	ee 0f       	add	r30, r30
     842:	ff 1f       	adc	r31, r31
     844:	ee 0f       	add	r30, r30
     846:	ff 1f       	adc	r31, r31
     848:	ec 0f       	add	r30, r28
     84a:	fd 1f       	adc	r31, r29
     84c:	e0 59       	subi	r30, 0x90	; 144
     84e:	ff 4f       	sbci	r31, 0xFF	; 255
     850:	84 91       	lpm	r24, Z
        oled_write_data(column);
     852:	0e 94 67 03 	call	0x6ce	; 0x6ce <oled_write_data>
}

void oled_print_char(char character){
    //This is if the page adressing mode
    character = character - 32; //To make it line up with fonts.h since there are no special characters
        for (int i = 0; i < 8; i++) {
     856:	21 96       	adiw	r28, 0x01	; 1
     858:	c8 30       	cpi	r28, 0x08	; 8
     85a:	d1 05       	cpc	r29, r1
     85c:	6c f3       	brlt	.-38     	; 0x838 <oled_print_char+0x10>
        char column = pgm_read_byte(&font8[character][i]);
        oled_write_data(column);
  }
}
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	1f 91       	pop	r17
     864:	08 95       	ret

00000866 <spi_init_master>:
void spi_init_slave(){
    //
    // Set MISO output, all others input
	DDR_SPI = (1<<DD_MISO);
	// Enable SPI
	SPCR = (1<<SPE);
     866:	80 ea       	ldi	r24, 0xA0	; 160
     868:	87 bb       	out	0x17, r24	; 23
     86a:	81 e5       	ldi	r24, 0x51	; 81
     86c:	8d b9       	out	0x0d, r24	; 13
     86e:	08 95       	ret

00000870 <spi_write_char>:
}

void spi_write_char(char character){
    SPDR = character;
     870:	8f b9       	out	0x0f, r24	; 15
    //Wait for send to complete
    loop_until_bit_is_set(SPSR, SPIF);
     872:	77 9b       	sbis	0x0e, 7	; 14
     874:	fe cf       	rjmp	.-4      	; 0x872 <spi_write_char+0x2>
}
     876:	08 95       	ret

00000878 <spi_read_char>:

char spi_read_char(){
    SPDR = 0xFF;
     878:	8f ef       	ldi	r24, 0xFF	; 255
     87a:	8f b9       	out	0x0f, r24	; 15
	// Wait for reception to complete
    loop_until_bit_is_set(SPSR, SPIF);
     87c:	77 9b       	sbis	0x0e, 7	; 14
     87e:	fe cf       	rjmp	.-4      	; 0x87c <spi_read_char+0x4>
	// Return char in data register
	return SPDR;
     880:	8f b1       	in	r24, 0x0f	; 15
}
     882:	08 95       	ret

00000884 <XMEM_init>:
	SFIOR |= (1<<XMM2); // Masking P7-P4
}

void XMEM_write(uint8_t data, uint16_t addr){
	volatile char *ext_mem = (char *) BASE_ADDRESS;
	ext_mem[addr]= data;
     884:	85 b7       	in	r24, 0x35	; 53
     886:	80 68       	ori	r24, 0x80	; 128
     888:	85 bf       	out	0x35, r24	; 53
     88a:	80 b7       	in	r24, 0x30	; 48
     88c:	80 62       	ori	r24, 0x20	; 32
     88e:	80 bf       	out	0x30, r24	; 48
     890:	08 95       	ret

00000892 <XMEM_read>:
}

uint8_t XMEM_read(uint16_t addr){
	volatile char *ext_mem = (char *) BASE_ADDRESS;
	uint8_t ret_val = ext_mem[addr];
     892:	90 5f       	subi	r25, 0xF0	; 240
     894:	fc 01       	movw	r30, r24
     896:	80 81       	ld	r24, Z
	return ret_val;
}
     898:	08 95       	ret

0000089a <USART_Transmit>:
#include "UARTdrv.h"

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
     89a:	5d 9b       	sbis	0x0b, 5	; 11
     89c:	fe cf       	rjmp	.-4      	; 0x89a <USART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     89e:	8c b9       	out	0x0c, r24	; 12
     8a0:	08 95       	ret

000008a2 <USART_Receive>:
}
unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
     8a2:	5f 9b       	sbis	0x0b, 7	; 11
     8a4:	fe cf       	rjmp	.-4      	; 0x8a2 <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR0;
     8a6:	8c b1       	in	r24, 0x0c	; 12
}
     8a8:	08 95       	ret

000008aa <USART_Init>:
void USART_Init( unsigned int ubrr )
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     8aa:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     8ac:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     8ae:	88 e1       	ldi	r24, 0x18	; 24
     8b0:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     8b2:	8e e8       	ldi	r24, 0x8E	; 142
     8b4:	80 bd       	out	0x20, r24	; 32
	fdevopen(USART_Transmit,USART_Receive);
     8b6:	61 e5       	ldi	r22, 0x51	; 81
     8b8:	74 e0       	ldi	r23, 0x04	; 4
     8ba:	8d e4       	ldi	r24, 0x4D	; 77
     8bc:	94 e0       	ldi	r25, 0x04	; 4
     8be:	0e 94 8a 04 	call	0x914	; 0x914 <fdevopen>
     8c2:	08 95       	ret

000008c4 <__divmodhi4>:
     8c4:	97 fb       	bst	r25, 7
     8c6:	07 2e       	mov	r0, r23
     8c8:	16 f4       	brtc	.+4      	; 0x8ce <__divmodhi4+0xa>
     8ca:	00 94       	com	r0
     8cc:	07 d0       	rcall	.+14     	; 0x8dc <__divmodhi4_neg1>
     8ce:	77 fd       	sbrc	r23, 7
     8d0:	09 d0       	rcall	.+18     	; 0x8e4 <__divmodhi4_neg2>
     8d2:	0e 94 76 04 	call	0x8ec	; 0x8ec <__udivmodhi4>
     8d6:	07 fc       	sbrc	r0, 7
     8d8:	05 d0       	rcall	.+10     	; 0x8e4 <__divmodhi4_neg2>
     8da:	3e f4       	brtc	.+14     	; 0x8ea <__divmodhi4_exit>

000008dc <__divmodhi4_neg1>:
     8dc:	90 95       	com	r25
     8de:	81 95       	neg	r24
     8e0:	9f 4f       	sbci	r25, 0xFF	; 255
     8e2:	08 95       	ret

000008e4 <__divmodhi4_neg2>:
     8e4:	70 95       	com	r23
     8e6:	61 95       	neg	r22
     8e8:	7f 4f       	sbci	r23, 0xFF	; 255

000008ea <__divmodhi4_exit>:
     8ea:	08 95       	ret

000008ec <__udivmodhi4>:
     8ec:	aa 1b       	sub	r26, r26
     8ee:	bb 1b       	sub	r27, r27
     8f0:	51 e1       	ldi	r21, 0x11	; 17
     8f2:	07 c0       	rjmp	.+14     	; 0x902 <__udivmodhi4_ep>

000008f4 <__udivmodhi4_loop>:
     8f4:	aa 1f       	adc	r26, r26
     8f6:	bb 1f       	adc	r27, r27
     8f8:	a6 17       	cp	r26, r22
     8fa:	b7 07       	cpc	r27, r23
     8fc:	10 f0       	brcs	.+4      	; 0x902 <__udivmodhi4_ep>
     8fe:	a6 1b       	sub	r26, r22
     900:	b7 0b       	sbc	r27, r23

00000902 <__udivmodhi4_ep>:
     902:	88 1f       	adc	r24, r24
     904:	99 1f       	adc	r25, r25
     906:	5a 95       	dec	r21
     908:	a9 f7       	brne	.-22     	; 0x8f4 <__udivmodhi4_loop>
     90a:	80 95       	com	r24
     90c:	90 95       	com	r25
     90e:	bc 01       	movw	r22, r24
     910:	cd 01       	movw	r24, r26
     912:	08 95       	ret

00000914 <fdevopen>:
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	00 97       	sbiw	r24, 0x00	; 0
     91e:	31 f4       	brne	.+12     	; 0x92c <fdevopen+0x18>
     920:	61 15       	cp	r22, r1
     922:	71 05       	cpc	r23, r1
     924:	19 f4       	brne	.+6      	; 0x92c <fdevopen+0x18>
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	3a c0       	rjmp	.+116    	; 0x9a0 <fdevopen+0x8c>
     92c:	8b 01       	movw	r16, r22
     92e:	ec 01       	movw	r28, r24
     930:	6e e0       	ldi	r22, 0x0E	; 14
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <calloc>
     93c:	fc 01       	movw	r30, r24
     93e:	89 2b       	or	r24, r25
     940:	91 f3       	breq	.-28     	; 0x926 <fdevopen+0x12>
     942:	80 e8       	ldi	r24, 0x80	; 128
     944:	83 83       	std	Z+3, r24	; 0x03
     946:	01 15       	cp	r16, r1
     948:	11 05       	cpc	r17, r1
     94a:	71 f0       	breq	.+28     	; 0x968 <fdevopen+0x54>
     94c:	13 87       	std	Z+11, r17	; 0x0b
     94e:	02 87       	std	Z+10, r16	; 0x0a
     950:	81 e8       	ldi	r24, 0x81	; 129
     952:	83 83       	std	Z+3, r24	; 0x03
     954:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <__iob>
     958:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <__iob+0x1>
     95c:	89 2b       	or	r24, r25
     95e:	21 f4       	brne	.+8      	; 0x968 <fdevopen+0x54>
     960:	f0 93 90 01 	sts	0x0190, r31	; 0x800190 <__iob+0x1>
     964:	e0 93 8f 01 	sts	0x018F, r30	; 0x80018f <__iob>
     968:	20 97       	sbiw	r28, 0x00	; 0
     96a:	c9 f0       	breq	.+50     	; 0x99e <fdevopen+0x8a>
     96c:	d1 87       	std	Z+9, r29	; 0x09
     96e:	c0 87       	std	Z+8, r28	; 0x08
     970:	83 81       	ldd	r24, Z+3	; 0x03
     972:	82 60       	ori	r24, 0x02	; 2
     974:	83 83       	std	Z+3, r24	; 0x03
     976:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <__iob+0x2>
     97a:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <__iob+0x3>
     97e:	89 2b       	or	r24, r25
     980:	71 f4       	brne	.+28     	; 0x99e <fdevopen+0x8a>
     982:	f0 93 92 01 	sts	0x0192, r31	; 0x800192 <__iob+0x3>
     986:	e0 93 91 01 	sts	0x0191, r30	; 0x800191 <__iob+0x2>
     98a:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <__iob+0x4>
     98e:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <__iob+0x5>
     992:	89 2b       	or	r24, r25
     994:	21 f4       	brne	.+8      	; 0x99e <fdevopen+0x8a>
     996:	f0 93 94 01 	sts	0x0194, r31	; 0x800194 <__iob+0x5>
     99a:	e0 93 93 01 	sts	0x0193, r30	; 0x800193 <__iob+0x4>
     99e:	cf 01       	movw	r24, r30
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	1f 91       	pop	r17
     9a6:	0f 91       	pop	r16
     9a8:	08 95       	ret

000009aa <printf>:
     9aa:	a0 e0       	ldi	r26, 0x00	; 0
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	eb ed       	ldi	r30, 0xDB	; 219
     9b0:	f4 e0       	ldi	r31, 0x04	; 4
     9b2:	0c 94 00 09 	jmp	0x1200	; 0x1200 <__prologue_saves__+0x20>
     9b6:	ae 01       	movw	r20, r28
     9b8:	4b 5f       	subi	r20, 0xFB	; 251
     9ba:	5f 4f       	sbci	r21, 0xFF	; 255
     9bc:	fa 01       	movw	r30, r20
     9be:	61 91       	ld	r22, Z+
     9c0:	71 91       	ld	r23, Z+
     9c2:	af 01       	movw	r20, r30
     9c4:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <__iob+0x2>
     9c8:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <__iob+0x3>
     9cc:	0e 94 1b 05 	call	0xa36	; 0xa36 <vfprintf>
     9d0:	e2 e0       	ldi	r30, 0x02	; 2
     9d2:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__epilogue_restores__+0x20>

000009d6 <puts>:
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	e0 91 91 01 	lds	r30, 0x0191	; 0x800191 <__iob+0x2>
     9e2:	f0 91 92 01 	lds	r31, 0x0192	; 0x800192 <__iob+0x3>
     9e6:	23 81       	ldd	r18, Z+3	; 0x03
     9e8:	21 ff       	sbrs	r18, 1
     9ea:	1b c0       	rjmp	.+54     	; 0xa22 <puts+0x4c>
     9ec:	8c 01       	movw	r16, r24
     9ee:	d0 e0       	ldi	r29, 0x00	; 0
     9f0:	c0 e0       	ldi	r28, 0x00	; 0
     9f2:	f8 01       	movw	r30, r16
     9f4:	81 91       	ld	r24, Z+
     9f6:	8f 01       	movw	r16, r30
     9f8:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <__iob+0x2>
     9fc:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <__iob+0x3>
     a00:	db 01       	movw	r26, r22
     a02:	18 96       	adiw	r26, 0x08	; 8
     a04:	ed 91       	ld	r30, X+
     a06:	fc 91       	ld	r31, X
     a08:	19 97       	sbiw	r26, 0x09	; 9
     a0a:	88 23       	and	r24, r24
     a0c:	31 f0       	breq	.+12     	; 0xa1a <puts+0x44>
     a0e:	09 95       	icall
     a10:	89 2b       	or	r24, r25
     a12:	79 f3       	breq	.-34     	; 0x9f2 <puts+0x1c>
     a14:	df ef       	ldi	r29, 0xFF	; 255
     a16:	cf ef       	ldi	r28, 0xFF	; 255
     a18:	ec cf       	rjmp	.-40     	; 0x9f2 <puts+0x1c>
     a1a:	8a e0       	ldi	r24, 0x0A	; 10
     a1c:	09 95       	icall
     a1e:	89 2b       	or	r24, r25
     a20:	19 f0       	breq	.+6      	; 0xa28 <puts+0x52>
     a22:	8f ef       	ldi	r24, 0xFF	; 255
     a24:	9f ef       	ldi	r25, 0xFF	; 255
     a26:	02 c0       	rjmp	.+4      	; 0xa2c <puts+0x56>
     a28:	8d 2f       	mov	r24, r29
     a2a:	9c 2f       	mov	r25, r28
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	1f 91       	pop	r17
     a32:	0f 91       	pop	r16
     a34:	08 95       	ret

00000a36 <vfprintf>:
     a36:	ab e0       	ldi	r26, 0x0B	; 11
     a38:	b0 e0       	ldi	r27, 0x00	; 0
     a3a:	e1 e2       	ldi	r30, 0x21	; 33
     a3c:	f5 e0       	ldi	r31, 0x05	; 5
     a3e:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__prologue_saves__>
     a42:	6c 01       	movw	r12, r24
     a44:	7b 01       	movw	r14, r22
     a46:	8a 01       	movw	r16, r20
     a48:	fc 01       	movw	r30, r24
     a4a:	17 82       	std	Z+7, r1	; 0x07
     a4c:	16 82       	std	Z+6, r1	; 0x06
     a4e:	83 81       	ldd	r24, Z+3	; 0x03
     a50:	81 ff       	sbrs	r24, 1
     a52:	cc c1       	rjmp	.+920    	; 0xdec <vfprintf+0x3b6>
     a54:	ce 01       	movw	r24, r28
     a56:	01 96       	adiw	r24, 0x01	; 1
     a58:	3c 01       	movw	r6, r24
     a5a:	f6 01       	movw	r30, r12
     a5c:	93 81       	ldd	r25, Z+3	; 0x03
     a5e:	f7 01       	movw	r30, r14
     a60:	93 fd       	sbrc	r25, 3
     a62:	85 91       	lpm	r24, Z+
     a64:	93 ff       	sbrs	r25, 3
     a66:	81 91       	ld	r24, Z+
     a68:	7f 01       	movw	r14, r30
     a6a:	88 23       	and	r24, r24
     a6c:	09 f4       	brne	.+2      	; 0xa70 <vfprintf+0x3a>
     a6e:	ba c1       	rjmp	.+884    	; 0xde4 <vfprintf+0x3ae>
     a70:	85 32       	cpi	r24, 0x25	; 37
     a72:	39 f4       	brne	.+14     	; 0xa82 <vfprintf+0x4c>
     a74:	93 fd       	sbrc	r25, 3
     a76:	85 91       	lpm	r24, Z+
     a78:	93 ff       	sbrs	r25, 3
     a7a:	81 91       	ld	r24, Z+
     a7c:	7f 01       	movw	r14, r30
     a7e:	85 32       	cpi	r24, 0x25	; 37
     a80:	29 f4       	brne	.+10     	; 0xa8c <vfprintf+0x56>
     a82:	b6 01       	movw	r22, r12
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	0e 94 56 08 	call	0x10ac	; 0x10ac <fputc>
     a8a:	e7 cf       	rjmp	.-50     	; 0xa5a <vfprintf+0x24>
     a8c:	91 2c       	mov	r9, r1
     a8e:	21 2c       	mov	r2, r1
     a90:	31 2c       	mov	r3, r1
     a92:	ff e1       	ldi	r31, 0x1F	; 31
     a94:	f3 15       	cp	r31, r3
     a96:	d8 f0       	brcs	.+54     	; 0xace <vfprintf+0x98>
     a98:	8b 32       	cpi	r24, 0x2B	; 43
     a9a:	79 f0       	breq	.+30     	; 0xaba <vfprintf+0x84>
     a9c:	38 f4       	brcc	.+14     	; 0xaac <vfprintf+0x76>
     a9e:	80 32       	cpi	r24, 0x20	; 32
     aa0:	79 f0       	breq	.+30     	; 0xac0 <vfprintf+0x8a>
     aa2:	83 32       	cpi	r24, 0x23	; 35
     aa4:	a1 f4       	brne	.+40     	; 0xace <vfprintf+0x98>
     aa6:	23 2d       	mov	r18, r3
     aa8:	20 61       	ori	r18, 0x10	; 16
     aaa:	1d c0       	rjmp	.+58     	; 0xae6 <vfprintf+0xb0>
     aac:	8d 32       	cpi	r24, 0x2D	; 45
     aae:	61 f0       	breq	.+24     	; 0xac8 <vfprintf+0x92>
     ab0:	80 33       	cpi	r24, 0x30	; 48
     ab2:	69 f4       	brne	.+26     	; 0xace <vfprintf+0x98>
     ab4:	23 2d       	mov	r18, r3
     ab6:	21 60       	ori	r18, 0x01	; 1
     ab8:	16 c0       	rjmp	.+44     	; 0xae6 <vfprintf+0xb0>
     aba:	83 2d       	mov	r24, r3
     abc:	82 60       	ori	r24, 0x02	; 2
     abe:	38 2e       	mov	r3, r24
     ac0:	e3 2d       	mov	r30, r3
     ac2:	e4 60       	ori	r30, 0x04	; 4
     ac4:	3e 2e       	mov	r3, r30
     ac6:	2a c0       	rjmp	.+84     	; 0xb1c <vfprintf+0xe6>
     ac8:	f3 2d       	mov	r31, r3
     aca:	f8 60       	ori	r31, 0x08	; 8
     acc:	1d c0       	rjmp	.+58     	; 0xb08 <vfprintf+0xd2>
     ace:	37 fc       	sbrc	r3, 7
     ad0:	2d c0       	rjmp	.+90     	; 0xb2c <vfprintf+0xf6>
     ad2:	20 ed       	ldi	r18, 0xD0	; 208
     ad4:	28 0f       	add	r18, r24
     ad6:	2a 30       	cpi	r18, 0x0A	; 10
     ad8:	40 f0       	brcs	.+16     	; 0xaea <vfprintf+0xb4>
     ada:	8e 32       	cpi	r24, 0x2E	; 46
     adc:	b9 f4       	brne	.+46     	; 0xb0c <vfprintf+0xd6>
     ade:	36 fc       	sbrc	r3, 6
     ae0:	81 c1       	rjmp	.+770    	; 0xde4 <vfprintf+0x3ae>
     ae2:	23 2d       	mov	r18, r3
     ae4:	20 64       	ori	r18, 0x40	; 64
     ae6:	32 2e       	mov	r3, r18
     ae8:	19 c0       	rjmp	.+50     	; 0xb1c <vfprintf+0xe6>
     aea:	36 fe       	sbrs	r3, 6
     aec:	06 c0       	rjmp	.+12     	; 0xafa <vfprintf+0xc4>
     aee:	8a e0       	ldi	r24, 0x0A	; 10
     af0:	98 9e       	mul	r9, r24
     af2:	20 0d       	add	r18, r0
     af4:	11 24       	eor	r1, r1
     af6:	92 2e       	mov	r9, r18
     af8:	11 c0       	rjmp	.+34     	; 0xb1c <vfprintf+0xe6>
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	2e 9e       	mul	r2, r30
     afe:	20 0d       	add	r18, r0
     b00:	11 24       	eor	r1, r1
     b02:	22 2e       	mov	r2, r18
     b04:	f3 2d       	mov	r31, r3
     b06:	f0 62       	ori	r31, 0x20	; 32
     b08:	3f 2e       	mov	r3, r31
     b0a:	08 c0       	rjmp	.+16     	; 0xb1c <vfprintf+0xe6>
     b0c:	8c 36       	cpi	r24, 0x6C	; 108
     b0e:	21 f4       	brne	.+8      	; 0xb18 <vfprintf+0xe2>
     b10:	83 2d       	mov	r24, r3
     b12:	80 68       	ori	r24, 0x80	; 128
     b14:	38 2e       	mov	r3, r24
     b16:	02 c0       	rjmp	.+4      	; 0xb1c <vfprintf+0xe6>
     b18:	88 36       	cpi	r24, 0x68	; 104
     b1a:	41 f4       	brne	.+16     	; 0xb2c <vfprintf+0xf6>
     b1c:	f7 01       	movw	r30, r14
     b1e:	93 fd       	sbrc	r25, 3
     b20:	85 91       	lpm	r24, Z+
     b22:	93 ff       	sbrs	r25, 3
     b24:	81 91       	ld	r24, Z+
     b26:	7f 01       	movw	r14, r30
     b28:	81 11       	cpse	r24, r1
     b2a:	b3 cf       	rjmp	.-154    	; 0xa92 <vfprintf+0x5c>
     b2c:	98 2f       	mov	r25, r24
     b2e:	9f 7d       	andi	r25, 0xDF	; 223
     b30:	95 54       	subi	r25, 0x45	; 69
     b32:	93 30       	cpi	r25, 0x03	; 3
     b34:	28 f4       	brcc	.+10     	; 0xb40 <vfprintf+0x10a>
     b36:	0c 5f       	subi	r16, 0xFC	; 252
     b38:	1f 4f       	sbci	r17, 0xFF	; 255
     b3a:	9f e3       	ldi	r25, 0x3F	; 63
     b3c:	99 83       	std	Y+1, r25	; 0x01
     b3e:	0d c0       	rjmp	.+26     	; 0xb5a <vfprintf+0x124>
     b40:	83 36       	cpi	r24, 0x63	; 99
     b42:	31 f0       	breq	.+12     	; 0xb50 <vfprintf+0x11a>
     b44:	83 37       	cpi	r24, 0x73	; 115
     b46:	71 f0       	breq	.+28     	; 0xb64 <vfprintf+0x12e>
     b48:	83 35       	cpi	r24, 0x53	; 83
     b4a:	09 f0       	breq	.+2      	; 0xb4e <vfprintf+0x118>
     b4c:	59 c0       	rjmp	.+178    	; 0xc00 <vfprintf+0x1ca>
     b4e:	21 c0       	rjmp	.+66     	; 0xb92 <vfprintf+0x15c>
     b50:	f8 01       	movw	r30, r16
     b52:	80 81       	ld	r24, Z
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	0e 5f       	subi	r16, 0xFE	; 254
     b58:	1f 4f       	sbci	r17, 0xFF	; 255
     b5a:	88 24       	eor	r8, r8
     b5c:	83 94       	inc	r8
     b5e:	91 2c       	mov	r9, r1
     b60:	53 01       	movw	r10, r6
     b62:	13 c0       	rjmp	.+38     	; 0xb8a <vfprintf+0x154>
     b64:	28 01       	movw	r4, r16
     b66:	f2 e0       	ldi	r31, 0x02	; 2
     b68:	4f 0e       	add	r4, r31
     b6a:	51 1c       	adc	r5, r1
     b6c:	f8 01       	movw	r30, r16
     b6e:	a0 80       	ld	r10, Z
     b70:	b1 80       	ldd	r11, Z+1	; 0x01
     b72:	36 fe       	sbrs	r3, 6
     b74:	03 c0       	rjmp	.+6      	; 0xb7c <vfprintf+0x146>
     b76:	69 2d       	mov	r22, r9
     b78:	70 e0       	ldi	r23, 0x00	; 0
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <vfprintf+0x14a>
     b7c:	6f ef       	ldi	r22, 0xFF	; 255
     b7e:	7f ef       	ldi	r23, 0xFF	; 255
     b80:	c5 01       	movw	r24, r10
     b82:	0e 94 4b 08 	call	0x1096	; 0x1096 <strnlen>
     b86:	4c 01       	movw	r8, r24
     b88:	82 01       	movw	r16, r4
     b8a:	f3 2d       	mov	r31, r3
     b8c:	ff 77       	andi	r31, 0x7F	; 127
     b8e:	3f 2e       	mov	r3, r31
     b90:	16 c0       	rjmp	.+44     	; 0xbbe <vfprintf+0x188>
     b92:	28 01       	movw	r4, r16
     b94:	22 e0       	ldi	r18, 0x02	; 2
     b96:	42 0e       	add	r4, r18
     b98:	51 1c       	adc	r5, r1
     b9a:	f8 01       	movw	r30, r16
     b9c:	a0 80       	ld	r10, Z
     b9e:	b1 80       	ldd	r11, Z+1	; 0x01
     ba0:	36 fe       	sbrs	r3, 6
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <vfprintf+0x174>
     ba4:	69 2d       	mov	r22, r9
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	02 c0       	rjmp	.+4      	; 0xbae <vfprintf+0x178>
     baa:	6f ef       	ldi	r22, 0xFF	; 255
     bac:	7f ef       	ldi	r23, 0xFF	; 255
     bae:	c5 01       	movw	r24, r10
     bb0:	0e 94 39 08 	call	0x1072	; 0x1072 <strnlen_P>
     bb4:	4c 01       	movw	r8, r24
     bb6:	f3 2d       	mov	r31, r3
     bb8:	f0 68       	ori	r31, 0x80	; 128
     bba:	3f 2e       	mov	r3, r31
     bbc:	82 01       	movw	r16, r4
     bbe:	33 fc       	sbrc	r3, 3
     bc0:	1b c0       	rjmp	.+54     	; 0xbf8 <vfprintf+0x1c2>
     bc2:	82 2d       	mov	r24, r2
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	88 16       	cp	r8, r24
     bc8:	99 06       	cpc	r9, r25
     bca:	b0 f4       	brcc	.+44     	; 0xbf8 <vfprintf+0x1c2>
     bcc:	b6 01       	movw	r22, r12
     bce:	80 e2       	ldi	r24, 0x20	; 32
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	0e 94 56 08 	call	0x10ac	; 0x10ac <fputc>
     bd6:	2a 94       	dec	r2
     bd8:	f4 cf       	rjmp	.-24     	; 0xbc2 <vfprintf+0x18c>
     bda:	f5 01       	movw	r30, r10
     bdc:	37 fc       	sbrc	r3, 7
     bde:	85 91       	lpm	r24, Z+
     be0:	37 fe       	sbrs	r3, 7
     be2:	81 91       	ld	r24, Z+
     be4:	5f 01       	movw	r10, r30
     be6:	b6 01       	movw	r22, r12
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	0e 94 56 08 	call	0x10ac	; 0x10ac <fputc>
     bee:	21 10       	cpse	r2, r1
     bf0:	2a 94       	dec	r2
     bf2:	21 e0       	ldi	r18, 0x01	; 1
     bf4:	82 1a       	sub	r8, r18
     bf6:	91 08       	sbc	r9, r1
     bf8:	81 14       	cp	r8, r1
     bfa:	91 04       	cpc	r9, r1
     bfc:	71 f7       	brne	.-36     	; 0xbda <vfprintf+0x1a4>
     bfe:	e8 c0       	rjmp	.+464    	; 0xdd0 <vfprintf+0x39a>
     c00:	84 36       	cpi	r24, 0x64	; 100
     c02:	11 f0       	breq	.+4      	; 0xc08 <vfprintf+0x1d2>
     c04:	89 36       	cpi	r24, 0x69	; 105
     c06:	41 f5       	brne	.+80     	; 0xc58 <vfprintf+0x222>
     c08:	f8 01       	movw	r30, r16
     c0a:	37 fe       	sbrs	r3, 7
     c0c:	07 c0       	rjmp	.+14     	; 0xc1c <vfprintf+0x1e6>
     c0e:	60 81       	ld	r22, Z
     c10:	71 81       	ldd	r23, Z+1	; 0x01
     c12:	82 81       	ldd	r24, Z+2	; 0x02
     c14:	93 81       	ldd	r25, Z+3	; 0x03
     c16:	0c 5f       	subi	r16, 0xFC	; 252
     c18:	1f 4f       	sbci	r17, 0xFF	; 255
     c1a:	08 c0       	rjmp	.+16     	; 0xc2c <vfprintf+0x1f6>
     c1c:	60 81       	ld	r22, Z
     c1e:	71 81       	ldd	r23, Z+1	; 0x01
     c20:	07 2e       	mov	r0, r23
     c22:	00 0c       	add	r0, r0
     c24:	88 0b       	sbc	r24, r24
     c26:	99 0b       	sbc	r25, r25
     c28:	0e 5f       	subi	r16, 0xFE	; 254
     c2a:	1f 4f       	sbci	r17, 0xFF	; 255
     c2c:	f3 2d       	mov	r31, r3
     c2e:	ff 76       	andi	r31, 0x6F	; 111
     c30:	3f 2e       	mov	r3, r31
     c32:	97 ff       	sbrs	r25, 7
     c34:	09 c0       	rjmp	.+18     	; 0xc48 <vfprintf+0x212>
     c36:	90 95       	com	r25
     c38:	80 95       	com	r24
     c3a:	70 95       	com	r23
     c3c:	61 95       	neg	r22
     c3e:	7f 4f       	sbci	r23, 0xFF	; 255
     c40:	8f 4f       	sbci	r24, 0xFF	; 255
     c42:	9f 4f       	sbci	r25, 0xFF	; 255
     c44:	f0 68       	ori	r31, 0x80	; 128
     c46:	3f 2e       	mov	r3, r31
     c48:	2a e0       	ldi	r18, 0x0A	; 10
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	a3 01       	movw	r20, r6
     c4e:	0e 94 92 08 	call	0x1124	; 0x1124 <__ultoa_invert>
     c52:	88 2e       	mov	r8, r24
     c54:	86 18       	sub	r8, r6
     c56:	45 c0       	rjmp	.+138    	; 0xce2 <vfprintf+0x2ac>
     c58:	85 37       	cpi	r24, 0x75	; 117
     c5a:	31 f4       	brne	.+12     	; 0xc68 <vfprintf+0x232>
     c5c:	23 2d       	mov	r18, r3
     c5e:	2f 7e       	andi	r18, 0xEF	; 239
     c60:	b2 2e       	mov	r11, r18
     c62:	2a e0       	ldi	r18, 0x0A	; 10
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	25 c0       	rjmp	.+74     	; 0xcb2 <vfprintf+0x27c>
     c68:	93 2d       	mov	r25, r3
     c6a:	99 7f       	andi	r25, 0xF9	; 249
     c6c:	b9 2e       	mov	r11, r25
     c6e:	8f 36       	cpi	r24, 0x6F	; 111
     c70:	c1 f0       	breq	.+48     	; 0xca2 <vfprintf+0x26c>
     c72:	18 f4       	brcc	.+6      	; 0xc7a <vfprintf+0x244>
     c74:	88 35       	cpi	r24, 0x58	; 88
     c76:	79 f0       	breq	.+30     	; 0xc96 <vfprintf+0x260>
     c78:	b5 c0       	rjmp	.+362    	; 0xde4 <vfprintf+0x3ae>
     c7a:	80 37       	cpi	r24, 0x70	; 112
     c7c:	19 f0       	breq	.+6      	; 0xc84 <vfprintf+0x24e>
     c7e:	88 37       	cpi	r24, 0x78	; 120
     c80:	21 f0       	breq	.+8      	; 0xc8a <vfprintf+0x254>
     c82:	b0 c0       	rjmp	.+352    	; 0xde4 <vfprintf+0x3ae>
     c84:	e9 2f       	mov	r30, r25
     c86:	e0 61       	ori	r30, 0x10	; 16
     c88:	be 2e       	mov	r11, r30
     c8a:	b4 fe       	sbrs	r11, 4
     c8c:	0d c0       	rjmp	.+26     	; 0xca8 <vfprintf+0x272>
     c8e:	fb 2d       	mov	r31, r11
     c90:	f4 60       	ori	r31, 0x04	; 4
     c92:	bf 2e       	mov	r11, r31
     c94:	09 c0       	rjmp	.+18     	; 0xca8 <vfprintf+0x272>
     c96:	34 fe       	sbrs	r3, 4
     c98:	0a c0       	rjmp	.+20     	; 0xcae <vfprintf+0x278>
     c9a:	29 2f       	mov	r18, r25
     c9c:	26 60       	ori	r18, 0x06	; 6
     c9e:	b2 2e       	mov	r11, r18
     ca0:	06 c0       	rjmp	.+12     	; 0xcae <vfprintf+0x278>
     ca2:	28 e0       	ldi	r18, 0x08	; 8
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	05 c0       	rjmp	.+10     	; 0xcb2 <vfprintf+0x27c>
     ca8:	20 e1       	ldi	r18, 0x10	; 16
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	02 c0       	rjmp	.+4      	; 0xcb2 <vfprintf+0x27c>
     cae:	20 e1       	ldi	r18, 0x10	; 16
     cb0:	32 e0       	ldi	r19, 0x02	; 2
     cb2:	f8 01       	movw	r30, r16
     cb4:	b7 fe       	sbrs	r11, 7
     cb6:	07 c0       	rjmp	.+14     	; 0xcc6 <vfprintf+0x290>
     cb8:	60 81       	ld	r22, Z
     cba:	71 81       	ldd	r23, Z+1	; 0x01
     cbc:	82 81       	ldd	r24, Z+2	; 0x02
     cbe:	93 81       	ldd	r25, Z+3	; 0x03
     cc0:	0c 5f       	subi	r16, 0xFC	; 252
     cc2:	1f 4f       	sbci	r17, 0xFF	; 255
     cc4:	06 c0       	rjmp	.+12     	; 0xcd2 <vfprintf+0x29c>
     cc6:	60 81       	ld	r22, Z
     cc8:	71 81       	ldd	r23, Z+1	; 0x01
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	0e 5f       	subi	r16, 0xFE	; 254
     cd0:	1f 4f       	sbci	r17, 0xFF	; 255
     cd2:	a3 01       	movw	r20, r6
     cd4:	0e 94 92 08 	call	0x1124	; 0x1124 <__ultoa_invert>
     cd8:	88 2e       	mov	r8, r24
     cda:	86 18       	sub	r8, r6
     cdc:	fb 2d       	mov	r31, r11
     cde:	ff 77       	andi	r31, 0x7F	; 127
     ce0:	3f 2e       	mov	r3, r31
     ce2:	36 fe       	sbrs	r3, 6
     ce4:	0d c0       	rjmp	.+26     	; 0xd00 <vfprintf+0x2ca>
     ce6:	23 2d       	mov	r18, r3
     ce8:	2e 7f       	andi	r18, 0xFE	; 254
     cea:	a2 2e       	mov	r10, r18
     cec:	89 14       	cp	r8, r9
     cee:	58 f4       	brcc	.+22     	; 0xd06 <vfprintf+0x2d0>
     cf0:	34 fe       	sbrs	r3, 4
     cf2:	0b c0       	rjmp	.+22     	; 0xd0a <vfprintf+0x2d4>
     cf4:	32 fc       	sbrc	r3, 2
     cf6:	09 c0       	rjmp	.+18     	; 0xd0a <vfprintf+0x2d4>
     cf8:	83 2d       	mov	r24, r3
     cfa:	8e 7e       	andi	r24, 0xEE	; 238
     cfc:	a8 2e       	mov	r10, r24
     cfe:	05 c0       	rjmp	.+10     	; 0xd0a <vfprintf+0x2d4>
     d00:	b8 2c       	mov	r11, r8
     d02:	a3 2c       	mov	r10, r3
     d04:	03 c0       	rjmp	.+6      	; 0xd0c <vfprintf+0x2d6>
     d06:	b8 2c       	mov	r11, r8
     d08:	01 c0       	rjmp	.+2      	; 0xd0c <vfprintf+0x2d6>
     d0a:	b9 2c       	mov	r11, r9
     d0c:	a4 fe       	sbrs	r10, 4
     d0e:	0f c0       	rjmp	.+30     	; 0xd2e <vfprintf+0x2f8>
     d10:	fe 01       	movw	r30, r28
     d12:	e8 0d       	add	r30, r8
     d14:	f1 1d       	adc	r31, r1
     d16:	80 81       	ld	r24, Z
     d18:	80 33       	cpi	r24, 0x30	; 48
     d1a:	21 f4       	brne	.+8      	; 0xd24 <vfprintf+0x2ee>
     d1c:	9a 2d       	mov	r25, r10
     d1e:	99 7e       	andi	r25, 0xE9	; 233
     d20:	a9 2e       	mov	r10, r25
     d22:	09 c0       	rjmp	.+18     	; 0xd36 <vfprintf+0x300>
     d24:	a2 fe       	sbrs	r10, 2
     d26:	06 c0       	rjmp	.+12     	; 0xd34 <vfprintf+0x2fe>
     d28:	b3 94       	inc	r11
     d2a:	b3 94       	inc	r11
     d2c:	04 c0       	rjmp	.+8      	; 0xd36 <vfprintf+0x300>
     d2e:	8a 2d       	mov	r24, r10
     d30:	86 78       	andi	r24, 0x86	; 134
     d32:	09 f0       	breq	.+2      	; 0xd36 <vfprintf+0x300>
     d34:	b3 94       	inc	r11
     d36:	a3 fc       	sbrc	r10, 3
     d38:	11 c0       	rjmp	.+34     	; 0xd5c <vfprintf+0x326>
     d3a:	a0 fe       	sbrs	r10, 0
     d3c:	06 c0       	rjmp	.+12     	; 0xd4a <vfprintf+0x314>
     d3e:	b2 14       	cp	r11, r2
     d40:	88 f4       	brcc	.+34     	; 0xd64 <vfprintf+0x32e>
     d42:	28 0c       	add	r2, r8
     d44:	92 2c       	mov	r9, r2
     d46:	9b 18       	sub	r9, r11
     d48:	0e c0       	rjmp	.+28     	; 0xd66 <vfprintf+0x330>
     d4a:	b2 14       	cp	r11, r2
     d4c:	60 f4       	brcc	.+24     	; 0xd66 <vfprintf+0x330>
     d4e:	b6 01       	movw	r22, r12
     d50:	80 e2       	ldi	r24, 0x20	; 32
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	0e 94 56 08 	call	0x10ac	; 0x10ac <fputc>
     d58:	b3 94       	inc	r11
     d5a:	f7 cf       	rjmp	.-18     	; 0xd4a <vfprintf+0x314>
     d5c:	b2 14       	cp	r11, r2
     d5e:	18 f4       	brcc	.+6      	; 0xd66 <vfprintf+0x330>
     d60:	2b 18       	sub	r2, r11
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <vfprintf+0x332>
     d64:	98 2c       	mov	r9, r8
     d66:	21 2c       	mov	r2, r1
     d68:	a4 fe       	sbrs	r10, 4
     d6a:	10 c0       	rjmp	.+32     	; 0xd8c <vfprintf+0x356>
     d6c:	b6 01       	movw	r22, r12
     d6e:	80 e3       	ldi	r24, 0x30	; 48
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	0e 94 56 08 	call	0x10ac	; 0x10ac <fputc>
     d76:	a2 fe       	sbrs	r10, 2
     d78:	17 c0       	rjmp	.+46     	; 0xda8 <vfprintf+0x372>
     d7a:	a1 fc       	sbrc	r10, 1
     d7c:	03 c0       	rjmp	.+6      	; 0xd84 <vfprintf+0x34e>
     d7e:	88 e7       	ldi	r24, 0x78	; 120
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <vfprintf+0x352>
     d84:	88 e5       	ldi	r24, 0x58	; 88
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	b6 01       	movw	r22, r12
     d8a:	0c c0       	rjmp	.+24     	; 0xda4 <vfprintf+0x36e>
     d8c:	8a 2d       	mov	r24, r10
     d8e:	86 78       	andi	r24, 0x86	; 134
     d90:	59 f0       	breq	.+22     	; 0xda8 <vfprintf+0x372>
     d92:	a1 fe       	sbrs	r10, 1
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <vfprintf+0x364>
     d96:	8b e2       	ldi	r24, 0x2B	; 43
     d98:	01 c0       	rjmp	.+2      	; 0xd9c <vfprintf+0x366>
     d9a:	80 e2       	ldi	r24, 0x20	; 32
     d9c:	a7 fc       	sbrc	r10, 7
     d9e:	8d e2       	ldi	r24, 0x2D	; 45
     da0:	b6 01       	movw	r22, r12
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	0e 94 56 08 	call	0x10ac	; 0x10ac <fputc>
     da8:	89 14       	cp	r8, r9
     daa:	38 f4       	brcc	.+14     	; 0xdba <vfprintf+0x384>
     dac:	b6 01       	movw	r22, r12
     dae:	80 e3       	ldi	r24, 0x30	; 48
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 56 08 	call	0x10ac	; 0x10ac <fputc>
     db6:	9a 94       	dec	r9
     db8:	f7 cf       	rjmp	.-18     	; 0xda8 <vfprintf+0x372>
     dba:	8a 94       	dec	r8
     dbc:	f3 01       	movw	r30, r6
     dbe:	e8 0d       	add	r30, r8
     dc0:	f1 1d       	adc	r31, r1
     dc2:	80 81       	ld	r24, Z
     dc4:	b6 01       	movw	r22, r12
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 94 56 08 	call	0x10ac	; 0x10ac <fputc>
     dcc:	81 10       	cpse	r8, r1
     dce:	f5 cf       	rjmp	.-22     	; 0xdba <vfprintf+0x384>
     dd0:	22 20       	and	r2, r2
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <vfprintf+0x3a0>
     dd4:	42 ce       	rjmp	.-892    	; 0xa5a <vfprintf+0x24>
     dd6:	b6 01       	movw	r22, r12
     dd8:	80 e2       	ldi	r24, 0x20	; 32
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	0e 94 56 08 	call	0x10ac	; 0x10ac <fputc>
     de0:	2a 94       	dec	r2
     de2:	f6 cf       	rjmp	.-20     	; 0xdd0 <vfprintf+0x39a>
     de4:	f6 01       	movw	r30, r12
     de6:	86 81       	ldd	r24, Z+6	; 0x06
     de8:	97 81       	ldd	r25, Z+7	; 0x07
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <vfprintf+0x3ba>
     dec:	8f ef       	ldi	r24, 0xFF	; 255
     dee:	9f ef       	ldi	r25, 0xFF	; 255
     df0:	2b 96       	adiw	r28, 0x0b	; 11
     df2:	e2 e1       	ldi	r30, 0x12	; 18
     df4:	0c 94 0c 09 	jmp	0x1218	; 0x1218 <__epilogue_restores__>

00000df8 <calloc>:
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
     e00:	86 9f       	mul	r24, r22
     e02:	80 01       	movw	r16, r0
     e04:	87 9f       	mul	r24, r23
     e06:	10 0d       	add	r17, r0
     e08:	96 9f       	mul	r25, r22
     e0a:	10 0d       	add	r17, r0
     e0c:	11 24       	eor	r1, r1
     e0e:	c8 01       	movw	r24, r16
     e10:	0e 94 18 07 	call	0xe30	; 0xe30 <malloc>
     e14:	ec 01       	movw	r28, r24
     e16:	00 97       	sbiw	r24, 0x00	; 0
     e18:	29 f0       	breq	.+10     	; 0xe24 <calloc+0x2c>
     e1a:	a8 01       	movw	r20, r16
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	0e 94 44 08 	call	0x1088	; 0x1088 <memset>
     e24:	ce 01       	movw	r24, r28
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	1f 91       	pop	r17
     e2c:	0f 91       	pop	r16
     e2e:	08 95       	ret

00000e30 <malloc>:
     e30:	0f 93       	push	r16
     e32:	1f 93       	push	r17
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
     e38:	82 30       	cpi	r24, 0x02	; 2
     e3a:	91 05       	cpc	r25, r1
     e3c:	10 f4       	brcc	.+4      	; 0xe42 <malloc+0x12>
     e3e:	82 e0       	ldi	r24, 0x02	; 2
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <__flp>
     e46:	f0 91 98 01 	lds	r31, 0x0198	; 0x800198 <__flp+0x1>
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	a0 e0       	ldi	r26, 0x00	; 0
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	30 97       	sbiw	r30, 0x00	; 0
     e54:	19 f1       	breq	.+70     	; 0xe9c <malloc+0x6c>
     e56:	40 81       	ld	r20, Z
     e58:	51 81       	ldd	r21, Z+1	; 0x01
     e5a:	02 81       	ldd	r16, Z+2	; 0x02
     e5c:	13 81       	ldd	r17, Z+3	; 0x03
     e5e:	48 17       	cp	r20, r24
     e60:	59 07       	cpc	r21, r25
     e62:	c8 f0       	brcs	.+50     	; 0xe96 <malloc+0x66>
     e64:	84 17       	cp	r24, r20
     e66:	95 07       	cpc	r25, r21
     e68:	69 f4       	brne	.+26     	; 0xe84 <malloc+0x54>
     e6a:	10 97       	sbiw	r26, 0x00	; 0
     e6c:	31 f0       	breq	.+12     	; 0xe7a <malloc+0x4a>
     e6e:	12 96       	adiw	r26, 0x02	; 2
     e70:	0c 93       	st	X, r16
     e72:	12 97       	sbiw	r26, 0x02	; 2
     e74:	13 96       	adiw	r26, 0x03	; 3
     e76:	1c 93       	st	X, r17
     e78:	27 c0       	rjmp	.+78     	; 0xec8 <malloc+0x98>
     e7a:	00 93 97 01 	sts	0x0197, r16	; 0x800197 <__flp>
     e7e:	10 93 98 01 	sts	0x0198, r17	; 0x800198 <__flp+0x1>
     e82:	22 c0       	rjmp	.+68     	; 0xec8 <malloc+0x98>
     e84:	21 15       	cp	r18, r1
     e86:	31 05       	cpc	r19, r1
     e88:	19 f0       	breq	.+6      	; 0xe90 <malloc+0x60>
     e8a:	42 17       	cp	r20, r18
     e8c:	53 07       	cpc	r21, r19
     e8e:	18 f4       	brcc	.+6      	; 0xe96 <malloc+0x66>
     e90:	9a 01       	movw	r18, r20
     e92:	bd 01       	movw	r22, r26
     e94:	ef 01       	movw	r28, r30
     e96:	df 01       	movw	r26, r30
     e98:	f8 01       	movw	r30, r16
     e9a:	db cf       	rjmp	.-74     	; 0xe52 <malloc+0x22>
     e9c:	21 15       	cp	r18, r1
     e9e:	31 05       	cpc	r19, r1
     ea0:	f9 f0       	breq	.+62     	; 0xee0 <malloc+0xb0>
     ea2:	28 1b       	sub	r18, r24
     ea4:	39 0b       	sbc	r19, r25
     ea6:	24 30       	cpi	r18, 0x04	; 4
     ea8:	31 05       	cpc	r19, r1
     eaa:	80 f4       	brcc	.+32     	; 0xecc <malloc+0x9c>
     eac:	8a 81       	ldd	r24, Y+2	; 0x02
     eae:	9b 81       	ldd	r25, Y+3	; 0x03
     eb0:	61 15       	cp	r22, r1
     eb2:	71 05       	cpc	r23, r1
     eb4:	21 f0       	breq	.+8      	; 0xebe <malloc+0x8e>
     eb6:	fb 01       	movw	r30, r22
     eb8:	93 83       	std	Z+3, r25	; 0x03
     eba:	82 83       	std	Z+2, r24	; 0x02
     ebc:	04 c0       	rjmp	.+8      	; 0xec6 <malloc+0x96>
     ebe:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <__flp+0x1>
     ec2:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <__flp>
     ec6:	fe 01       	movw	r30, r28
     ec8:	32 96       	adiw	r30, 0x02	; 2
     eca:	44 c0       	rjmp	.+136    	; 0xf54 <malloc+0x124>
     ecc:	fe 01       	movw	r30, r28
     ece:	e2 0f       	add	r30, r18
     ed0:	f3 1f       	adc	r31, r19
     ed2:	81 93       	st	Z+, r24
     ed4:	91 93       	st	Z+, r25
     ed6:	22 50       	subi	r18, 0x02	; 2
     ed8:	31 09       	sbc	r19, r1
     eda:	39 83       	std	Y+1, r19	; 0x01
     edc:	28 83       	st	Y, r18
     ede:	3a c0       	rjmp	.+116    	; 0xf54 <malloc+0x124>
     ee0:	20 91 95 01 	lds	r18, 0x0195	; 0x800195 <__brkval>
     ee4:	30 91 96 01 	lds	r19, 0x0196	; 0x800196 <__brkval+0x1>
     ee8:	23 2b       	or	r18, r19
     eea:	41 f4       	brne	.+16     	; 0xefc <malloc+0xcc>
     eec:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     ef0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     ef4:	30 93 96 01 	sts	0x0196, r19	; 0x800196 <__brkval+0x1>
     ef8:	20 93 95 01 	sts	0x0195, r18	; 0x800195 <__brkval>
     efc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     f00:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     f04:	21 15       	cp	r18, r1
     f06:	31 05       	cpc	r19, r1
     f08:	41 f4       	brne	.+16     	; 0xf1a <malloc+0xea>
     f0a:	2d b7       	in	r18, 0x3d	; 61
     f0c:	3e b7       	in	r19, 0x3e	; 62
     f0e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     f12:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     f16:	24 1b       	sub	r18, r20
     f18:	35 0b       	sbc	r19, r21
     f1a:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <__brkval>
     f1e:	f0 91 96 01 	lds	r31, 0x0196	; 0x800196 <__brkval+0x1>
     f22:	e2 17       	cp	r30, r18
     f24:	f3 07       	cpc	r31, r19
     f26:	a0 f4       	brcc	.+40     	; 0xf50 <malloc+0x120>
     f28:	2e 1b       	sub	r18, r30
     f2a:	3f 0b       	sbc	r19, r31
     f2c:	28 17       	cp	r18, r24
     f2e:	39 07       	cpc	r19, r25
     f30:	78 f0       	brcs	.+30     	; 0xf50 <malloc+0x120>
     f32:	ac 01       	movw	r20, r24
     f34:	4e 5f       	subi	r20, 0xFE	; 254
     f36:	5f 4f       	sbci	r21, 0xFF	; 255
     f38:	24 17       	cp	r18, r20
     f3a:	35 07       	cpc	r19, r21
     f3c:	48 f0       	brcs	.+18     	; 0xf50 <malloc+0x120>
     f3e:	4e 0f       	add	r20, r30
     f40:	5f 1f       	adc	r21, r31
     f42:	50 93 96 01 	sts	0x0196, r21	; 0x800196 <__brkval+0x1>
     f46:	40 93 95 01 	sts	0x0195, r20	; 0x800195 <__brkval>
     f4a:	81 93       	st	Z+, r24
     f4c:	91 93       	st	Z+, r25
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <malloc+0x124>
     f50:	e0 e0       	ldi	r30, 0x00	; 0
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	cf 01       	movw	r24, r30
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	1f 91       	pop	r17
     f5c:	0f 91       	pop	r16
     f5e:	08 95       	ret

00000f60 <free>:
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	00 97       	sbiw	r24, 0x00	; 0
     f66:	09 f4       	brne	.+2      	; 0xf6a <free+0xa>
     f68:	81 c0       	rjmp	.+258    	; 0x106c <free+0x10c>
     f6a:	fc 01       	movw	r30, r24
     f6c:	32 97       	sbiw	r30, 0x02	; 2
     f6e:	13 82       	std	Z+3, r1	; 0x03
     f70:	12 82       	std	Z+2, r1	; 0x02
     f72:	a0 91 97 01 	lds	r26, 0x0197	; 0x800197 <__flp>
     f76:	b0 91 98 01 	lds	r27, 0x0198	; 0x800198 <__flp+0x1>
     f7a:	10 97       	sbiw	r26, 0x00	; 0
     f7c:	81 f4       	brne	.+32     	; 0xf9e <free+0x3e>
     f7e:	20 81       	ld	r18, Z
     f80:	31 81       	ldd	r19, Z+1	; 0x01
     f82:	82 0f       	add	r24, r18
     f84:	93 1f       	adc	r25, r19
     f86:	20 91 95 01 	lds	r18, 0x0195	; 0x800195 <__brkval>
     f8a:	30 91 96 01 	lds	r19, 0x0196	; 0x800196 <__brkval+0x1>
     f8e:	28 17       	cp	r18, r24
     f90:	39 07       	cpc	r19, r25
     f92:	51 f5       	brne	.+84     	; 0xfe8 <free+0x88>
     f94:	f0 93 96 01 	sts	0x0196, r31	; 0x800196 <__brkval+0x1>
     f98:	e0 93 95 01 	sts	0x0195, r30	; 0x800195 <__brkval>
     f9c:	67 c0       	rjmp	.+206    	; 0x106c <free+0x10c>
     f9e:	ed 01       	movw	r28, r26
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	ce 17       	cp	r28, r30
     fa6:	df 07       	cpc	r29, r31
     fa8:	40 f4       	brcc	.+16     	; 0xfba <free+0x5a>
     faa:	4a 81       	ldd	r20, Y+2	; 0x02
     fac:	5b 81       	ldd	r21, Y+3	; 0x03
     fae:	9e 01       	movw	r18, r28
     fb0:	41 15       	cp	r20, r1
     fb2:	51 05       	cpc	r21, r1
     fb4:	f1 f0       	breq	.+60     	; 0xff2 <free+0x92>
     fb6:	ea 01       	movw	r28, r20
     fb8:	f5 cf       	rjmp	.-22     	; 0xfa4 <free+0x44>
     fba:	d3 83       	std	Z+3, r29	; 0x03
     fbc:	c2 83       	std	Z+2, r28	; 0x02
     fbe:	40 81       	ld	r20, Z
     fc0:	51 81       	ldd	r21, Z+1	; 0x01
     fc2:	84 0f       	add	r24, r20
     fc4:	95 1f       	adc	r25, r21
     fc6:	c8 17       	cp	r28, r24
     fc8:	d9 07       	cpc	r29, r25
     fca:	59 f4       	brne	.+22     	; 0xfe2 <free+0x82>
     fcc:	88 81       	ld	r24, Y
     fce:	99 81       	ldd	r25, Y+1	; 0x01
     fd0:	84 0f       	add	r24, r20
     fd2:	95 1f       	adc	r25, r21
     fd4:	02 96       	adiw	r24, 0x02	; 2
     fd6:	91 83       	std	Z+1, r25	; 0x01
     fd8:	80 83       	st	Z, r24
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	9b 81       	ldd	r25, Y+3	; 0x03
     fde:	93 83       	std	Z+3, r25	; 0x03
     fe0:	82 83       	std	Z+2, r24	; 0x02
     fe2:	21 15       	cp	r18, r1
     fe4:	31 05       	cpc	r19, r1
     fe6:	29 f4       	brne	.+10     	; 0xff2 <free+0x92>
     fe8:	f0 93 98 01 	sts	0x0198, r31	; 0x800198 <__flp+0x1>
     fec:	e0 93 97 01 	sts	0x0197, r30	; 0x800197 <__flp>
     ff0:	3d c0       	rjmp	.+122    	; 0x106c <free+0x10c>
     ff2:	e9 01       	movw	r28, r18
     ff4:	fb 83       	std	Y+3, r31	; 0x03
     ff6:	ea 83       	std	Y+2, r30	; 0x02
     ff8:	49 91       	ld	r20, Y+
     ffa:	59 91       	ld	r21, Y+
     ffc:	c4 0f       	add	r28, r20
     ffe:	d5 1f       	adc	r29, r21
    1000:	ec 17       	cp	r30, r28
    1002:	fd 07       	cpc	r31, r29
    1004:	61 f4       	brne	.+24     	; 0x101e <free+0xbe>
    1006:	80 81       	ld	r24, Z
    1008:	91 81       	ldd	r25, Z+1	; 0x01
    100a:	84 0f       	add	r24, r20
    100c:	95 1f       	adc	r25, r21
    100e:	02 96       	adiw	r24, 0x02	; 2
    1010:	e9 01       	movw	r28, r18
    1012:	99 83       	std	Y+1, r25	; 0x01
    1014:	88 83       	st	Y, r24
    1016:	82 81       	ldd	r24, Z+2	; 0x02
    1018:	93 81       	ldd	r25, Z+3	; 0x03
    101a:	9b 83       	std	Y+3, r25	; 0x03
    101c:	8a 83       	std	Y+2, r24	; 0x02
    101e:	e0 e0       	ldi	r30, 0x00	; 0
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	12 96       	adiw	r26, 0x02	; 2
    1024:	8d 91       	ld	r24, X+
    1026:	9c 91       	ld	r25, X
    1028:	13 97       	sbiw	r26, 0x03	; 3
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	19 f0       	breq	.+6      	; 0x1034 <free+0xd4>
    102e:	fd 01       	movw	r30, r26
    1030:	dc 01       	movw	r26, r24
    1032:	f7 cf       	rjmp	.-18     	; 0x1022 <free+0xc2>
    1034:	8d 91       	ld	r24, X+
    1036:	9c 91       	ld	r25, X
    1038:	11 97       	sbiw	r26, 0x01	; 1
    103a:	9d 01       	movw	r18, r26
    103c:	2e 5f       	subi	r18, 0xFE	; 254
    103e:	3f 4f       	sbci	r19, 0xFF	; 255
    1040:	82 0f       	add	r24, r18
    1042:	93 1f       	adc	r25, r19
    1044:	20 91 95 01 	lds	r18, 0x0195	; 0x800195 <__brkval>
    1048:	30 91 96 01 	lds	r19, 0x0196	; 0x800196 <__brkval+0x1>
    104c:	28 17       	cp	r18, r24
    104e:	39 07       	cpc	r19, r25
    1050:	69 f4       	brne	.+26     	; 0x106c <free+0x10c>
    1052:	30 97       	sbiw	r30, 0x00	; 0
    1054:	29 f4       	brne	.+10     	; 0x1060 <free+0x100>
    1056:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <__flp+0x1>
    105a:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <__flp>
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <free+0x104>
    1060:	13 82       	std	Z+3, r1	; 0x03
    1062:	12 82       	std	Z+2, r1	; 0x02
    1064:	b0 93 96 01 	sts	0x0196, r27	; 0x800196 <__brkval+0x1>
    1068:	a0 93 95 01 	sts	0x0195, r26	; 0x800195 <__brkval>
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	08 95       	ret

00001072 <strnlen_P>:
    1072:	fc 01       	movw	r30, r24
    1074:	05 90       	lpm	r0, Z+
    1076:	61 50       	subi	r22, 0x01	; 1
    1078:	70 40       	sbci	r23, 0x00	; 0
    107a:	01 10       	cpse	r0, r1
    107c:	d8 f7       	brcc	.-10     	; 0x1074 <strnlen_P+0x2>
    107e:	80 95       	com	r24
    1080:	90 95       	com	r25
    1082:	8e 0f       	add	r24, r30
    1084:	9f 1f       	adc	r25, r31
    1086:	08 95       	ret

00001088 <memset>:
    1088:	dc 01       	movw	r26, r24
    108a:	01 c0       	rjmp	.+2      	; 0x108e <memset+0x6>
    108c:	6d 93       	st	X+, r22
    108e:	41 50       	subi	r20, 0x01	; 1
    1090:	50 40       	sbci	r21, 0x00	; 0
    1092:	e0 f7       	brcc	.-8      	; 0x108c <memset+0x4>
    1094:	08 95       	ret

00001096 <strnlen>:
    1096:	fc 01       	movw	r30, r24
    1098:	61 50       	subi	r22, 0x01	; 1
    109a:	70 40       	sbci	r23, 0x00	; 0
    109c:	01 90       	ld	r0, Z+
    109e:	01 10       	cpse	r0, r1
    10a0:	d8 f7       	brcc	.-10     	; 0x1098 <strnlen+0x2>
    10a2:	80 95       	com	r24
    10a4:	90 95       	com	r25
    10a6:	8e 0f       	add	r24, r30
    10a8:	9f 1f       	adc	r25, r31
    10aa:	08 95       	ret

000010ac <fputc>:
    10ac:	0f 93       	push	r16
    10ae:	1f 93       	push	r17
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
    10b4:	fb 01       	movw	r30, r22
    10b6:	23 81       	ldd	r18, Z+3	; 0x03
    10b8:	21 fd       	sbrc	r18, 1
    10ba:	03 c0       	rjmp	.+6      	; 0x10c2 <fputc+0x16>
    10bc:	8f ef       	ldi	r24, 0xFF	; 255
    10be:	9f ef       	ldi	r25, 0xFF	; 255
    10c0:	2c c0       	rjmp	.+88     	; 0x111a <fputc+0x6e>
    10c2:	22 ff       	sbrs	r18, 2
    10c4:	16 c0       	rjmp	.+44     	; 0x10f2 <fputc+0x46>
    10c6:	46 81       	ldd	r20, Z+6	; 0x06
    10c8:	57 81       	ldd	r21, Z+7	; 0x07
    10ca:	24 81       	ldd	r18, Z+4	; 0x04
    10cc:	35 81       	ldd	r19, Z+5	; 0x05
    10ce:	42 17       	cp	r20, r18
    10d0:	53 07       	cpc	r21, r19
    10d2:	44 f4       	brge	.+16     	; 0x10e4 <fputc+0x38>
    10d4:	a0 81       	ld	r26, Z
    10d6:	b1 81       	ldd	r27, Z+1	; 0x01
    10d8:	9d 01       	movw	r18, r26
    10da:	2f 5f       	subi	r18, 0xFF	; 255
    10dc:	3f 4f       	sbci	r19, 0xFF	; 255
    10de:	31 83       	std	Z+1, r19	; 0x01
    10e0:	20 83       	st	Z, r18
    10e2:	8c 93       	st	X, r24
    10e4:	26 81       	ldd	r18, Z+6	; 0x06
    10e6:	37 81       	ldd	r19, Z+7	; 0x07
    10e8:	2f 5f       	subi	r18, 0xFF	; 255
    10ea:	3f 4f       	sbci	r19, 0xFF	; 255
    10ec:	37 83       	std	Z+7, r19	; 0x07
    10ee:	26 83       	std	Z+6, r18	; 0x06
    10f0:	14 c0       	rjmp	.+40     	; 0x111a <fputc+0x6e>
    10f2:	8b 01       	movw	r16, r22
    10f4:	ec 01       	movw	r28, r24
    10f6:	fb 01       	movw	r30, r22
    10f8:	00 84       	ldd	r0, Z+8	; 0x08
    10fa:	f1 85       	ldd	r31, Z+9	; 0x09
    10fc:	e0 2d       	mov	r30, r0
    10fe:	09 95       	icall
    1100:	89 2b       	or	r24, r25
    1102:	e1 f6       	brne	.-72     	; 0x10bc <fputc+0x10>
    1104:	d8 01       	movw	r26, r16
    1106:	16 96       	adiw	r26, 0x06	; 6
    1108:	8d 91       	ld	r24, X+
    110a:	9c 91       	ld	r25, X
    110c:	17 97       	sbiw	r26, 0x07	; 7
    110e:	01 96       	adiw	r24, 0x01	; 1
    1110:	17 96       	adiw	r26, 0x07	; 7
    1112:	9c 93       	st	X, r25
    1114:	8e 93       	st	-X, r24
    1116:	16 97       	sbiw	r26, 0x06	; 6
    1118:	ce 01       	movw	r24, r28
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	08 95       	ret

00001124 <__ultoa_invert>:
    1124:	fa 01       	movw	r30, r20
    1126:	aa 27       	eor	r26, r26
    1128:	28 30       	cpi	r18, 0x08	; 8
    112a:	51 f1       	breq	.+84     	; 0x1180 <__ultoa_invert+0x5c>
    112c:	20 31       	cpi	r18, 0x10	; 16
    112e:	81 f1       	breq	.+96     	; 0x1190 <__ultoa_invert+0x6c>
    1130:	e8 94       	clt
    1132:	6f 93       	push	r22
    1134:	6e 7f       	andi	r22, 0xFE	; 254
    1136:	6e 5f       	subi	r22, 0xFE	; 254
    1138:	7f 4f       	sbci	r23, 0xFF	; 255
    113a:	8f 4f       	sbci	r24, 0xFF	; 255
    113c:	9f 4f       	sbci	r25, 0xFF	; 255
    113e:	af 4f       	sbci	r26, 0xFF	; 255
    1140:	b1 e0       	ldi	r27, 0x01	; 1
    1142:	3e d0       	rcall	.+124    	; 0x11c0 <__ultoa_invert+0x9c>
    1144:	b4 e0       	ldi	r27, 0x04	; 4
    1146:	3c d0       	rcall	.+120    	; 0x11c0 <__ultoa_invert+0x9c>
    1148:	67 0f       	add	r22, r23
    114a:	78 1f       	adc	r23, r24
    114c:	89 1f       	adc	r24, r25
    114e:	9a 1f       	adc	r25, r26
    1150:	a1 1d       	adc	r26, r1
    1152:	68 0f       	add	r22, r24
    1154:	79 1f       	adc	r23, r25
    1156:	8a 1f       	adc	r24, r26
    1158:	91 1d       	adc	r25, r1
    115a:	a1 1d       	adc	r26, r1
    115c:	6a 0f       	add	r22, r26
    115e:	71 1d       	adc	r23, r1
    1160:	81 1d       	adc	r24, r1
    1162:	91 1d       	adc	r25, r1
    1164:	a1 1d       	adc	r26, r1
    1166:	20 d0       	rcall	.+64     	; 0x11a8 <__ultoa_invert+0x84>
    1168:	09 f4       	brne	.+2      	; 0x116c <__ultoa_invert+0x48>
    116a:	68 94       	set
    116c:	3f 91       	pop	r19
    116e:	2a e0       	ldi	r18, 0x0A	; 10
    1170:	26 9f       	mul	r18, r22
    1172:	11 24       	eor	r1, r1
    1174:	30 19       	sub	r19, r0
    1176:	30 5d       	subi	r19, 0xD0	; 208
    1178:	31 93       	st	Z+, r19
    117a:	de f6       	brtc	.-74     	; 0x1132 <__ultoa_invert+0xe>
    117c:	cf 01       	movw	r24, r30
    117e:	08 95       	ret
    1180:	46 2f       	mov	r20, r22
    1182:	47 70       	andi	r20, 0x07	; 7
    1184:	40 5d       	subi	r20, 0xD0	; 208
    1186:	41 93       	st	Z+, r20
    1188:	b3 e0       	ldi	r27, 0x03	; 3
    118a:	0f d0       	rcall	.+30     	; 0x11aa <__ultoa_invert+0x86>
    118c:	c9 f7       	brne	.-14     	; 0x1180 <__ultoa_invert+0x5c>
    118e:	f6 cf       	rjmp	.-20     	; 0x117c <__ultoa_invert+0x58>
    1190:	46 2f       	mov	r20, r22
    1192:	4f 70       	andi	r20, 0x0F	; 15
    1194:	40 5d       	subi	r20, 0xD0	; 208
    1196:	4a 33       	cpi	r20, 0x3A	; 58
    1198:	18 f0       	brcs	.+6      	; 0x11a0 <__ultoa_invert+0x7c>
    119a:	49 5d       	subi	r20, 0xD9	; 217
    119c:	31 fd       	sbrc	r19, 1
    119e:	40 52       	subi	r20, 0x20	; 32
    11a0:	41 93       	st	Z+, r20
    11a2:	02 d0       	rcall	.+4      	; 0x11a8 <__ultoa_invert+0x84>
    11a4:	a9 f7       	brne	.-22     	; 0x1190 <__ultoa_invert+0x6c>
    11a6:	ea cf       	rjmp	.-44     	; 0x117c <__ultoa_invert+0x58>
    11a8:	b4 e0       	ldi	r27, 0x04	; 4
    11aa:	a6 95       	lsr	r26
    11ac:	97 95       	ror	r25
    11ae:	87 95       	ror	r24
    11b0:	77 95       	ror	r23
    11b2:	67 95       	ror	r22
    11b4:	ba 95       	dec	r27
    11b6:	c9 f7       	brne	.-14     	; 0x11aa <__ultoa_invert+0x86>
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	61 05       	cpc	r22, r1
    11bc:	71 05       	cpc	r23, r1
    11be:	08 95       	ret
    11c0:	9b 01       	movw	r18, r22
    11c2:	ac 01       	movw	r20, r24
    11c4:	0a 2e       	mov	r0, r26
    11c6:	06 94       	lsr	r0
    11c8:	57 95       	ror	r21
    11ca:	47 95       	ror	r20
    11cc:	37 95       	ror	r19
    11ce:	27 95       	ror	r18
    11d0:	ba 95       	dec	r27
    11d2:	c9 f7       	brne	.-14     	; 0x11c6 <__ultoa_invert+0xa2>
    11d4:	62 0f       	add	r22, r18
    11d6:	73 1f       	adc	r23, r19
    11d8:	84 1f       	adc	r24, r20
    11da:	95 1f       	adc	r25, r21
    11dc:	a0 1d       	adc	r26, r0
    11de:	08 95       	ret

000011e0 <__prologue_saves__>:
    11e0:	2f 92       	push	r2
    11e2:	3f 92       	push	r3
    11e4:	4f 92       	push	r4
    11e6:	5f 92       	push	r5
    11e8:	6f 92       	push	r6
    11ea:	7f 92       	push	r7
    11ec:	8f 92       	push	r8
    11ee:	9f 92       	push	r9
    11f0:	af 92       	push	r10
    11f2:	bf 92       	push	r11
    11f4:	cf 92       	push	r12
    11f6:	df 92       	push	r13
    11f8:	ef 92       	push	r14
    11fa:	ff 92       	push	r15
    11fc:	0f 93       	push	r16
    11fe:	1f 93       	push	r17
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	ca 1b       	sub	r28, r26
    120a:	db 0b       	sbc	r29, r27
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	cd bf       	out	0x3d, r28	; 61
    1216:	09 94       	ijmp

00001218 <__epilogue_restores__>:
    1218:	2a 88       	ldd	r2, Y+18	; 0x12
    121a:	39 88       	ldd	r3, Y+17	; 0x11
    121c:	48 88       	ldd	r4, Y+16	; 0x10
    121e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1220:	6e 84       	ldd	r6, Y+14	; 0x0e
    1222:	7d 84       	ldd	r7, Y+13	; 0x0d
    1224:	8c 84       	ldd	r8, Y+12	; 0x0c
    1226:	9b 84       	ldd	r9, Y+11	; 0x0b
    1228:	aa 84       	ldd	r10, Y+10	; 0x0a
    122a:	b9 84       	ldd	r11, Y+9	; 0x09
    122c:	c8 84       	ldd	r12, Y+8	; 0x08
    122e:	df 80       	ldd	r13, Y+7	; 0x07
    1230:	ee 80       	ldd	r14, Y+6	; 0x06
    1232:	fd 80       	ldd	r15, Y+5	; 0x05
    1234:	0c 81       	ldd	r16, Y+4	; 0x04
    1236:	1b 81       	ldd	r17, Y+3	; 0x03
    1238:	aa 81       	ldd	r26, Y+2	; 0x02
    123a:	b9 81       	ldd	r27, Y+1	; 0x01
    123c:	ce 0f       	add	r28, r30
    123e:	d1 1d       	adc	r29, r1
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	f8 94       	cli
    1244:	de bf       	out	0x3e, r29	; 62
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	cd bf       	out	0x3d, r28	; 61
    124a:	ed 01       	movw	r28, r26
    124c:	08 95       	ret

0000124e <_exit>:
    124e:	f8 94       	cli

00001250 <__stop_program>:
    1250:	ff cf       	rjmp	.-2      	; 0x1250 <__stop_program>
