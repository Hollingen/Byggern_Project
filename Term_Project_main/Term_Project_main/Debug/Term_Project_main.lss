
Term_Project_main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800100  00001394  00001428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001394  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  0080019c  0080019c  000014c4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001520  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d4b  00000000  00000000  00001764  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e98  00000000  00000000  000034af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ffe  00000000  00000000  00004347  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d8  00000000  00000000  00005348  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000086a  00000000  00000000  00005820  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c80  00000000  00000000  0000608a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  00006d0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__ctors_end>
       4:	0c 94 07 03 	jmp	0x60e	; 0x60e <__vector_1>
       8:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
       c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      10:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      14:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      18:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      1c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      20:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      24:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      28:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      2c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      30:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      34:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      38:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      3c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      40:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      44:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      48:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      4c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      50:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      54:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      58:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      5c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      60:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      64:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      68:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      6c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	d7 00       	.word	0x00d7	; ????
      72:	cf 00       	.word	0x00cf	; ????
      74:	c6 00       	.word	0x00c6	; ????
      76:	bb 00       	.word	0x00bb	; ????
      78:	ae 00       	.word	0x00ae	; ????
      7a:	a1 00       	.word	0x00a1	; ????
      7c:	94 00       	.word	0x0094	; ????
      7e:	87 00       	.word	0x0087	; ????
      80:	82 00       	.word	0x0082	; ????

00000082 <text_quit>:
      82:	51 75 69 74 00                                      Quit.

00000087 <text_placeholder4>:
      87:	70 6c 61 63 65 68 6f 6c 64 65 72 34 00              placeholder4.

00000094 <text_placeholder3>:
      94:	70 6c 61 63 65 68 6f 6c 64 65 72 33 00              placeholder3.

000000a1 <text_placeholder2>:
      a1:	70 6c 61 63 65 68 6f 6c 64 65 72 32 00              placeholder2.

000000ae <text_placeholder1>:
      ae:	70 6c 61 63 65 68 6f 6c 64 65 72 31 00              placeholder1.

000000bb <text_highscores>:
      bb:	48 69 67 68 73 63 6f 72 65 73 00                    Highscores.

000000c6 <text_settings>:
      c6:	53 65 74 74 69 6e 67 73 00                          Settings.

000000cf <text_play>:
      cf:	50 6c 61 79 20 3a 29 00                             Play :).

000000d7 <text_main_menu>:
      d7:	4d 61 69 6e 20 6d 65 6e 75 00                       Main menu.

000000e1 <font8>:
	...
      e9:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
      f9:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     109:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     119:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     129:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     139:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     149:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     159:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     169:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     179:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     189:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     199:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     1a9:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     1b9:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     1c9:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     1d9:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     1e9:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     1f9:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     209:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     219:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     229:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     239:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     249:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     259:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     269:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     279:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     289:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     299:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     2a9:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     2b9:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     2c9:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     2d9:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     2e9:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     2f9:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     309:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     319:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     329:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     339:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     349:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     359:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     369:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     379:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     389:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     399:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     3a9:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     3b9:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     3c9:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000003da <__ctors_end>:
     3da:	11 24       	eor	r1, r1
     3dc:	1f be       	out	0x3f, r1	; 63
     3de:	cf ef       	ldi	r28, 0xFF	; 255
     3e0:	d4 e0       	ldi	r29, 0x04	; 4
     3e2:	de bf       	out	0x3e, r29	; 62
     3e4:	cd bf       	out	0x3d, r28	; 61

000003e6 <__do_copy_data>:
     3e6:	11 e0       	ldi	r17, 0x01	; 1
     3e8:	a0 e0       	ldi	r26, 0x00	; 0
     3ea:	b1 e0       	ldi	r27, 0x01	; 1
     3ec:	e4 e9       	ldi	r30, 0x94	; 148
     3ee:	f3 e1       	ldi	r31, 0x13	; 19
     3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <__do_copy_data+0x10>
     3f2:	05 90       	lpm	r0, Z+
     3f4:	0d 92       	st	X+, r0
     3f6:	ac 39       	cpi	r26, 0x9C	; 156
     3f8:	b1 07       	cpc	r27, r17
     3fa:	d9 f7       	brne	.-10     	; 0x3f2 <__do_copy_data+0xc>

000003fc <__do_clear_bss>:
     3fc:	21 e0       	ldi	r18, 0x01	; 1
     3fe:	ac e9       	ldi	r26, 0x9C	; 156
     400:	b1 e0       	ldi	r27, 0x01	; 1
     402:	01 c0       	rjmp	.+2      	; 0x406 <.do_clear_bss_start>

00000404 <.do_clear_bss_loop>:
     404:	1d 92       	st	X+, r1

00000406 <.do_clear_bss_start>:
     406:	a9 3b       	cpi	r26, 0xB9	; 185
     408:	b2 07       	cpc	r27, r18
     40a:	e1 f7       	brne	.-8      	; 0x404 <.do_clear_bss_loop>
     40c:	0e 94 16 03 	call	0x62c	; 0x62c <main>
     410:	0c 94 c8 09 	jmp	0x1390	; 0x1390 <_exit>

00000414 <__bad_interrupt>:
     414:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000418 <ADC_Init>:

uint8_t BUSY_flag = 0;

void ADC_Init(void){

    TCCR1A = (1<<COM1A1)|(1<<WGM11);  // Clear OCnA/OCnB on Compare Match, set OCnA/OCnB at TOP.
     418:	82 e8       	ldi	r24, 0x82	; 130
     41a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10);   // Fast PWM, TOP=ICRn, Update OCRnx on TOP. // Prescaler = 1
     41c:	89 e1       	ldi	r24, 0x19	; 25
     41e:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 5;
     420:	85 e0       	ldi	r24, 0x05	; 5
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	95 bd       	out	0x25, r25	; 37
     426:	84 bd       	out	0x24, r24	; 36
	OCR1A = 2;  // 50% Duty Cycle, ~0,8Mhz
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	9b bd       	out	0x2b, r25	; 43
     42e:	8a bd       	out	0x2a, r24	; 42
	
	DDRD |= (1<<PD5);
     430:	81 b3       	in	r24, 0x11	; 17
     432:	80 62       	ori	r24, 0x20	; 32
     434:	81 bb       	out	0x11, r24	; 17
     436:	08 95       	ret

00000438 <ADC_read>:

}

uint8_t ADC_read(uint8_t channel){
     438:	0f 93       	push	r16
     43a:	1f 93       	push	r17
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	d8 2f       	mov	r29, r24
	
	volatile *adc_in = (char *) ADC_ADDRESS;
	
	uint8_t data_x, data_y, data_ls, data_rs;
	
	adc_in[0] = 0x00;
     442:	10 92 01 14 	sts	0x1401, r1	; 0x801401 <__bss_end+0x1248>
     446:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <__bss_end+0x1247>
	
	sei();
     44a:	78 94       	sei
	while(!BUSY_flag){};
     44c:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <__data_end>
     450:	88 23       	and	r24, r24
     452:	e1 f3       	breq	.-8      	; 0x44c <ADC_read+0x14>
	cli();
     454:	f8 94       	cli
	
	data_x = XMEM_read(0x400);
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	94 e0       	ldi	r25, 0x04	; 4
     45a:	0e 94 13 05 	call	0xa26	; 0xa26 <XMEM_read>
     45e:	18 2f       	mov	r17, r24
	data_y = XMEM_read(0x400);
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	94 e0       	ldi	r25, 0x04	; 4
     464:	0e 94 13 05 	call	0xa26	; 0xa26 <XMEM_read>
     468:	c8 2f       	mov	r28, r24
	data_ls = XMEM_read(0x400);
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	94 e0       	ldi	r25, 0x04	; 4
     46e:	0e 94 13 05 	call	0xa26	; 0xa26 <XMEM_read>
     472:	08 2f       	mov	r16, r24
	data_rs = XMEM_read(0x400);
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	94 e0       	ldi	r25, 0x04	; 4
     478:	0e 94 13 05 	call	0xa26	; 0xa26 <XMEM_read>
	
	switch (channel){
     47c:	d1 30       	cpi	r29, 0x01	; 1
     47e:	59 f0       	breq	.+22     	; 0x496 <ADC_read+0x5e>
     480:	40 f0       	brcs	.+16     	; 0x492 <ADC_read+0x5a>
     482:	d2 30       	cpi	r29, 0x02	; 2
     484:	19 f0       	breq	.+6      	; 0x48c <ADC_read+0x54>
     486:	d3 30       	cpi	r29, 0x03	; 3
     488:	39 f0       	breq	.+14     	; 0x498 <ADC_read+0x60>
     48a:	02 c0       	rjmp	.+4      	; 0x490 <ADC_read+0x58>
			break;
		case 1:
			return data_y;
			break;
		case 2:
			return data_ls;
     48c:	80 2f       	mov	r24, r16
     48e:	04 c0       	rjmp	.+8      	; 0x498 <ADC_read+0x60>
			break;
		default:
			break;
	}
	
}
     490:	03 c0       	rjmp	.+6      	; 0x498 <ADC_read+0x60>
	data_ls = XMEM_read(0x400);
	data_rs = XMEM_read(0x400);
	
	switch (channel){
		case 0:
			return data_x;
     492:	81 2f       	mov	r24, r17
     494:	01 c0       	rjmp	.+2      	; 0x498 <ADC_read+0x60>
			break;
		case 1:
			return data_y;
     496:	8c 2f       	mov	r24, r28
			break;
		default:
			break;
	}
	
}
     498:	df 91       	pop	r29
     49a:	cf 91       	pop	r28
     49c:	1f 91       	pop	r17
     49e:	0f 91       	pop	r16
     4a0:	08 95       	ret

000004a2 <ADC_calibrate>:

void ADC_calibrate(void){
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
	offset.x = ADC_read(CHANNEL_X);
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	0e 94 1c 02 	call	0x438	; 0x438 <ADC_read>
     4ac:	cd e9       	ldi	r28, 0x9D	; 157
     4ae:	d1 e0       	ldi	r29, 0x01	; 1
     4b0:	88 83       	st	Y, r24
	offset.y = ADC_read(CHANNEL_Y);
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	0e 94 1c 02 	call	0x438	; 0x438 <ADC_read>
     4b8:	89 83       	std	Y+1, r24	; 0x01
	printf("x offset: %d, y offset: %d\n\r", offset.x, offset.y);
     4ba:	98 81       	ld	r25, Y
     4bc:	1f 92       	push	r1
     4be:	8f 93       	push	r24
     4c0:	1f 92       	push	r1
     4c2:	9f 93       	push	r25
     4c4:	86 e0       	ldi	r24, 0x06	; 6
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	9f 93       	push	r25
     4ca:	8f 93       	push	r24
     4cc:	0e 94 a6 05 	call	0xb4c	; 0xb4c <printf>
}
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	08 95       	ret

000004e2 <Int_INIT>:

void Int_INIT(void){
	
    GICR |= (1<<INT0);
     4e2:	8b b7       	in	r24, 0x3b	; 59
     4e4:	80 64       	ori	r24, 0x40	; 64
     4e6:	8b bf       	out	0x3b, r24	; 59
	
	MCUCR |= (1<<ISC00);
     4e8:	85 b7       	in	r24, 0x35	; 53
     4ea:	81 60       	ori	r24, 0x01	; 1
     4ec:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<ISC01);
     4ee:	85 b7       	in	r24, 0x35	; 53
     4f0:	82 60       	ori	r24, 0x02	; 2
     4f2:	85 bf       	out	0x35, r24	; 53
	
	sei();
     4f4:	78 94       	sei
     4f6:	08 95       	ret

000004f8 <adc_get_pos>:
}

adc_pos adc_get_pos(){
     4f8:	1f 93       	push	r17
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
	
	adc_pos pos;
	uint8_t adc_raw[2];

	adc_raw[0] = ADC_read(CHANNEL_X);
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	0e 94 1c 02 	call	0x438	; 0x438 <ADC_read>
     504:	c8 2f       	mov	r28, r24
	adc_raw[1] = ADC_read(CHANNEL_Y);
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	0e 94 1c 02 	call	0x438	; 0x438 <ADC_read>
     50c:	e8 2f       	mov	r30, r24

	if (adc_raw[0] > offset.x){
     50e:	40 91 9d 01 	lds	r20, 0x019D	; 0x80019d <offset>
     512:	4c 17       	cp	r20, r28
     514:	98 f4       	brcc	.+38     	; 0x53c <__stack+0x3d>
		pos.x = (adc_raw[0] - offset.x)*100/(ADC_MAX_VALUE - offset.x);
     516:	50 e0       	ldi	r21, 0x00	; 0
     518:	2c 2f       	mov	r18, r28
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	24 1b       	sub	r18, r20
     51e:	35 0b       	sbc	r19, r21
     520:	64 e6       	ldi	r22, 0x64	; 100
     522:	62 9f       	mul	r22, r18
     524:	c0 01       	movw	r24, r0
     526:	63 9f       	mul	r22, r19
     528:	90 0d       	add	r25, r0
     52a:	11 24       	eor	r1, r1
     52c:	6f ef       	ldi	r22, 0xFF	; 255
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	64 1b       	sub	r22, r20
     532:	75 0b       	sbc	r23, r21
     534:	0e 94 2c 05 	call	0xa58	; 0xa58 <__divmodhi4>
     538:	16 2f       	mov	r17, r22
     53a:	11 c0       	rjmp	.+34     	; 0x55e <__stack+0x5f>
	}else if(adc_raw[0] < offset.x){
     53c:	c4 17       	cp	r28, r20
     53e:	78 f4       	brcc	.+30     	; 0x55e <__stack+0x5f>
		pos.x = -(offset.x - adc_raw[0])*100/offset.x;
     540:	64 2f       	mov	r22, r20
     542:	70 e0       	ldi	r23, 0x00	; 0
     544:	2c 2f       	mov	r18, r28
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	26 1b       	sub	r18, r22
     54a:	37 0b       	sbc	r19, r23
     54c:	44 e6       	ldi	r20, 0x64	; 100
     54e:	42 9f       	mul	r20, r18
     550:	c0 01       	movw	r24, r0
     552:	43 9f       	mul	r20, r19
     554:	90 0d       	add	r25, r0
     556:	11 24       	eor	r1, r1
     558:	0e 94 2c 05 	call	0xa58	; 0xa58 <__divmodhi4>
     55c:	16 2f       	mov	r17, r22
	}

	if (adc_raw[1] > offset.y){
     55e:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <offset+0x1>
     562:	2e 17       	cp	r18, r30
     564:	90 f4       	brcc	.+36     	; 0x58a <__stack+0x8b>
		pos.y = (adc_raw[1] - offset.y)*100/(ADC_MAX_VALUE - offset.y);
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	e2 1b       	sub	r30, r18
     56c:	f3 0b       	sbc	r31, r19
     56e:	44 e6       	ldi	r20, 0x64	; 100
     570:	4e 9f       	mul	r20, r30
     572:	c0 01       	movw	r24, r0
     574:	4f 9f       	mul	r20, r31
     576:	90 0d       	add	r25, r0
     578:	11 24       	eor	r1, r1
     57a:	6f ef       	ldi	r22, 0xFF	; 255
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	62 1b       	sub	r22, r18
     580:	73 0b       	sbc	r23, r19
     582:	0e 94 2c 05 	call	0xa58	; 0xa58 <__divmodhi4>
     586:	d6 2f       	mov	r29, r22
     588:	11 c0       	rjmp	.+34     	; 0x5ac <__stack+0xad>
	}else if(adc_raw[1] < offset.y){
     58a:	e2 17       	cp	r30, r18
     58c:	78 f4       	brcc	.+30     	; 0x5ac <__stack+0xad>
		pos.y = -(offset.y - adc_raw[1])*100/offset.y;
     58e:	62 2f       	mov	r22, r18
     590:	70 e0       	ldi	r23, 0x00	; 0
     592:	2e 2f       	mov	r18, r30
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	26 1b       	sub	r18, r22
     598:	37 0b       	sbc	r19, r23
     59a:	44 e6       	ldi	r20, 0x64	; 100
     59c:	42 9f       	mul	r20, r18
     59e:	c0 01       	movw	r24, r0
     5a0:	43 9f       	mul	r20, r19
     5a2:	90 0d       	add	r25, r0
     5a4:	11 24       	eor	r1, r1
     5a6:	0e 94 2c 05 	call	0xa58	; 0xa58 <__divmodhi4>
     5aa:	d6 2f       	mov	r29, r22
	}

	return pos;

}
     5ac:	81 2f       	mov	r24, r17
     5ae:	9d 2f       	mov	r25, r29
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	1f 91       	pop	r17
     5b6:	08 95       	ret

000005b8 <adc_get_dir>:

adc_dir adc_get_dir(adc_pos pos){

	if(abs(pos.y) >= ADC_THRESHHOLD){
     5b8:	29 2f       	mov	r18, r25
     5ba:	09 2e       	mov	r0, r25
     5bc:	00 0c       	add	r0, r0
     5be:	33 0b       	sbc	r19, r19
     5c0:	33 23       	and	r19, r19
     5c2:	1c f4       	brge	.+6      	; 0x5ca <adc_get_dir+0x12>
     5c4:	31 95       	neg	r19
     5c6:	21 95       	neg	r18
     5c8:	31 09       	sbc	r19, r1
     5ca:	2a 30       	cpi	r18, 0x0A	; 10
     5cc:	31 05       	cpc	r19, r1
     5ce:	2c f0       	brlt	.+10     	; 0x5da <adc_get_dir+0x22>
		if(pos.y >= ADC_THRESHHOLD){
     5d0:	9a 30       	cpi	r25, 0x0A	; 10
     5d2:	9c f4       	brge	.+38     	; 0x5fa <adc_get_dir+0x42>
			return UP;
		}else if(pos.y <= (-ADC_THRESHHOLD)){
     5d4:	97 3f       	cpi	r25, 0xF7	; 247
     5d6:	9c f0       	brlt	.+38     	; 0x5fe <adc_get_dir+0x46>
     5d8:	0f c0       	rjmp	.+30     	; 0x5f8 <adc_get_dir+0x40>
			return DOWN;
		}
	}else if(abs(pos.x) >= ADC_THRESHHOLD){
     5da:	28 2f       	mov	r18, r24
     5dc:	08 2e       	mov	r0, r24
     5de:	00 0c       	add	r0, r0
     5e0:	99 0b       	sbc	r25, r25
     5e2:	99 23       	and	r25, r25
     5e4:	1c f4       	brge	.+6      	; 0x5ec <adc_get_dir+0x34>
     5e6:	91 95       	neg	r25
     5e8:	81 95       	neg	r24
     5ea:	91 09       	sbc	r25, r1
     5ec:	0a 97       	sbiw	r24, 0x0a	; 10
     5ee:	4c f0       	brlt	.+18     	; 0x602 <adc_get_dir+0x4a>
		if(pos.x >= ADC_THRESHHOLD){
     5f0:	2a 30       	cpi	r18, 0x0A	; 10
     5f2:	4c f4       	brge	.+18     	; 0x606 <adc_get_dir+0x4e>
			return RIGHT;
		}else if(pos.x <= (-ADC_THRESHHOLD)){
     5f4:	27 3f       	cpi	r18, 0xF7	; 247
     5f6:	4c f0       	brlt	.+18     	; 0x60a <adc_get_dir+0x52>
			return LEFT;
		}
	}else{
		return NEUTRAL;
	}
}
     5f8:	08 95       	ret

adc_dir adc_get_dir(adc_pos pos){

	if(abs(pos.y) >= ADC_THRESHHOLD){
		if(pos.y >= ADC_THRESHHOLD){
			return UP;
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	08 95       	ret
		}else if(pos.y <= (-ADC_THRESHHOLD)){
			return DOWN;
     5fe:	82 e0       	ldi	r24, 0x02	; 2
     600:	08 95       	ret
			return RIGHT;
		}else if(pos.x <= (-ADC_THRESHHOLD)){
			return LEFT;
		}
	}else{
		return NEUTRAL;
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	08 95       	ret
		}else if(pos.y <= (-ADC_THRESHHOLD)){
			return DOWN;
		}
	}else if(abs(pos.x) >= ADC_THRESHHOLD){
		if(pos.x >= ADC_THRESHHOLD){
			return RIGHT;
     606:	84 e0       	ldi	r24, 0x04	; 4
     608:	08 95       	ret
		}else if(pos.x <= (-ADC_THRESHHOLD)){
			return LEFT;
     60a:	83 e0       	ldi	r24, 0x03	; 3
		}
	}else{
		return NEUTRAL;
	}
}
     60c:	08 95       	ret

0000060e <__vector_1>:

ISR(INT0_vect){
     60e:	1f 92       	push	r1
     610:	0f 92       	push	r0
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	0f 92       	push	r0
     616:	11 24       	eor	r1, r1
     618:	8f 93       	push	r24
    BUSY_flag = 1;
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <__data_end>
}
     620:	8f 91       	pop	r24
     622:	0f 90       	pop	r0
     624:	0f be       	out	0x3f, r0	; 63
     626:	0f 90       	pop	r0
     628:	1f 90       	pop	r1
     62a:	18 95       	reti

0000062c <main>:
#include "SPI/SPIdrv.h"
#include "MCP2515/MCP2515drv.h"

int main(void)
{
	USART_Init(MYUBRR);
     62c:	8f e1       	ldi	r24, 0x1F	; 31
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	0e 94 1f 05 	call	0xa3e	; 0xa3e <USART_Init>
	XMEM_init();
     634:	0e 94 0c 05 	call	0xa18	; 0xa18 <XMEM_init>
	Int_INIT();
     638:	0e 94 71 02 	call	0x4e2	; 0x4e2 <Int_INIT>
	ADC_Init();
     63c:	0e 94 0c 02 	call	0x418	; 0x418 <ADC_Init>
	oled_init();
     640:	0e 94 16 04 	call	0x82c	; 0x82c <oled_init>
	printf("her\n\r");
     644:	8c e2       	ldi	r24, 0x2C	; 44
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	9f 93       	push	r25
     64a:	8f 93       	push	r24
     64c:	0e 94 a6 05 	call	0xb4c	; 0xb4c <printf>
	mcp2515_init();
     650:	0e 94 ad 03 	call	0x75a	; 0x75a <mcp2515_init>
	
	printf("men ikke her\n\r");
     654:	83 e2       	ldi	r24, 0x23	; 35
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	9f 93       	push	r25
     65a:	8f 93       	push	r24
     65c:	0e 94 a6 05 	call	0xb4c	; 0xb4c <printf>
	//TESTE OLED;
	//oled_reset();
	//oled_home();
	//oled_print_char('t');

	ADC_calibrate();
     660:	0e 94 51 02 	call	0x4a2	; 0x4a2 <ADC_calibrate>
	menu_print_screen(0,0);
     664:	60 e0       	ldi	r22, 0x00	; 0
     666:	70 e0       	ldi	r23, 0x00	; 0
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <menu_print_screen>
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
	adc_pos pos;
	adc_dir dir;
    while (1) 
    {	

		pos = adc_get_pos();
     678:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <adc_get_pos>
     67c:	c8 2f       	mov	r28, r24
     67e:	d9 2f       	mov	r29, r25
		dir = adc_get_dir(pos);
     680:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <adc_get_dir>
     684:	18 2f       	mov	r17, r24

		printf("Positions X: %d%%  Y: %d%%\n\r", pos.x, pos.y);
     686:	8d 2f       	mov	r24, r29
     688:	0d 2e       	mov	r0, r29
     68a:	00 0c       	add	r0, r0
     68c:	99 0b       	sbc	r25, r25
     68e:	9f 93       	push	r25
     690:	df 93       	push	r29
     692:	8c 2f       	mov	r24, r28
     694:	0c 2e       	mov	r0, r28
     696:	00 0c       	add	r0, r0
     698:	99 0b       	sbc	r25, r25
     69a:	9f 93       	push	r25
     69c:	cf 93       	push	r28
     69e:	82 e3       	ldi	r24, 0x32	; 50
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	9f 93       	push	r25
     6a4:	8f 93       	push	r24
     6a6:	0e 94 a6 05 	call	0xb4c	; 0xb4c <printf>
		printf("Direction: %d\n\r", dir);
     6aa:	1f 92       	push	r1
     6ac:	1f 93       	push	r17
     6ae:	8f e4       	ldi	r24, 0x4F	; 79
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	9f 93       	push	r25
     6b4:	8f 93       	push	r24
     6b6:	0e 94 a6 05 	call	0xb4c	; 0xb4c <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6ba:	2f ef       	ldi	r18, 0xFF	; 255
     6bc:	8f ef       	ldi	r24, 0xFF	; 255
     6be:	9e e0       	ldi	r25, 0x0E	; 14
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	80 40       	sbci	r24, 0x00	; 0
     6c4:	90 40       	sbci	r25, 0x00	; 0
     6c6:	e1 f7       	brne	.-8      	; 0x6c0 <main+0x94>
     6c8:	00 c0       	rjmp	.+0      	; 0x6ca <main+0x9e>
     6ca:	00 00       	nop
     6cc:	8d b7       	in	r24, 0x3d	; 61
     6ce:	9e b7       	in	r25, 0x3e	; 62
     6d0:	0a 96       	adiw	r24, 0x0a	; 10
     6d2:	0f b6       	in	r0, 0x3f	; 63
     6d4:	f8 94       	cli
     6d6:	9e bf       	out	0x3e, r25	; 62
     6d8:	0f be       	out	0x3f, r0	; 63
     6da:	8d bf       	out	0x3d, r24	; 61
     6dc:	cd cf       	rjmp	.-102    	; 0x678 <main+0x4c>

000006de <mcp2515_read>:
    status = spi_read_char();
    PORTB |= (1 << CAN_CS); // Deselect CAN - controller

    return status;

}
     6de:	1f 93       	push	r17
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	18 2f       	mov	r17, r24
     6e6:	eb 01       	movw	r28, r22
     6e8:	88 b3       	in	r24, 0x18	; 24
     6ea:	8f 7e       	andi	r24, 0xEF	; 239
     6ec:	88 bb       	out	0x18, r24	; 24
     6ee:	83 e0       	ldi	r24, 0x03	; 3
     6f0:	0e 94 02 05 	call	0xa04	; 0xa04 <spi_write_char>
     6f4:	81 2f       	mov	r24, r17
     6f6:	0e 94 02 05 	call	0xa04	; 0xa04 <spi_write_char>
     6fa:	0e 94 06 05 	call	0xa0c	; 0xa0c <spi_read_char>
     6fe:	98 b3       	in	r25, 0x18	; 24
     700:	90 61       	ori	r25, 0x10	; 16
     702:	98 bb       	out	0x18, r25	; 24
     704:	88 83       	st	Y, r24
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	1f 91       	pop	r17
     70c:	08 95       	ret

0000070e <mcp2515_reset>:
     70e:	88 b3       	in	r24, 0x18	; 24
     710:	8f 7e       	andi	r24, 0xEF	; 239
     712:	88 bb       	out	0x18, r24	; 24
     714:	80 ec       	ldi	r24, 0xC0	; 192
     716:	0e 94 02 05 	call	0xa04	; 0xa04 <spi_write_char>
     71a:	88 b3       	in	r24, 0x18	; 24
     71c:	80 61       	ori	r24, 0x10	; 16
     71e:	88 bb       	out	0x18, r24	; 24
     720:	08 95       	ret

00000722 <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
     722:	1f 93       	push	r17
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	18 2f       	mov	r17, r24
     72a:	d6 2f       	mov	r29, r22
     72c:	c4 2f       	mov	r28, r20
    PORTB &= ~(1 << CAN_CS); // Select CAN - controller
     72e:	88 b3       	in	r24, 0x18	; 24
     730:	8f 7e       	andi	r24, 0xEF	; 239
     732:	88 bb       	out	0x18, r24	; 24
    spi_write_char(MCP_BITMOD);   //Write read_status bit to SPI
     734:	85 e0       	ldi	r24, 0x05	; 5
     736:	0e 94 02 05 	call	0xa04	; 0xa04 <spi_write_char>
    spi_write_char(address); // Send address
     73a:	81 2f       	mov	r24, r17
     73c:	0e 94 02 05 	call	0xa04	; 0xa04 <spi_write_char>
    spi_write_char(mask); // Send mask
     740:	8d 2f       	mov	r24, r29
     742:	0e 94 02 05 	call	0xa04	; 0xa04 <spi_write_char>
    spi_write_char(data); // Send data
     746:	8c 2f       	mov	r24, r28
     748:	0e 94 02 05 	call	0xa04	; 0xa04 <spi_write_char>
    PORTB |= (1 << CAN_CS); // Deselect CAN - controller
     74c:	88 b3       	in	r24, 0x18	; 24
     74e:	80 61       	ori	r24, 0x10	; 16
     750:	88 bb       	out	0x18, r24	; 24
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	08 95       	ret

0000075a <mcp2515_init>:
#include "MCP2515drv.h"




uint8_t mcp2515_init(){
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	1f 92       	push	r1
     760:	cd b7       	in	r28, 0x3d	; 61
     762:	de b7       	in	r29, 0x3e	; 62
    uint8_t value;
    spi_init_master(); // Initialize SPI
     764:	0e 94 fd 04 	call	0x9fa	; 0x9fa <spi_init_master>
    mcp2515_reset(); // Send reset - command
     768:	0e 94 87 03 	call	0x70e	; 0x70e <mcp2515_reset>
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);
     76c:	40 e4       	ldi	r20, 0x40	; 64
     76e:	60 ee       	ldi	r22, 0xE0	; 224
     770:	8f e0       	ldi	r24, 0x0F	; 15
     772:	0e 94 91 03 	call	0x722	; 0x722 <mcp2515_bit_modify>
    // Self - test
    mcp2515_read(MCP_CANSTAT, &value);
     776:	be 01       	movw	r22, r28
     778:	6f 5f       	subi	r22, 0xFF	; 255
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	8e e0       	ldi	r24, 0x0E	; 14
     77e:	0e 94 6f 03 	call	0x6de	; 0x6de <mcp2515_read>
	printf("value: %d\n\r", value);
     782:	89 81       	ldd	r24, Y+1	; 0x01
     784:	1f 92       	push	r1
     786:	8f 93       	push	r24
     788:	8f e5       	ldi	r24, 0x5F	; 95
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	9f 93       	push	r25
     78e:	8f 93       	push	r24
     790:	0e 94 a6 05 	call	0xb4c	; 0xb4c <printf>
    if ((value & MODE_MASK) != MODE_LOOPBACK) {
     794:	89 81       	ldd	r24, Y+1	; 0x01
     796:	80 7e       	andi	r24, 0xE0	; 224
     798:	0f 90       	pop	r0
     79a:	0f 90       	pop	r0
     79c:	0f 90       	pop	r0
     79e:	0f 90       	pop	r0
     7a0:	80 34       	cpi	r24, 0x40	; 64
     7a2:	51 f0       	breq	.+20     	; 0x7b8 <mcp2515_init+0x5e>
    printf ("MCP2515 is NOT in loopback mode after reset !\n\r");
     7a4:	8b e6       	ldi	r24, 0x6B	; 107
     7a6:	91 e0       	ldi	r25, 0x01	; 1
     7a8:	9f 93       	push	r25
     7aa:	8f 93       	push	r24
     7ac:	0e 94 a6 05 	call	0xb4c	; 0xb4c <printf>
    return 1;
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	01 c0       	rjmp	.+2      	; 0x7ba <mcp2515_init+0x60>
    }
    // More initialization
    return 0;
     7b8:	80 e0       	ldi	r24, 0x00	; 0
}
     7ba:	0f 90       	pop	r0
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	08 95       	ret

000007c2 <menu_print_screen>:

uint8_t menu_main_counter = 0;
uint8_t menu_children_counter = 0;


void menu_print_screen(uint8_t menu_main_counter, uint8_t menu_children_counter){
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
    oled_reset();
     7c6:	0e 94 af 04 	call	0x95e	; 0x95e <oled_reset>
    oled_home();
     7ca:	0e 94 8d 04 	call	0x91a	; 0x91a <oled_home>
	oled_goto_pos(4,1);
     7ce:	61 e0       	ldi	r22, 0x01	; 1
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	84 e0       	ldi	r24, 0x04	; 4
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 82 04 	call	0x904	; 0x904 <oled_goto_pos>
    oled_print_char('>');
     7da:	8e e3       	ldi	r24, 0x3E	; 62
     7dc:	0e 94 c0 04 	call	0x980	; 0x980 <oled_print_char>
	oled_home();
     7e0:	0e 94 8d 04 	call	0x91a	; 0x91a <oled_home>
    for (int i = 0; i < 8; i++){
     7e4:	c0 e0       	ldi	r28, 0x00	; 0
     7e6:	d0 e0       	ldi	r29, 0x00	; 0
     7e8:	15 c0       	rjmp	.+42     	; 0x814 <menu_print_screen+0x52>
        oled_goto_pos(i, 16);
     7ea:	60 e1       	ldi	r22, 0x10	; 16
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	ce 01       	movw	r24, r28
     7f0:	0e 94 82 04 	call	0x904	; 0x904 <oled_goto_pos>
        strcpy_P(buffer, (char *)pgm_read_word(&(menu_main_strings[i])));
     7f4:	fe 01       	movw	r30, r28
     7f6:	ee 0f       	add	r30, r30
     7f8:	ff 1f       	adc	r31, r31
     7fa:	e0 59       	subi	r30, 0x90	; 144
     7fc:	ff 4f       	sbci	r31, 0xFF	; 255
     7fe:	65 91       	lpm	r22, Z+
     800:	74 91       	lpm	r23, Z
     802:	8f e9       	ldi	r24, 0x9F	; 159
     804:	91 e0       	ldi	r25, 0x01	; 1
     806:	0e 94 54 05 	call	0xaa8	; 0xaa8 <strcpy_P>
        oled_print(buffer);
     80a:	8f e9       	ldi	r24, 0x9F	; 159
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	0e 94 df 04 	call	0x9be	; 0x9be <oled_print>
    oled_reset();
    oled_home();
	oled_goto_pos(4,1);
    oled_print_char('>');
	oled_home();
    for (int i = 0; i < 8; i++){
     812:	21 96       	adiw	r28, 0x01	; 1
     814:	c8 30       	cpi	r28, 0x08	; 8
     816:	d1 05       	cpc	r29, r1
     818:	44 f3       	brlt	.-48     	; 0x7ea <menu_print_screen+0x28>
        oled_goto_pos(i, 16);
        strcpy_P(buffer, (char *)pgm_read_word(&(menu_main_strings[i])));
        oled_print(buffer);
    }

}
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	08 95       	ret

00000820 <oled_write_command>:
    for (int i = 0; i < 128; i++) { //For every column write the data to 0 so that the line is cleared
		oled_write_data(0b11111111);
	}
    oled_goto_line(line); //Go back to the 

}
     820:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xe47>
     824:	08 95       	ret

00000826 <oled_write_data>:
     826:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0x1047>
     82a:	08 95       	ret

0000082c <oled_init>:
     82c:	8e ea       	ldi	r24, 0xAE	; 174
     82e:	0e 94 10 04 	call	0x820	; 0x820 <oled_write_command>
     832:	81 ea       	ldi	r24, 0xA1	; 161
     834:	0e 94 10 04 	call	0x820	; 0x820 <oled_write_command>
     838:	8a ed       	ldi	r24, 0xDA	; 218
     83a:	0e 94 10 04 	call	0x820	; 0x820 <oled_write_command>
     83e:	82 e1       	ldi	r24, 0x12	; 18
     840:	0e 94 10 04 	call	0x820	; 0x820 <oled_write_command>
     844:	88 ec       	ldi	r24, 0xC8	; 200
     846:	0e 94 10 04 	call	0x820	; 0x820 <oled_write_command>
     84a:	88 ea       	ldi	r24, 0xA8	; 168
     84c:	0e 94 10 04 	call	0x820	; 0x820 <oled_write_command>
     850:	8f e3       	ldi	r24, 0x3F	; 63
     852:	0e 94 10 04 	call	0x820	; 0x820 <oled_write_command>
     856:	85 ed       	ldi	r24, 0xD5	; 213
     858:	0e 94 10 04 	call	0x820	; 0x820 <oled_write_command>
     85c:	80 e8       	ldi	r24, 0x80	; 128
     85e:	0e 94 10 04 	call	0x820	; 0x820 <oled_write_command>
     862:	81 e8       	ldi	r24, 0x81	; 129
     864:	0e 94 10 04 	call	0x820	; 0x820 <oled_write_command>
     868:	80 e5       	ldi	r24, 0x50	; 80
     86a:	0e 94 10 04 	call	0x820	; 0x820 <oled_write_command>
     86e:	89 ed       	ldi	r24, 0xD9	; 217
     870:	0e 94 10 04 	call	0x820	; 0x820 <oled_write_command>
     874:	81 e2       	ldi	r24, 0x21	; 33
     876:	0e 94 10 04 	call	0x820	; 0x820 <oled_write_command>
     87a:	80 e2       	ldi	r24, 0x20	; 32
     87c:	0e 94 10 04 	call	0x820	; 0x820 <oled_write_command>
     880:	82 e0       	ldi	r24, 0x02	; 2
     882:	0e 94 10 04 	call	0x820	; 0x820 <oled_write_command>
     886:	8b ed       	ldi	r24, 0xDB	; 219
     888:	0e 94 10 04 	call	0x820	; 0x820 <oled_write_command>
     88c:	80 e3       	ldi	r24, 0x30	; 48
     88e:	0e 94 10 04 	call	0x820	; 0x820 <oled_write_command>
     892:	8d ea       	ldi	r24, 0xAD	; 173
     894:	0e 94 10 04 	call	0x820	; 0x820 <oled_write_command>
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	0e 94 10 04 	call	0x820	; 0x820 <oled_write_command>
     89e:	84 ea       	ldi	r24, 0xA4	; 164
     8a0:	0e 94 10 04 	call	0x820	; 0x820 <oled_write_command>
     8a4:	86 ea       	ldi	r24, 0xA6	; 166
     8a6:	0e 94 10 04 	call	0x820	; 0x820 <oled_write_command>
     8aa:	8f ea       	ldi	r24, 0xAF	; 175
     8ac:	0e 94 10 04 	call	0x820	; 0x820 <oled_write_command>
     8b0:	80 e2       	ldi	r24, 0x20	; 32
     8b2:	0e 94 10 04 	call	0x820	; 0x820 <oled_write_command>
     8b6:	82 e0       	ldi	r24, 0x02	; 2
     8b8:	0e 94 10 04 	call	0x820	; 0x820 <oled_write_command>
     8bc:	08 95       	ret

000008be <oled_goto_line>:
     8be:	80 55       	subi	r24, 0x50	; 80
     8c0:	0e 94 10 04 	call	0x820	; 0x820 <oled_write_command>
     8c4:	08 95       	ret

000008c6 <oled_goto_column>:
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	ec 01       	movw	r28, r24
     8cc:	8f 70       	andi	r24, 0x0F	; 15
     8ce:	90 78       	andi	r25, 0x80	; 128
     8d0:	99 23       	and	r25, r25
     8d2:	24 f4       	brge	.+8      	; 0x8dc <oled_goto_column+0x16>
     8d4:	01 97       	sbiw	r24, 0x01	; 1
     8d6:	80 6f       	ori	r24, 0xF0	; 240
     8d8:	9f 6f       	ori	r25, 0xFF	; 255
     8da:	01 96       	adiw	r24, 0x01	; 1
     8dc:	0e 94 10 04 	call	0x820	; 0x820 <oled_write_command>
     8e0:	ce 01       	movw	r24, r28
     8e2:	dd 23       	and	r29, r29
     8e4:	0c f4       	brge	.+2      	; 0x8e8 <oled_goto_column+0x22>
     8e6:	0f 96       	adiw	r24, 0x0f	; 15
     8e8:	95 95       	asr	r25
     8ea:	87 95       	ror	r24
     8ec:	95 95       	asr	r25
     8ee:	87 95       	ror	r24
     8f0:	95 95       	asr	r25
     8f2:	87 95       	ror	r24
     8f4:	95 95       	asr	r25
     8f6:	87 95       	ror	r24
     8f8:	80 5f       	subi	r24, 0xF0	; 240
     8fa:	0e 94 10 04 	call	0x820	; 0x820 <oled_write_command>
     8fe:	df 91       	pop	r29
     900:	cf 91       	pop	r28
     902:	08 95       	ret

00000904 <oled_goto_pos>:
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	eb 01       	movw	r28, r22
     90a:	0e 94 5f 04 	call	0x8be	; 0x8be <oled_goto_line>
     90e:	ce 01       	movw	r24, r28
     910:	0e 94 63 04 	call	0x8c6	; 0x8c6 <oled_goto_column>
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	08 95       	ret

0000091a <oled_home>:
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	70 e0       	ldi	r23, 0x00	; 0
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	0e 94 82 04 	call	0x904	; 0x904 <oled_goto_pos>
     926:	08 95       	ret

00000928 <oled_clear_line>:
void oled_clear_line(int line){
     928:	0f 93       	push	r16
     92a:	1f 93       	push	r17
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	8c 01       	movw	r16, r24
    oled_goto_pos(line, 0); // Go to the right line and start at the first column
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	0e 94 82 04 	call	0x904	; 0x904 <oled_goto_pos>
    for (int i = 0; i < 128; i++) { //For every column write the data to 0 so that the line is cleared
     93a:	c0 e0       	ldi	r28, 0x00	; 0
     93c:	d0 e0       	ldi	r29, 0x00	; 0
     93e:	04 c0       	rjmp	.+8      	; 0x948 <oled_clear_line+0x20>
		oled_write_data(0b00000000);
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	0e 94 13 04 	call	0x826	; 0x826 <oled_write_data>
    oled_goto_line(line); //Go back to the 

}
void oled_clear_line(int line){
    oled_goto_pos(line, 0); // Go to the right line and start at the first column
    for (int i = 0; i < 128; i++) { //For every column write the data to 0 so that the line is cleared
     946:	21 96       	adiw	r28, 0x01	; 1
     948:	c0 38       	cpi	r28, 0x80	; 128
     94a:	d1 05       	cpc	r29, r1
     94c:	cc f3       	brlt	.-14     	; 0x940 <oled_clear_line+0x18>
		oled_write_data(0b00000000);
	}
    oled_goto_line(line); //Go back to the 
     94e:	c8 01       	movw	r24, r16
     950:	0e 94 5f 04 	call	0x8be	; 0x8be <oled_goto_line>


}
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	1f 91       	pop	r17
     95a:	0f 91       	pop	r16
     95c:	08 95       	ret

0000095e <oled_reset>:
    oled_write_command(0x20);
	oled_write_command(0b10);

}

void oled_reset(){
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
    for (int i = 0; i < 8; i++) { //For every column write the data to 0 so that the line is cleared
     962:	c0 e0       	ldi	r28, 0x00	; 0
     964:	d0 e0       	ldi	r29, 0x00	; 0
     966:	04 c0       	rjmp	.+8      	; 0x970 <oled_reset+0x12>
		oled_clear_line(i);
     968:	ce 01       	movw	r24, r28
     96a:	0e 94 94 04 	call	0x928	; 0x928 <oled_clear_line>
	oled_write_command(0b10);

}

void oled_reset(){
    for (int i = 0; i < 8; i++) { //For every column write the data to 0 so that the line is cleared
     96e:	21 96       	adiw	r28, 0x01	; 1
     970:	c8 30       	cpi	r28, 0x08	; 8
     972:	d1 05       	cpc	r29, r1
     974:	cc f3       	brlt	.-14     	; 0x968 <oled_reset+0xa>
		oled_clear_line(i);
	}
    oled_home();
     976:	0e 94 8d 04 	call	0x91a	; 0x91a <oled_home>

}
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	08 95       	ret

00000980 <oled_print_char>:
    oled_goto_line(row);
    oled_goto_column(column);

}

void oled_print_char(char character){
     980:	1f 93       	push	r17
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
    //This is if the page adressing mode
    character = character - 32; //To make it line up with fonts.h since there are no special characters
     986:	10 ee       	ldi	r17, 0xE0	; 224
     988:	18 0f       	add	r17, r24
        for (int i = 0; i < 8; i++) {
     98a:	c0 e0       	ldi	r28, 0x00	; 0
     98c:	d0 e0       	ldi	r29, 0x00	; 0
     98e:	10 c0       	rjmp	.+32     	; 0x9b0 <oled_print_char+0x30>
        char column = pgm_read_byte(&font8[character][i]);
     990:	e1 2f       	mov	r30, r17
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	ee 0f       	add	r30, r30
     996:	ff 1f       	adc	r31, r31
     998:	ee 0f       	add	r30, r30
     99a:	ff 1f       	adc	r31, r31
     99c:	ee 0f       	add	r30, r30
     99e:	ff 1f       	adc	r31, r31
     9a0:	ec 0f       	add	r30, r28
     9a2:	fd 1f       	adc	r31, r29
     9a4:	ef 51       	subi	r30, 0x1F	; 31
     9a6:	ff 4f       	sbci	r31, 0xFF	; 255
     9a8:	84 91       	lpm	r24, Z
        oled_write_data(column);
     9aa:	0e 94 13 04 	call	0x826	; 0x826 <oled_write_data>
}

void oled_print_char(char character){
    //This is if the page adressing mode
    character = character - 32; //To make it line up with fonts.h since there are no special characters
        for (int i = 0; i < 8; i++) {
     9ae:	21 96       	adiw	r28, 0x01	; 1
     9b0:	c8 30       	cpi	r28, 0x08	; 8
     9b2:	d1 05       	cpc	r29, r1
     9b4:	6c f3       	brlt	.-38     	; 0x990 <oled_print_char+0x10>
        char column = pgm_read_byte(&font8[character][i]);
        oled_write_data(column);
  }
}
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	1f 91       	pop	r17
     9bc:	08 95       	ret

000009be <oled_print>:

void oled_print(const char string[]) {
     9be:	0f 93       	push	r16
     9c0:	1f 93       	push	r17
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	8c 01       	movw	r16, r24
  for (int i = 0; i < strlen(string); i++) {
     9c8:	c0 e0       	ldi	r28, 0x00	; 0
     9ca:	d0 e0       	ldi	r29, 0x00	; 0
     9cc:	07 c0       	rjmp	.+14     	; 0x9dc <oled_print+0x1e>
    oled_print_char(string[i]);
     9ce:	f8 01       	movw	r30, r16
     9d0:	ec 0f       	add	r30, r28
     9d2:	fd 1f       	adc	r31, r29
     9d4:	80 81       	ld	r24, Z
     9d6:	0e 94 c0 04 	call	0x980	; 0x980 <oled_print_char>
        oled_write_data(column);
  }
}

void oled_print(const char string[]) {
  for (int i = 0; i < strlen(string); i++) {
     9da:	21 96       	adiw	r28, 0x01	; 1
     9dc:	f8 01       	movw	r30, r16
     9de:	01 90       	ld	r0, Z+
     9e0:	00 20       	and	r0, r0
     9e2:	e9 f7       	brne	.-6      	; 0x9de <oled_print+0x20>
     9e4:	31 97       	sbiw	r30, 0x01	; 1
     9e6:	e0 1b       	sub	r30, r16
     9e8:	f1 0b       	sbc	r31, r17
     9ea:	ce 17       	cp	r28, r30
     9ec:	df 07       	cpc	r29, r31
     9ee:	78 f3       	brcs	.-34     	; 0x9ce <oled_print+0x10>
    oled_print_char(string[i]);
  }
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	1f 91       	pop	r17
     9f6:	0f 91       	pop	r16
     9f8:	08 95       	ret

000009fa <spi_init_master>:
void spi_init_slave(){
    //
    // Set MISO output, all others input
	DDR_SPI = (1<<DD_MISO);
	// Enable SPI
	SPCR = (1<<SPE);
     9fa:	80 ea       	ldi	r24, 0xA0	; 160
     9fc:	87 bb       	out	0x17, r24	; 23
     9fe:	81 e5       	ldi	r24, 0x51	; 81
     a00:	8d b9       	out	0x0d, r24	; 13
     a02:	08 95       	ret

00000a04 <spi_write_char>:
}

void spi_write_char(char character){
    SPDR = character;
     a04:	8f b9       	out	0x0f, r24	; 15
    //Wait for send to complete
    loop_until_bit_is_set(SPSR, SPIF);
     a06:	77 9b       	sbis	0x0e, 7	; 14
     a08:	fe cf       	rjmp	.-4      	; 0xa06 <spi_write_char+0x2>
}
     a0a:	08 95       	ret

00000a0c <spi_read_char>:

char spi_read_char(){
    SPDR = 0xFF;
     a0c:	8f ef       	ldi	r24, 0xFF	; 255
     a0e:	8f b9       	out	0x0f, r24	; 15
	// Wait for reception to complete
    loop_until_bit_is_set(SPSR, SPIF);
     a10:	77 9b       	sbis	0x0e, 7	; 14
     a12:	fe cf       	rjmp	.-4      	; 0xa10 <spi_read_char+0x4>
	// Return char in data register
	return SPDR;
     a14:	8f b1       	in	r24, 0x0f	; 15
}
     a16:	08 95       	ret

00000a18 <XMEM_init>:
	SFIOR |= (1<<XMM2); // Masking P7-P4
}

void XMEM_write(uint8_t data, uint16_t addr){
	volatile char *ext_mem = (char *) BASE_ADDRESS;
	ext_mem[addr]= data;
     a18:	85 b7       	in	r24, 0x35	; 53
     a1a:	80 68       	ori	r24, 0x80	; 128
     a1c:	85 bf       	out	0x35, r24	; 53
     a1e:	80 b7       	in	r24, 0x30	; 48
     a20:	80 62       	ori	r24, 0x20	; 32
     a22:	80 bf       	out	0x30, r24	; 48
     a24:	08 95       	ret

00000a26 <XMEM_read>:
}

uint8_t XMEM_read(uint16_t addr){
	volatile char *ext_mem = (char *) BASE_ADDRESS;
	uint8_t ret_val = ext_mem[addr];
     a26:	90 5f       	subi	r25, 0xF0	; 240
     a28:	fc 01       	movw	r30, r24
     a2a:	80 81       	ld	r24, Z
	return ret_val;
}
     a2c:	08 95       	ret

00000a2e <USART_Transmit>:
#include "UARTdrv.h"

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
     a2e:	5d 9b       	sbis	0x0b, 5	; 11
     a30:	fe cf       	rjmp	.-4      	; 0xa2e <USART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     a32:	8c b9       	out	0x0c, r24	; 12
     a34:	08 95       	ret

00000a36 <USART_Receive>:
}
unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
     a36:	5f 9b       	sbis	0x0b, 7	; 11
     a38:	fe cf       	rjmp	.-4      	; 0xa36 <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR0;
     a3a:	8c b1       	in	r24, 0x0c	; 12
}
     a3c:	08 95       	ret

00000a3e <USART_Init>:
void USART_Init( unsigned int ubrr )
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     a3e:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     a40:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     a42:	88 e1       	ldi	r24, 0x18	; 24
     a44:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     a46:	8e e8       	ldi	r24, 0x8E	; 142
     a48:	80 bd       	out	0x20, r24	; 32
	fdevopen(USART_Transmit,USART_Receive);
     a4a:	6b e1       	ldi	r22, 0x1B	; 27
     a4c:	75 e0       	ldi	r23, 0x05	; 5
     a4e:	87 e1       	ldi	r24, 0x17	; 23
     a50:	95 e0       	ldi	r25, 0x05	; 5
     a52:	0e 94 5b 05 	call	0xab6	; 0xab6 <fdevopen>
     a56:	08 95       	ret

00000a58 <__divmodhi4>:
     a58:	97 fb       	bst	r25, 7
     a5a:	07 2e       	mov	r0, r23
     a5c:	16 f4       	brtc	.+4      	; 0xa62 <__divmodhi4+0xa>
     a5e:	00 94       	com	r0
     a60:	07 d0       	rcall	.+14     	; 0xa70 <__divmodhi4_neg1>
     a62:	77 fd       	sbrc	r23, 7
     a64:	09 d0       	rcall	.+18     	; 0xa78 <__divmodhi4_neg2>
     a66:	0e 94 40 05 	call	0xa80	; 0xa80 <__udivmodhi4>
     a6a:	07 fc       	sbrc	r0, 7
     a6c:	05 d0       	rcall	.+10     	; 0xa78 <__divmodhi4_neg2>
     a6e:	3e f4       	brtc	.+14     	; 0xa7e <__divmodhi4_exit>

00000a70 <__divmodhi4_neg1>:
     a70:	90 95       	com	r25
     a72:	81 95       	neg	r24
     a74:	9f 4f       	sbci	r25, 0xFF	; 255
     a76:	08 95       	ret

00000a78 <__divmodhi4_neg2>:
     a78:	70 95       	com	r23
     a7a:	61 95       	neg	r22
     a7c:	7f 4f       	sbci	r23, 0xFF	; 255

00000a7e <__divmodhi4_exit>:
     a7e:	08 95       	ret

00000a80 <__udivmodhi4>:
     a80:	aa 1b       	sub	r26, r26
     a82:	bb 1b       	sub	r27, r27
     a84:	51 e1       	ldi	r21, 0x11	; 17
     a86:	07 c0       	rjmp	.+14     	; 0xa96 <__udivmodhi4_ep>

00000a88 <__udivmodhi4_loop>:
     a88:	aa 1f       	adc	r26, r26
     a8a:	bb 1f       	adc	r27, r27
     a8c:	a6 17       	cp	r26, r22
     a8e:	b7 07       	cpc	r27, r23
     a90:	10 f0       	brcs	.+4      	; 0xa96 <__udivmodhi4_ep>
     a92:	a6 1b       	sub	r26, r22
     a94:	b7 0b       	sbc	r27, r23

00000a96 <__udivmodhi4_ep>:
     a96:	88 1f       	adc	r24, r24
     a98:	99 1f       	adc	r25, r25
     a9a:	5a 95       	dec	r21
     a9c:	a9 f7       	brne	.-22     	; 0xa88 <__udivmodhi4_loop>
     a9e:	80 95       	com	r24
     aa0:	90 95       	com	r25
     aa2:	bc 01       	movw	r22, r24
     aa4:	cd 01       	movw	r24, r26
     aa6:	08 95       	ret

00000aa8 <strcpy_P>:
     aa8:	fb 01       	movw	r30, r22
     aaa:	dc 01       	movw	r26, r24
     aac:	05 90       	lpm	r0, Z+
     aae:	0d 92       	st	X+, r0
     ab0:	00 20       	and	r0, r0
     ab2:	e1 f7       	brne	.-8      	; 0xaac <strcpy_P+0x4>
     ab4:	08 95       	ret

00000ab6 <fdevopen>:
     ab6:	0f 93       	push	r16
     ab8:	1f 93       	push	r17
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	00 97       	sbiw	r24, 0x00	; 0
     ac0:	31 f4       	brne	.+12     	; 0xace <fdevopen+0x18>
     ac2:	61 15       	cp	r22, r1
     ac4:	71 05       	cpc	r23, r1
     ac6:	19 f4       	brne	.+6      	; 0xace <fdevopen+0x18>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	3a c0       	rjmp	.+116    	; 0xb42 <fdevopen+0x8c>
     ace:	8b 01       	movw	r16, r22
     ad0:	ec 01       	movw	r28, r24
     ad2:	6e e0       	ldi	r22, 0x0E	; 14
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	0e 94 9d 07 	call	0xf3a	; 0xf3a <calloc>
     ade:	fc 01       	movw	r30, r24
     ae0:	89 2b       	or	r24, r25
     ae2:	91 f3       	breq	.-28     	; 0xac8 <fdevopen+0x12>
     ae4:	80 e8       	ldi	r24, 0x80	; 128
     ae6:	83 83       	std	Z+3, r24	; 0x03
     ae8:	01 15       	cp	r16, r1
     aea:	11 05       	cpc	r17, r1
     aec:	71 f0       	breq	.+28     	; 0xb0a <fdevopen+0x54>
     aee:	13 87       	std	Z+11, r17	; 0x0b
     af0:	02 87       	std	Z+10, r16	; 0x0a
     af2:	81 e8       	ldi	r24, 0x81	; 129
     af4:	83 83       	std	Z+3, r24	; 0x03
     af6:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <__iob>
     afa:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <__iob+0x1>
     afe:	89 2b       	or	r24, r25
     b00:	21 f4       	brne	.+8      	; 0xb0a <fdevopen+0x54>
     b02:	f0 93 b0 01 	sts	0x01B0, r31	; 0x8001b0 <__iob+0x1>
     b06:	e0 93 af 01 	sts	0x01AF, r30	; 0x8001af <__iob>
     b0a:	20 97       	sbiw	r28, 0x00	; 0
     b0c:	c9 f0       	breq	.+50     	; 0xb40 <fdevopen+0x8a>
     b0e:	d1 87       	std	Z+9, r29	; 0x09
     b10:	c0 87       	std	Z+8, r28	; 0x08
     b12:	83 81       	ldd	r24, Z+3	; 0x03
     b14:	82 60       	ori	r24, 0x02	; 2
     b16:	83 83       	std	Z+3, r24	; 0x03
     b18:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <__iob+0x2>
     b1c:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <__iob+0x3>
     b20:	89 2b       	or	r24, r25
     b22:	71 f4       	brne	.+28     	; 0xb40 <fdevopen+0x8a>
     b24:	f0 93 b2 01 	sts	0x01B2, r31	; 0x8001b2 <__iob+0x3>
     b28:	e0 93 b1 01 	sts	0x01B1, r30	; 0x8001b1 <__iob+0x2>
     b2c:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <__iob+0x4>
     b30:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <__iob+0x5>
     b34:	89 2b       	or	r24, r25
     b36:	21 f4       	brne	.+8      	; 0xb40 <fdevopen+0x8a>
     b38:	f0 93 b4 01 	sts	0x01B4, r31	; 0x8001b4 <__iob+0x5>
     b3c:	e0 93 b3 01 	sts	0x01B3, r30	; 0x8001b3 <__iob+0x4>
     b40:	cf 01       	movw	r24, r30
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	1f 91       	pop	r17
     b48:	0f 91       	pop	r16
     b4a:	08 95       	ret

00000b4c <printf>:
     b4c:	a0 e0       	ldi	r26, 0x00	; 0
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	ec ea       	ldi	r30, 0xAC	; 172
     b52:	f5 e0       	ldi	r31, 0x05	; 5
     b54:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <__prologue_saves__+0x20>
     b58:	ae 01       	movw	r20, r28
     b5a:	4b 5f       	subi	r20, 0xFB	; 251
     b5c:	5f 4f       	sbci	r21, 0xFF	; 255
     b5e:	fa 01       	movw	r30, r20
     b60:	61 91       	ld	r22, Z+
     b62:	71 91       	ld	r23, Z+
     b64:	af 01       	movw	r20, r30
     b66:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <__iob+0x2>
     b6a:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <__iob+0x3>
     b6e:	0e 94 bc 05 	call	0xb78	; 0xb78 <vfprintf>
     b72:	e2 e0       	ldi	r30, 0x02	; 2
     b74:	0c 94 bd 09 	jmp	0x137a	; 0x137a <__epilogue_restores__+0x20>

00000b78 <vfprintf>:
     b78:	ab e0       	ldi	r26, 0x0B	; 11
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e2 ec       	ldi	r30, 0xC2	; 194
     b7e:	f5 e0       	ldi	r31, 0x05	; 5
     b80:	0c 94 91 09 	jmp	0x1322	; 0x1322 <__prologue_saves__>
     b84:	6c 01       	movw	r12, r24
     b86:	7b 01       	movw	r14, r22
     b88:	8a 01       	movw	r16, r20
     b8a:	fc 01       	movw	r30, r24
     b8c:	17 82       	std	Z+7, r1	; 0x07
     b8e:	16 82       	std	Z+6, r1	; 0x06
     b90:	83 81       	ldd	r24, Z+3	; 0x03
     b92:	81 ff       	sbrs	r24, 1
     b94:	cc c1       	rjmp	.+920    	; 0xf2e <vfprintf+0x3b6>
     b96:	ce 01       	movw	r24, r28
     b98:	01 96       	adiw	r24, 0x01	; 1
     b9a:	3c 01       	movw	r6, r24
     b9c:	f6 01       	movw	r30, r12
     b9e:	93 81       	ldd	r25, Z+3	; 0x03
     ba0:	f7 01       	movw	r30, r14
     ba2:	93 fd       	sbrc	r25, 3
     ba4:	85 91       	lpm	r24, Z+
     ba6:	93 ff       	sbrs	r25, 3
     ba8:	81 91       	ld	r24, Z+
     baa:	7f 01       	movw	r14, r30
     bac:	88 23       	and	r24, r24
     bae:	09 f4       	brne	.+2      	; 0xbb2 <vfprintf+0x3a>
     bb0:	ba c1       	rjmp	.+884    	; 0xf26 <vfprintf+0x3ae>
     bb2:	85 32       	cpi	r24, 0x25	; 37
     bb4:	39 f4       	brne	.+14     	; 0xbc4 <vfprintf+0x4c>
     bb6:	93 fd       	sbrc	r25, 3
     bb8:	85 91       	lpm	r24, Z+
     bba:	93 ff       	sbrs	r25, 3
     bbc:	81 91       	ld	r24, Z+
     bbe:	7f 01       	movw	r14, r30
     bc0:	85 32       	cpi	r24, 0x25	; 37
     bc2:	29 f4       	brne	.+10     	; 0xbce <vfprintf+0x56>
     bc4:	b6 01       	movw	r22, r12
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 f7 08 	call	0x11ee	; 0x11ee <fputc>
     bcc:	e7 cf       	rjmp	.-50     	; 0xb9c <vfprintf+0x24>
     bce:	91 2c       	mov	r9, r1
     bd0:	21 2c       	mov	r2, r1
     bd2:	31 2c       	mov	r3, r1
     bd4:	ff e1       	ldi	r31, 0x1F	; 31
     bd6:	f3 15       	cp	r31, r3
     bd8:	d8 f0       	brcs	.+54     	; 0xc10 <vfprintf+0x98>
     bda:	8b 32       	cpi	r24, 0x2B	; 43
     bdc:	79 f0       	breq	.+30     	; 0xbfc <vfprintf+0x84>
     bde:	38 f4       	brcc	.+14     	; 0xbee <vfprintf+0x76>
     be0:	80 32       	cpi	r24, 0x20	; 32
     be2:	79 f0       	breq	.+30     	; 0xc02 <vfprintf+0x8a>
     be4:	83 32       	cpi	r24, 0x23	; 35
     be6:	a1 f4       	brne	.+40     	; 0xc10 <vfprintf+0x98>
     be8:	23 2d       	mov	r18, r3
     bea:	20 61       	ori	r18, 0x10	; 16
     bec:	1d c0       	rjmp	.+58     	; 0xc28 <vfprintf+0xb0>
     bee:	8d 32       	cpi	r24, 0x2D	; 45
     bf0:	61 f0       	breq	.+24     	; 0xc0a <vfprintf+0x92>
     bf2:	80 33       	cpi	r24, 0x30	; 48
     bf4:	69 f4       	brne	.+26     	; 0xc10 <vfprintf+0x98>
     bf6:	23 2d       	mov	r18, r3
     bf8:	21 60       	ori	r18, 0x01	; 1
     bfa:	16 c0       	rjmp	.+44     	; 0xc28 <vfprintf+0xb0>
     bfc:	83 2d       	mov	r24, r3
     bfe:	82 60       	ori	r24, 0x02	; 2
     c00:	38 2e       	mov	r3, r24
     c02:	e3 2d       	mov	r30, r3
     c04:	e4 60       	ori	r30, 0x04	; 4
     c06:	3e 2e       	mov	r3, r30
     c08:	2a c0       	rjmp	.+84     	; 0xc5e <vfprintf+0xe6>
     c0a:	f3 2d       	mov	r31, r3
     c0c:	f8 60       	ori	r31, 0x08	; 8
     c0e:	1d c0       	rjmp	.+58     	; 0xc4a <vfprintf+0xd2>
     c10:	37 fc       	sbrc	r3, 7
     c12:	2d c0       	rjmp	.+90     	; 0xc6e <vfprintf+0xf6>
     c14:	20 ed       	ldi	r18, 0xD0	; 208
     c16:	28 0f       	add	r18, r24
     c18:	2a 30       	cpi	r18, 0x0A	; 10
     c1a:	40 f0       	brcs	.+16     	; 0xc2c <vfprintf+0xb4>
     c1c:	8e 32       	cpi	r24, 0x2E	; 46
     c1e:	b9 f4       	brne	.+46     	; 0xc4e <vfprintf+0xd6>
     c20:	36 fc       	sbrc	r3, 6
     c22:	81 c1       	rjmp	.+770    	; 0xf26 <vfprintf+0x3ae>
     c24:	23 2d       	mov	r18, r3
     c26:	20 64       	ori	r18, 0x40	; 64
     c28:	32 2e       	mov	r3, r18
     c2a:	19 c0       	rjmp	.+50     	; 0xc5e <vfprintf+0xe6>
     c2c:	36 fe       	sbrs	r3, 6
     c2e:	06 c0       	rjmp	.+12     	; 0xc3c <vfprintf+0xc4>
     c30:	8a e0       	ldi	r24, 0x0A	; 10
     c32:	98 9e       	mul	r9, r24
     c34:	20 0d       	add	r18, r0
     c36:	11 24       	eor	r1, r1
     c38:	92 2e       	mov	r9, r18
     c3a:	11 c0       	rjmp	.+34     	; 0xc5e <vfprintf+0xe6>
     c3c:	ea e0       	ldi	r30, 0x0A	; 10
     c3e:	2e 9e       	mul	r2, r30
     c40:	20 0d       	add	r18, r0
     c42:	11 24       	eor	r1, r1
     c44:	22 2e       	mov	r2, r18
     c46:	f3 2d       	mov	r31, r3
     c48:	f0 62       	ori	r31, 0x20	; 32
     c4a:	3f 2e       	mov	r3, r31
     c4c:	08 c0       	rjmp	.+16     	; 0xc5e <vfprintf+0xe6>
     c4e:	8c 36       	cpi	r24, 0x6C	; 108
     c50:	21 f4       	brne	.+8      	; 0xc5a <vfprintf+0xe2>
     c52:	83 2d       	mov	r24, r3
     c54:	80 68       	ori	r24, 0x80	; 128
     c56:	38 2e       	mov	r3, r24
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <vfprintf+0xe6>
     c5a:	88 36       	cpi	r24, 0x68	; 104
     c5c:	41 f4       	brne	.+16     	; 0xc6e <vfprintf+0xf6>
     c5e:	f7 01       	movw	r30, r14
     c60:	93 fd       	sbrc	r25, 3
     c62:	85 91       	lpm	r24, Z+
     c64:	93 ff       	sbrs	r25, 3
     c66:	81 91       	ld	r24, Z+
     c68:	7f 01       	movw	r14, r30
     c6a:	81 11       	cpse	r24, r1
     c6c:	b3 cf       	rjmp	.-154    	; 0xbd4 <vfprintf+0x5c>
     c6e:	98 2f       	mov	r25, r24
     c70:	9f 7d       	andi	r25, 0xDF	; 223
     c72:	95 54       	subi	r25, 0x45	; 69
     c74:	93 30       	cpi	r25, 0x03	; 3
     c76:	28 f4       	brcc	.+10     	; 0xc82 <vfprintf+0x10a>
     c78:	0c 5f       	subi	r16, 0xFC	; 252
     c7a:	1f 4f       	sbci	r17, 0xFF	; 255
     c7c:	9f e3       	ldi	r25, 0x3F	; 63
     c7e:	99 83       	std	Y+1, r25	; 0x01
     c80:	0d c0       	rjmp	.+26     	; 0xc9c <vfprintf+0x124>
     c82:	83 36       	cpi	r24, 0x63	; 99
     c84:	31 f0       	breq	.+12     	; 0xc92 <vfprintf+0x11a>
     c86:	83 37       	cpi	r24, 0x73	; 115
     c88:	71 f0       	breq	.+28     	; 0xca6 <vfprintf+0x12e>
     c8a:	83 35       	cpi	r24, 0x53	; 83
     c8c:	09 f0       	breq	.+2      	; 0xc90 <vfprintf+0x118>
     c8e:	59 c0       	rjmp	.+178    	; 0xd42 <vfprintf+0x1ca>
     c90:	21 c0       	rjmp	.+66     	; 0xcd4 <vfprintf+0x15c>
     c92:	f8 01       	movw	r30, r16
     c94:	80 81       	ld	r24, Z
     c96:	89 83       	std	Y+1, r24	; 0x01
     c98:	0e 5f       	subi	r16, 0xFE	; 254
     c9a:	1f 4f       	sbci	r17, 0xFF	; 255
     c9c:	88 24       	eor	r8, r8
     c9e:	83 94       	inc	r8
     ca0:	91 2c       	mov	r9, r1
     ca2:	53 01       	movw	r10, r6
     ca4:	13 c0       	rjmp	.+38     	; 0xccc <vfprintf+0x154>
     ca6:	28 01       	movw	r4, r16
     ca8:	f2 e0       	ldi	r31, 0x02	; 2
     caa:	4f 0e       	add	r4, r31
     cac:	51 1c       	adc	r5, r1
     cae:	f8 01       	movw	r30, r16
     cb0:	a0 80       	ld	r10, Z
     cb2:	b1 80       	ldd	r11, Z+1	; 0x01
     cb4:	36 fe       	sbrs	r3, 6
     cb6:	03 c0       	rjmp	.+6      	; 0xcbe <vfprintf+0x146>
     cb8:	69 2d       	mov	r22, r9
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <vfprintf+0x14a>
     cbe:	6f ef       	ldi	r22, 0xFF	; 255
     cc0:	7f ef       	ldi	r23, 0xFF	; 255
     cc2:	c5 01       	movw	r24, r10
     cc4:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <strnlen>
     cc8:	4c 01       	movw	r8, r24
     cca:	82 01       	movw	r16, r4
     ccc:	f3 2d       	mov	r31, r3
     cce:	ff 77       	andi	r31, 0x7F	; 127
     cd0:	3f 2e       	mov	r3, r31
     cd2:	16 c0       	rjmp	.+44     	; 0xd00 <vfprintf+0x188>
     cd4:	28 01       	movw	r4, r16
     cd6:	22 e0       	ldi	r18, 0x02	; 2
     cd8:	42 0e       	add	r4, r18
     cda:	51 1c       	adc	r5, r1
     cdc:	f8 01       	movw	r30, r16
     cde:	a0 80       	ld	r10, Z
     ce0:	b1 80       	ldd	r11, Z+1	; 0x01
     ce2:	36 fe       	sbrs	r3, 6
     ce4:	03 c0       	rjmp	.+6      	; 0xcec <vfprintf+0x174>
     ce6:	69 2d       	mov	r22, r9
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <vfprintf+0x178>
     cec:	6f ef       	ldi	r22, 0xFF	; 255
     cee:	7f ef       	ldi	r23, 0xFF	; 255
     cf0:	c5 01       	movw	r24, r10
     cf2:	0e 94 da 08 	call	0x11b4	; 0x11b4 <strnlen_P>
     cf6:	4c 01       	movw	r8, r24
     cf8:	f3 2d       	mov	r31, r3
     cfa:	f0 68       	ori	r31, 0x80	; 128
     cfc:	3f 2e       	mov	r3, r31
     cfe:	82 01       	movw	r16, r4
     d00:	33 fc       	sbrc	r3, 3
     d02:	1b c0       	rjmp	.+54     	; 0xd3a <vfprintf+0x1c2>
     d04:	82 2d       	mov	r24, r2
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	88 16       	cp	r8, r24
     d0a:	99 06       	cpc	r9, r25
     d0c:	b0 f4       	brcc	.+44     	; 0xd3a <vfprintf+0x1c2>
     d0e:	b6 01       	movw	r22, r12
     d10:	80 e2       	ldi	r24, 0x20	; 32
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	0e 94 f7 08 	call	0x11ee	; 0x11ee <fputc>
     d18:	2a 94       	dec	r2
     d1a:	f4 cf       	rjmp	.-24     	; 0xd04 <vfprintf+0x18c>
     d1c:	f5 01       	movw	r30, r10
     d1e:	37 fc       	sbrc	r3, 7
     d20:	85 91       	lpm	r24, Z+
     d22:	37 fe       	sbrs	r3, 7
     d24:	81 91       	ld	r24, Z+
     d26:	5f 01       	movw	r10, r30
     d28:	b6 01       	movw	r22, r12
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <fputc>
     d30:	21 10       	cpse	r2, r1
     d32:	2a 94       	dec	r2
     d34:	21 e0       	ldi	r18, 0x01	; 1
     d36:	82 1a       	sub	r8, r18
     d38:	91 08       	sbc	r9, r1
     d3a:	81 14       	cp	r8, r1
     d3c:	91 04       	cpc	r9, r1
     d3e:	71 f7       	brne	.-36     	; 0xd1c <vfprintf+0x1a4>
     d40:	e8 c0       	rjmp	.+464    	; 0xf12 <vfprintf+0x39a>
     d42:	84 36       	cpi	r24, 0x64	; 100
     d44:	11 f0       	breq	.+4      	; 0xd4a <vfprintf+0x1d2>
     d46:	89 36       	cpi	r24, 0x69	; 105
     d48:	41 f5       	brne	.+80     	; 0xd9a <vfprintf+0x222>
     d4a:	f8 01       	movw	r30, r16
     d4c:	37 fe       	sbrs	r3, 7
     d4e:	07 c0       	rjmp	.+14     	; 0xd5e <vfprintf+0x1e6>
     d50:	60 81       	ld	r22, Z
     d52:	71 81       	ldd	r23, Z+1	; 0x01
     d54:	82 81       	ldd	r24, Z+2	; 0x02
     d56:	93 81       	ldd	r25, Z+3	; 0x03
     d58:	0c 5f       	subi	r16, 0xFC	; 252
     d5a:	1f 4f       	sbci	r17, 0xFF	; 255
     d5c:	08 c0       	rjmp	.+16     	; 0xd6e <vfprintf+0x1f6>
     d5e:	60 81       	ld	r22, Z
     d60:	71 81       	ldd	r23, Z+1	; 0x01
     d62:	07 2e       	mov	r0, r23
     d64:	00 0c       	add	r0, r0
     d66:	88 0b       	sbc	r24, r24
     d68:	99 0b       	sbc	r25, r25
     d6a:	0e 5f       	subi	r16, 0xFE	; 254
     d6c:	1f 4f       	sbci	r17, 0xFF	; 255
     d6e:	f3 2d       	mov	r31, r3
     d70:	ff 76       	andi	r31, 0x6F	; 111
     d72:	3f 2e       	mov	r3, r31
     d74:	97 ff       	sbrs	r25, 7
     d76:	09 c0       	rjmp	.+18     	; 0xd8a <vfprintf+0x212>
     d78:	90 95       	com	r25
     d7a:	80 95       	com	r24
     d7c:	70 95       	com	r23
     d7e:	61 95       	neg	r22
     d80:	7f 4f       	sbci	r23, 0xFF	; 255
     d82:	8f 4f       	sbci	r24, 0xFF	; 255
     d84:	9f 4f       	sbci	r25, 0xFF	; 255
     d86:	f0 68       	ori	r31, 0x80	; 128
     d88:	3f 2e       	mov	r3, r31
     d8a:	2a e0       	ldi	r18, 0x0A	; 10
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	a3 01       	movw	r20, r6
     d90:	0e 94 33 09 	call	0x1266	; 0x1266 <__ultoa_invert>
     d94:	88 2e       	mov	r8, r24
     d96:	86 18       	sub	r8, r6
     d98:	45 c0       	rjmp	.+138    	; 0xe24 <vfprintf+0x2ac>
     d9a:	85 37       	cpi	r24, 0x75	; 117
     d9c:	31 f4       	brne	.+12     	; 0xdaa <vfprintf+0x232>
     d9e:	23 2d       	mov	r18, r3
     da0:	2f 7e       	andi	r18, 0xEF	; 239
     da2:	b2 2e       	mov	r11, r18
     da4:	2a e0       	ldi	r18, 0x0A	; 10
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	25 c0       	rjmp	.+74     	; 0xdf4 <vfprintf+0x27c>
     daa:	93 2d       	mov	r25, r3
     dac:	99 7f       	andi	r25, 0xF9	; 249
     dae:	b9 2e       	mov	r11, r25
     db0:	8f 36       	cpi	r24, 0x6F	; 111
     db2:	c1 f0       	breq	.+48     	; 0xde4 <vfprintf+0x26c>
     db4:	18 f4       	brcc	.+6      	; 0xdbc <vfprintf+0x244>
     db6:	88 35       	cpi	r24, 0x58	; 88
     db8:	79 f0       	breq	.+30     	; 0xdd8 <vfprintf+0x260>
     dba:	b5 c0       	rjmp	.+362    	; 0xf26 <vfprintf+0x3ae>
     dbc:	80 37       	cpi	r24, 0x70	; 112
     dbe:	19 f0       	breq	.+6      	; 0xdc6 <vfprintf+0x24e>
     dc0:	88 37       	cpi	r24, 0x78	; 120
     dc2:	21 f0       	breq	.+8      	; 0xdcc <vfprintf+0x254>
     dc4:	b0 c0       	rjmp	.+352    	; 0xf26 <vfprintf+0x3ae>
     dc6:	e9 2f       	mov	r30, r25
     dc8:	e0 61       	ori	r30, 0x10	; 16
     dca:	be 2e       	mov	r11, r30
     dcc:	b4 fe       	sbrs	r11, 4
     dce:	0d c0       	rjmp	.+26     	; 0xdea <vfprintf+0x272>
     dd0:	fb 2d       	mov	r31, r11
     dd2:	f4 60       	ori	r31, 0x04	; 4
     dd4:	bf 2e       	mov	r11, r31
     dd6:	09 c0       	rjmp	.+18     	; 0xdea <vfprintf+0x272>
     dd8:	34 fe       	sbrs	r3, 4
     dda:	0a c0       	rjmp	.+20     	; 0xdf0 <vfprintf+0x278>
     ddc:	29 2f       	mov	r18, r25
     dde:	26 60       	ori	r18, 0x06	; 6
     de0:	b2 2e       	mov	r11, r18
     de2:	06 c0       	rjmp	.+12     	; 0xdf0 <vfprintf+0x278>
     de4:	28 e0       	ldi	r18, 0x08	; 8
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	05 c0       	rjmp	.+10     	; 0xdf4 <vfprintf+0x27c>
     dea:	20 e1       	ldi	r18, 0x10	; 16
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <vfprintf+0x27c>
     df0:	20 e1       	ldi	r18, 0x10	; 16
     df2:	32 e0       	ldi	r19, 0x02	; 2
     df4:	f8 01       	movw	r30, r16
     df6:	b7 fe       	sbrs	r11, 7
     df8:	07 c0       	rjmp	.+14     	; 0xe08 <vfprintf+0x290>
     dfa:	60 81       	ld	r22, Z
     dfc:	71 81       	ldd	r23, Z+1	; 0x01
     dfe:	82 81       	ldd	r24, Z+2	; 0x02
     e00:	93 81       	ldd	r25, Z+3	; 0x03
     e02:	0c 5f       	subi	r16, 0xFC	; 252
     e04:	1f 4f       	sbci	r17, 0xFF	; 255
     e06:	06 c0       	rjmp	.+12     	; 0xe14 <vfprintf+0x29c>
     e08:	60 81       	ld	r22, Z
     e0a:	71 81       	ldd	r23, Z+1	; 0x01
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	0e 5f       	subi	r16, 0xFE	; 254
     e12:	1f 4f       	sbci	r17, 0xFF	; 255
     e14:	a3 01       	movw	r20, r6
     e16:	0e 94 33 09 	call	0x1266	; 0x1266 <__ultoa_invert>
     e1a:	88 2e       	mov	r8, r24
     e1c:	86 18       	sub	r8, r6
     e1e:	fb 2d       	mov	r31, r11
     e20:	ff 77       	andi	r31, 0x7F	; 127
     e22:	3f 2e       	mov	r3, r31
     e24:	36 fe       	sbrs	r3, 6
     e26:	0d c0       	rjmp	.+26     	; 0xe42 <vfprintf+0x2ca>
     e28:	23 2d       	mov	r18, r3
     e2a:	2e 7f       	andi	r18, 0xFE	; 254
     e2c:	a2 2e       	mov	r10, r18
     e2e:	89 14       	cp	r8, r9
     e30:	58 f4       	brcc	.+22     	; 0xe48 <vfprintf+0x2d0>
     e32:	34 fe       	sbrs	r3, 4
     e34:	0b c0       	rjmp	.+22     	; 0xe4c <vfprintf+0x2d4>
     e36:	32 fc       	sbrc	r3, 2
     e38:	09 c0       	rjmp	.+18     	; 0xe4c <vfprintf+0x2d4>
     e3a:	83 2d       	mov	r24, r3
     e3c:	8e 7e       	andi	r24, 0xEE	; 238
     e3e:	a8 2e       	mov	r10, r24
     e40:	05 c0       	rjmp	.+10     	; 0xe4c <vfprintf+0x2d4>
     e42:	b8 2c       	mov	r11, r8
     e44:	a3 2c       	mov	r10, r3
     e46:	03 c0       	rjmp	.+6      	; 0xe4e <vfprintf+0x2d6>
     e48:	b8 2c       	mov	r11, r8
     e4a:	01 c0       	rjmp	.+2      	; 0xe4e <vfprintf+0x2d6>
     e4c:	b9 2c       	mov	r11, r9
     e4e:	a4 fe       	sbrs	r10, 4
     e50:	0f c0       	rjmp	.+30     	; 0xe70 <vfprintf+0x2f8>
     e52:	fe 01       	movw	r30, r28
     e54:	e8 0d       	add	r30, r8
     e56:	f1 1d       	adc	r31, r1
     e58:	80 81       	ld	r24, Z
     e5a:	80 33       	cpi	r24, 0x30	; 48
     e5c:	21 f4       	brne	.+8      	; 0xe66 <vfprintf+0x2ee>
     e5e:	9a 2d       	mov	r25, r10
     e60:	99 7e       	andi	r25, 0xE9	; 233
     e62:	a9 2e       	mov	r10, r25
     e64:	09 c0       	rjmp	.+18     	; 0xe78 <vfprintf+0x300>
     e66:	a2 fe       	sbrs	r10, 2
     e68:	06 c0       	rjmp	.+12     	; 0xe76 <vfprintf+0x2fe>
     e6a:	b3 94       	inc	r11
     e6c:	b3 94       	inc	r11
     e6e:	04 c0       	rjmp	.+8      	; 0xe78 <vfprintf+0x300>
     e70:	8a 2d       	mov	r24, r10
     e72:	86 78       	andi	r24, 0x86	; 134
     e74:	09 f0       	breq	.+2      	; 0xe78 <vfprintf+0x300>
     e76:	b3 94       	inc	r11
     e78:	a3 fc       	sbrc	r10, 3
     e7a:	11 c0       	rjmp	.+34     	; 0xe9e <vfprintf+0x326>
     e7c:	a0 fe       	sbrs	r10, 0
     e7e:	06 c0       	rjmp	.+12     	; 0xe8c <vfprintf+0x314>
     e80:	b2 14       	cp	r11, r2
     e82:	88 f4       	brcc	.+34     	; 0xea6 <vfprintf+0x32e>
     e84:	28 0c       	add	r2, r8
     e86:	92 2c       	mov	r9, r2
     e88:	9b 18       	sub	r9, r11
     e8a:	0e c0       	rjmp	.+28     	; 0xea8 <vfprintf+0x330>
     e8c:	b2 14       	cp	r11, r2
     e8e:	60 f4       	brcc	.+24     	; 0xea8 <vfprintf+0x330>
     e90:	b6 01       	movw	r22, r12
     e92:	80 e2       	ldi	r24, 0x20	; 32
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	0e 94 f7 08 	call	0x11ee	; 0x11ee <fputc>
     e9a:	b3 94       	inc	r11
     e9c:	f7 cf       	rjmp	.-18     	; 0xe8c <vfprintf+0x314>
     e9e:	b2 14       	cp	r11, r2
     ea0:	18 f4       	brcc	.+6      	; 0xea8 <vfprintf+0x330>
     ea2:	2b 18       	sub	r2, r11
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <vfprintf+0x332>
     ea6:	98 2c       	mov	r9, r8
     ea8:	21 2c       	mov	r2, r1
     eaa:	a4 fe       	sbrs	r10, 4
     eac:	10 c0       	rjmp	.+32     	; 0xece <vfprintf+0x356>
     eae:	b6 01       	movw	r22, r12
     eb0:	80 e3       	ldi	r24, 0x30	; 48
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	0e 94 f7 08 	call	0x11ee	; 0x11ee <fputc>
     eb8:	a2 fe       	sbrs	r10, 2
     eba:	17 c0       	rjmp	.+46     	; 0xeea <vfprintf+0x372>
     ebc:	a1 fc       	sbrc	r10, 1
     ebe:	03 c0       	rjmp	.+6      	; 0xec6 <vfprintf+0x34e>
     ec0:	88 e7       	ldi	r24, 0x78	; 120
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <vfprintf+0x352>
     ec6:	88 e5       	ldi	r24, 0x58	; 88
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	b6 01       	movw	r22, r12
     ecc:	0c c0       	rjmp	.+24     	; 0xee6 <vfprintf+0x36e>
     ece:	8a 2d       	mov	r24, r10
     ed0:	86 78       	andi	r24, 0x86	; 134
     ed2:	59 f0       	breq	.+22     	; 0xeea <vfprintf+0x372>
     ed4:	a1 fe       	sbrs	r10, 1
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <vfprintf+0x364>
     ed8:	8b e2       	ldi	r24, 0x2B	; 43
     eda:	01 c0       	rjmp	.+2      	; 0xede <vfprintf+0x366>
     edc:	80 e2       	ldi	r24, 0x20	; 32
     ede:	a7 fc       	sbrc	r10, 7
     ee0:	8d e2       	ldi	r24, 0x2D	; 45
     ee2:	b6 01       	movw	r22, r12
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	0e 94 f7 08 	call	0x11ee	; 0x11ee <fputc>
     eea:	89 14       	cp	r8, r9
     eec:	38 f4       	brcc	.+14     	; 0xefc <vfprintf+0x384>
     eee:	b6 01       	movw	r22, r12
     ef0:	80 e3       	ldi	r24, 0x30	; 48
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	0e 94 f7 08 	call	0x11ee	; 0x11ee <fputc>
     ef8:	9a 94       	dec	r9
     efa:	f7 cf       	rjmp	.-18     	; 0xeea <vfprintf+0x372>
     efc:	8a 94       	dec	r8
     efe:	f3 01       	movw	r30, r6
     f00:	e8 0d       	add	r30, r8
     f02:	f1 1d       	adc	r31, r1
     f04:	80 81       	ld	r24, Z
     f06:	b6 01       	movw	r22, r12
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <fputc>
     f0e:	81 10       	cpse	r8, r1
     f10:	f5 cf       	rjmp	.-22     	; 0xefc <vfprintf+0x384>
     f12:	22 20       	and	r2, r2
     f14:	09 f4       	brne	.+2      	; 0xf18 <vfprintf+0x3a0>
     f16:	42 ce       	rjmp	.-892    	; 0xb9c <vfprintf+0x24>
     f18:	b6 01       	movw	r22, r12
     f1a:	80 e2       	ldi	r24, 0x20	; 32
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <fputc>
     f22:	2a 94       	dec	r2
     f24:	f6 cf       	rjmp	.-20     	; 0xf12 <vfprintf+0x39a>
     f26:	f6 01       	movw	r30, r12
     f28:	86 81       	ldd	r24, Z+6	; 0x06
     f2a:	97 81       	ldd	r25, Z+7	; 0x07
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <vfprintf+0x3ba>
     f2e:	8f ef       	ldi	r24, 0xFF	; 255
     f30:	9f ef       	ldi	r25, 0xFF	; 255
     f32:	2b 96       	adiw	r28, 0x0b	; 11
     f34:	e2 e1       	ldi	r30, 0x12	; 18
     f36:	0c 94 ad 09 	jmp	0x135a	; 0x135a <__epilogue_restores__>

00000f3a <calloc>:
     f3a:	0f 93       	push	r16
     f3c:	1f 93       	push	r17
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	86 9f       	mul	r24, r22
     f44:	80 01       	movw	r16, r0
     f46:	87 9f       	mul	r24, r23
     f48:	10 0d       	add	r17, r0
     f4a:	96 9f       	mul	r25, r22
     f4c:	10 0d       	add	r17, r0
     f4e:	11 24       	eor	r1, r1
     f50:	c8 01       	movw	r24, r16
     f52:	0e 94 b9 07 	call	0xf72	; 0xf72 <malloc>
     f56:	ec 01       	movw	r28, r24
     f58:	00 97       	sbiw	r24, 0x00	; 0
     f5a:	29 f0       	breq	.+10     	; 0xf66 <calloc+0x2c>
     f5c:	a8 01       	movw	r20, r16
     f5e:	60 e0       	ldi	r22, 0x00	; 0
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	0e 94 e5 08 	call	0x11ca	; 0x11ca <memset>
     f66:	ce 01       	movw	r24, r28
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
     f70:	08 95       	ret

00000f72 <malloc>:
     f72:	0f 93       	push	r16
     f74:	1f 93       	push	r17
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
     f7a:	82 30       	cpi	r24, 0x02	; 2
     f7c:	91 05       	cpc	r25, r1
     f7e:	10 f4       	brcc	.+4      	; 0xf84 <malloc+0x12>
     f80:	82 e0       	ldi	r24, 0x02	; 2
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	e0 91 b7 01 	lds	r30, 0x01B7	; 0x8001b7 <__flp>
     f88:	f0 91 b8 01 	lds	r31, 0x01B8	; 0x8001b8 <__flp+0x1>
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	a0 e0       	ldi	r26, 0x00	; 0
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	30 97       	sbiw	r30, 0x00	; 0
     f96:	19 f1       	breq	.+70     	; 0xfde <malloc+0x6c>
     f98:	40 81       	ld	r20, Z
     f9a:	51 81       	ldd	r21, Z+1	; 0x01
     f9c:	02 81       	ldd	r16, Z+2	; 0x02
     f9e:	13 81       	ldd	r17, Z+3	; 0x03
     fa0:	48 17       	cp	r20, r24
     fa2:	59 07       	cpc	r21, r25
     fa4:	c8 f0       	brcs	.+50     	; 0xfd8 <malloc+0x66>
     fa6:	84 17       	cp	r24, r20
     fa8:	95 07       	cpc	r25, r21
     faa:	69 f4       	brne	.+26     	; 0xfc6 <malloc+0x54>
     fac:	10 97       	sbiw	r26, 0x00	; 0
     fae:	31 f0       	breq	.+12     	; 0xfbc <malloc+0x4a>
     fb0:	12 96       	adiw	r26, 0x02	; 2
     fb2:	0c 93       	st	X, r16
     fb4:	12 97       	sbiw	r26, 0x02	; 2
     fb6:	13 96       	adiw	r26, 0x03	; 3
     fb8:	1c 93       	st	X, r17
     fba:	27 c0       	rjmp	.+78     	; 0x100a <malloc+0x98>
     fbc:	00 93 b7 01 	sts	0x01B7, r16	; 0x8001b7 <__flp>
     fc0:	10 93 b8 01 	sts	0x01B8, r17	; 0x8001b8 <__flp+0x1>
     fc4:	22 c0       	rjmp	.+68     	; 0x100a <malloc+0x98>
     fc6:	21 15       	cp	r18, r1
     fc8:	31 05       	cpc	r19, r1
     fca:	19 f0       	breq	.+6      	; 0xfd2 <malloc+0x60>
     fcc:	42 17       	cp	r20, r18
     fce:	53 07       	cpc	r21, r19
     fd0:	18 f4       	brcc	.+6      	; 0xfd8 <malloc+0x66>
     fd2:	9a 01       	movw	r18, r20
     fd4:	bd 01       	movw	r22, r26
     fd6:	ef 01       	movw	r28, r30
     fd8:	df 01       	movw	r26, r30
     fda:	f8 01       	movw	r30, r16
     fdc:	db cf       	rjmp	.-74     	; 0xf94 <malloc+0x22>
     fde:	21 15       	cp	r18, r1
     fe0:	31 05       	cpc	r19, r1
     fe2:	f9 f0       	breq	.+62     	; 0x1022 <malloc+0xb0>
     fe4:	28 1b       	sub	r18, r24
     fe6:	39 0b       	sbc	r19, r25
     fe8:	24 30       	cpi	r18, 0x04	; 4
     fea:	31 05       	cpc	r19, r1
     fec:	80 f4       	brcc	.+32     	; 0x100e <malloc+0x9c>
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	9b 81       	ldd	r25, Y+3	; 0x03
     ff2:	61 15       	cp	r22, r1
     ff4:	71 05       	cpc	r23, r1
     ff6:	21 f0       	breq	.+8      	; 0x1000 <malloc+0x8e>
     ff8:	fb 01       	movw	r30, r22
     ffa:	93 83       	std	Z+3, r25	; 0x03
     ffc:	82 83       	std	Z+2, r24	; 0x02
     ffe:	04 c0       	rjmp	.+8      	; 0x1008 <malloc+0x96>
    1000:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <__flp+0x1>
    1004:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <__flp>
    1008:	fe 01       	movw	r30, r28
    100a:	32 96       	adiw	r30, 0x02	; 2
    100c:	44 c0       	rjmp	.+136    	; 0x1096 <malloc+0x124>
    100e:	fe 01       	movw	r30, r28
    1010:	e2 0f       	add	r30, r18
    1012:	f3 1f       	adc	r31, r19
    1014:	81 93       	st	Z+, r24
    1016:	91 93       	st	Z+, r25
    1018:	22 50       	subi	r18, 0x02	; 2
    101a:	31 09       	sbc	r19, r1
    101c:	39 83       	std	Y+1, r19	; 0x01
    101e:	28 83       	st	Y, r18
    1020:	3a c0       	rjmp	.+116    	; 0x1096 <malloc+0x124>
    1022:	20 91 b5 01 	lds	r18, 0x01B5	; 0x8001b5 <__brkval>
    1026:	30 91 b6 01 	lds	r19, 0x01B6	; 0x8001b6 <__brkval+0x1>
    102a:	23 2b       	or	r18, r19
    102c:	41 f4       	brne	.+16     	; 0x103e <malloc+0xcc>
    102e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1032:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1036:	30 93 b6 01 	sts	0x01B6, r19	; 0x8001b6 <__brkval+0x1>
    103a:	20 93 b5 01 	sts	0x01B5, r18	; 0x8001b5 <__brkval>
    103e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1042:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1046:	21 15       	cp	r18, r1
    1048:	31 05       	cpc	r19, r1
    104a:	41 f4       	brne	.+16     	; 0x105c <malloc+0xea>
    104c:	2d b7       	in	r18, 0x3d	; 61
    104e:	3e b7       	in	r19, 0x3e	; 62
    1050:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1054:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1058:	24 1b       	sub	r18, r20
    105a:	35 0b       	sbc	r19, r21
    105c:	e0 91 b5 01 	lds	r30, 0x01B5	; 0x8001b5 <__brkval>
    1060:	f0 91 b6 01 	lds	r31, 0x01B6	; 0x8001b6 <__brkval+0x1>
    1064:	e2 17       	cp	r30, r18
    1066:	f3 07       	cpc	r31, r19
    1068:	a0 f4       	brcc	.+40     	; 0x1092 <malloc+0x120>
    106a:	2e 1b       	sub	r18, r30
    106c:	3f 0b       	sbc	r19, r31
    106e:	28 17       	cp	r18, r24
    1070:	39 07       	cpc	r19, r25
    1072:	78 f0       	brcs	.+30     	; 0x1092 <malloc+0x120>
    1074:	ac 01       	movw	r20, r24
    1076:	4e 5f       	subi	r20, 0xFE	; 254
    1078:	5f 4f       	sbci	r21, 0xFF	; 255
    107a:	24 17       	cp	r18, r20
    107c:	35 07       	cpc	r19, r21
    107e:	48 f0       	brcs	.+18     	; 0x1092 <malloc+0x120>
    1080:	4e 0f       	add	r20, r30
    1082:	5f 1f       	adc	r21, r31
    1084:	50 93 b6 01 	sts	0x01B6, r21	; 0x8001b6 <__brkval+0x1>
    1088:	40 93 b5 01 	sts	0x01B5, r20	; 0x8001b5 <__brkval>
    108c:	81 93       	st	Z+, r24
    108e:	91 93       	st	Z+, r25
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <malloc+0x124>
    1092:	e0 e0       	ldi	r30, 0x00	; 0
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	cf 01       	movw	r24, r30
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	08 95       	ret

000010a2 <free>:
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	09 f4       	brne	.+2      	; 0x10ac <free+0xa>
    10aa:	81 c0       	rjmp	.+258    	; 0x11ae <free+0x10c>
    10ac:	fc 01       	movw	r30, r24
    10ae:	32 97       	sbiw	r30, 0x02	; 2
    10b0:	13 82       	std	Z+3, r1	; 0x03
    10b2:	12 82       	std	Z+2, r1	; 0x02
    10b4:	a0 91 b7 01 	lds	r26, 0x01B7	; 0x8001b7 <__flp>
    10b8:	b0 91 b8 01 	lds	r27, 0x01B8	; 0x8001b8 <__flp+0x1>
    10bc:	10 97       	sbiw	r26, 0x00	; 0
    10be:	81 f4       	brne	.+32     	; 0x10e0 <free+0x3e>
    10c0:	20 81       	ld	r18, Z
    10c2:	31 81       	ldd	r19, Z+1	; 0x01
    10c4:	82 0f       	add	r24, r18
    10c6:	93 1f       	adc	r25, r19
    10c8:	20 91 b5 01 	lds	r18, 0x01B5	; 0x8001b5 <__brkval>
    10cc:	30 91 b6 01 	lds	r19, 0x01B6	; 0x8001b6 <__brkval+0x1>
    10d0:	28 17       	cp	r18, r24
    10d2:	39 07       	cpc	r19, r25
    10d4:	51 f5       	brne	.+84     	; 0x112a <free+0x88>
    10d6:	f0 93 b6 01 	sts	0x01B6, r31	; 0x8001b6 <__brkval+0x1>
    10da:	e0 93 b5 01 	sts	0x01B5, r30	; 0x8001b5 <__brkval>
    10de:	67 c0       	rjmp	.+206    	; 0x11ae <free+0x10c>
    10e0:	ed 01       	movw	r28, r26
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	ce 17       	cp	r28, r30
    10e8:	df 07       	cpc	r29, r31
    10ea:	40 f4       	brcc	.+16     	; 0x10fc <free+0x5a>
    10ec:	4a 81       	ldd	r20, Y+2	; 0x02
    10ee:	5b 81       	ldd	r21, Y+3	; 0x03
    10f0:	9e 01       	movw	r18, r28
    10f2:	41 15       	cp	r20, r1
    10f4:	51 05       	cpc	r21, r1
    10f6:	f1 f0       	breq	.+60     	; 0x1134 <free+0x92>
    10f8:	ea 01       	movw	r28, r20
    10fa:	f5 cf       	rjmp	.-22     	; 0x10e6 <free+0x44>
    10fc:	d3 83       	std	Z+3, r29	; 0x03
    10fe:	c2 83       	std	Z+2, r28	; 0x02
    1100:	40 81       	ld	r20, Z
    1102:	51 81       	ldd	r21, Z+1	; 0x01
    1104:	84 0f       	add	r24, r20
    1106:	95 1f       	adc	r25, r21
    1108:	c8 17       	cp	r28, r24
    110a:	d9 07       	cpc	r29, r25
    110c:	59 f4       	brne	.+22     	; 0x1124 <free+0x82>
    110e:	88 81       	ld	r24, Y
    1110:	99 81       	ldd	r25, Y+1	; 0x01
    1112:	84 0f       	add	r24, r20
    1114:	95 1f       	adc	r25, r21
    1116:	02 96       	adiw	r24, 0x02	; 2
    1118:	91 83       	std	Z+1, r25	; 0x01
    111a:	80 83       	st	Z, r24
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	9b 81       	ldd	r25, Y+3	; 0x03
    1120:	93 83       	std	Z+3, r25	; 0x03
    1122:	82 83       	std	Z+2, r24	; 0x02
    1124:	21 15       	cp	r18, r1
    1126:	31 05       	cpc	r19, r1
    1128:	29 f4       	brne	.+10     	; 0x1134 <free+0x92>
    112a:	f0 93 b8 01 	sts	0x01B8, r31	; 0x8001b8 <__flp+0x1>
    112e:	e0 93 b7 01 	sts	0x01B7, r30	; 0x8001b7 <__flp>
    1132:	3d c0       	rjmp	.+122    	; 0x11ae <free+0x10c>
    1134:	e9 01       	movw	r28, r18
    1136:	fb 83       	std	Y+3, r31	; 0x03
    1138:	ea 83       	std	Y+2, r30	; 0x02
    113a:	49 91       	ld	r20, Y+
    113c:	59 91       	ld	r21, Y+
    113e:	c4 0f       	add	r28, r20
    1140:	d5 1f       	adc	r29, r21
    1142:	ec 17       	cp	r30, r28
    1144:	fd 07       	cpc	r31, r29
    1146:	61 f4       	brne	.+24     	; 0x1160 <free+0xbe>
    1148:	80 81       	ld	r24, Z
    114a:	91 81       	ldd	r25, Z+1	; 0x01
    114c:	84 0f       	add	r24, r20
    114e:	95 1f       	adc	r25, r21
    1150:	02 96       	adiw	r24, 0x02	; 2
    1152:	e9 01       	movw	r28, r18
    1154:	99 83       	std	Y+1, r25	; 0x01
    1156:	88 83       	st	Y, r24
    1158:	82 81       	ldd	r24, Z+2	; 0x02
    115a:	93 81       	ldd	r25, Z+3	; 0x03
    115c:	9b 83       	std	Y+3, r25	; 0x03
    115e:	8a 83       	std	Y+2, r24	; 0x02
    1160:	e0 e0       	ldi	r30, 0x00	; 0
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	12 96       	adiw	r26, 0x02	; 2
    1166:	8d 91       	ld	r24, X+
    1168:	9c 91       	ld	r25, X
    116a:	13 97       	sbiw	r26, 0x03	; 3
    116c:	00 97       	sbiw	r24, 0x00	; 0
    116e:	19 f0       	breq	.+6      	; 0x1176 <free+0xd4>
    1170:	fd 01       	movw	r30, r26
    1172:	dc 01       	movw	r26, r24
    1174:	f7 cf       	rjmp	.-18     	; 0x1164 <free+0xc2>
    1176:	8d 91       	ld	r24, X+
    1178:	9c 91       	ld	r25, X
    117a:	11 97       	sbiw	r26, 0x01	; 1
    117c:	9d 01       	movw	r18, r26
    117e:	2e 5f       	subi	r18, 0xFE	; 254
    1180:	3f 4f       	sbci	r19, 0xFF	; 255
    1182:	82 0f       	add	r24, r18
    1184:	93 1f       	adc	r25, r19
    1186:	20 91 b5 01 	lds	r18, 0x01B5	; 0x8001b5 <__brkval>
    118a:	30 91 b6 01 	lds	r19, 0x01B6	; 0x8001b6 <__brkval+0x1>
    118e:	28 17       	cp	r18, r24
    1190:	39 07       	cpc	r19, r25
    1192:	69 f4       	brne	.+26     	; 0x11ae <free+0x10c>
    1194:	30 97       	sbiw	r30, 0x00	; 0
    1196:	29 f4       	brne	.+10     	; 0x11a2 <free+0x100>
    1198:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <__flp+0x1>
    119c:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <__flp>
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <free+0x104>
    11a2:	13 82       	std	Z+3, r1	; 0x03
    11a4:	12 82       	std	Z+2, r1	; 0x02
    11a6:	b0 93 b6 01 	sts	0x01B6, r27	; 0x8001b6 <__brkval+0x1>
    11aa:	a0 93 b5 01 	sts	0x01B5, r26	; 0x8001b5 <__brkval>
    11ae:	df 91       	pop	r29
    11b0:	cf 91       	pop	r28
    11b2:	08 95       	ret

000011b4 <strnlen_P>:
    11b4:	fc 01       	movw	r30, r24
    11b6:	05 90       	lpm	r0, Z+
    11b8:	61 50       	subi	r22, 0x01	; 1
    11ba:	70 40       	sbci	r23, 0x00	; 0
    11bc:	01 10       	cpse	r0, r1
    11be:	d8 f7       	brcc	.-10     	; 0x11b6 <strnlen_P+0x2>
    11c0:	80 95       	com	r24
    11c2:	90 95       	com	r25
    11c4:	8e 0f       	add	r24, r30
    11c6:	9f 1f       	adc	r25, r31
    11c8:	08 95       	ret

000011ca <memset>:
    11ca:	dc 01       	movw	r26, r24
    11cc:	01 c0       	rjmp	.+2      	; 0x11d0 <memset+0x6>
    11ce:	6d 93       	st	X+, r22
    11d0:	41 50       	subi	r20, 0x01	; 1
    11d2:	50 40       	sbci	r21, 0x00	; 0
    11d4:	e0 f7       	brcc	.-8      	; 0x11ce <memset+0x4>
    11d6:	08 95       	ret

000011d8 <strnlen>:
    11d8:	fc 01       	movw	r30, r24
    11da:	61 50       	subi	r22, 0x01	; 1
    11dc:	70 40       	sbci	r23, 0x00	; 0
    11de:	01 90       	ld	r0, Z+
    11e0:	01 10       	cpse	r0, r1
    11e2:	d8 f7       	brcc	.-10     	; 0x11da <strnlen+0x2>
    11e4:	80 95       	com	r24
    11e6:	90 95       	com	r25
    11e8:	8e 0f       	add	r24, r30
    11ea:	9f 1f       	adc	r25, r31
    11ec:	08 95       	ret

000011ee <fputc>:
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	fb 01       	movw	r30, r22
    11f8:	23 81       	ldd	r18, Z+3	; 0x03
    11fa:	21 fd       	sbrc	r18, 1
    11fc:	03 c0       	rjmp	.+6      	; 0x1204 <fputc+0x16>
    11fe:	8f ef       	ldi	r24, 0xFF	; 255
    1200:	9f ef       	ldi	r25, 0xFF	; 255
    1202:	2c c0       	rjmp	.+88     	; 0x125c <fputc+0x6e>
    1204:	22 ff       	sbrs	r18, 2
    1206:	16 c0       	rjmp	.+44     	; 0x1234 <fputc+0x46>
    1208:	46 81       	ldd	r20, Z+6	; 0x06
    120a:	57 81       	ldd	r21, Z+7	; 0x07
    120c:	24 81       	ldd	r18, Z+4	; 0x04
    120e:	35 81       	ldd	r19, Z+5	; 0x05
    1210:	42 17       	cp	r20, r18
    1212:	53 07       	cpc	r21, r19
    1214:	44 f4       	brge	.+16     	; 0x1226 <fputc+0x38>
    1216:	a0 81       	ld	r26, Z
    1218:	b1 81       	ldd	r27, Z+1	; 0x01
    121a:	9d 01       	movw	r18, r26
    121c:	2f 5f       	subi	r18, 0xFF	; 255
    121e:	3f 4f       	sbci	r19, 0xFF	; 255
    1220:	31 83       	std	Z+1, r19	; 0x01
    1222:	20 83       	st	Z, r18
    1224:	8c 93       	st	X, r24
    1226:	26 81       	ldd	r18, Z+6	; 0x06
    1228:	37 81       	ldd	r19, Z+7	; 0x07
    122a:	2f 5f       	subi	r18, 0xFF	; 255
    122c:	3f 4f       	sbci	r19, 0xFF	; 255
    122e:	37 83       	std	Z+7, r19	; 0x07
    1230:	26 83       	std	Z+6, r18	; 0x06
    1232:	14 c0       	rjmp	.+40     	; 0x125c <fputc+0x6e>
    1234:	8b 01       	movw	r16, r22
    1236:	ec 01       	movw	r28, r24
    1238:	fb 01       	movw	r30, r22
    123a:	00 84       	ldd	r0, Z+8	; 0x08
    123c:	f1 85       	ldd	r31, Z+9	; 0x09
    123e:	e0 2d       	mov	r30, r0
    1240:	09 95       	icall
    1242:	89 2b       	or	r24, r25
    1244:	e1 f6       	brne	.-72     	; 0x11fe <fputc+0x10>
    1246:	d8 01       	movw	r26, r16
    1248:	16 96       	adiw	r26, 0x06	; 6
    124a:	8d 91       	ld	r24, X+
    124c:	9c 91       	ld	r25, X
    124e:	17 97       	sbiw	r26, 0x07	; 7
    1250:	01 96       	adiw	r24, 0x01	; 1
    1252:	17 96       	adiw	r26, 0x07	; 7
    1254:	9c 93       	st	X, r25
    1256:	8e 93       	st	-X, r24
    1258:	16 97       	sbiw	r26, 0x06	; 6
    125a:	ce 01       	movw	r24, r28
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	1f 91       	pop	r17
    1262:	0f 91       	pop	r16
    1264:	08 95       	ret

00001266 <__ultoa_invert>:
    1266:	fa 01       	movw	r30, r20
    1268:	aa 27       	eor	r26, r26
    126a:	28 30       	cpi	r18, 0x08	; 8
    126c:	51 f1       	breq	.+84     	; 0x12c2 <__ultoa_invert+0x5c>
    126e:	20 31       	cpi	r18, 0x10	; 16
    1270:	81 f1       	breq	.+96     	; 0x12d2 <__ultoa_invert+0x6c>
    1272:	e8 94       	clt
    1274:	6f 93       	push	r22
    1276:	6e 7f       	andi	r22, 0xFE	; 254
    1278:	6e 5f       	subi	r22, 0xFE	; 254
    127a:	7f 4f       	sbci	r23, 0xFF	; 255
    127c:	8f 4f       	sbci	r24, 0xFF	; 255
    127e:	9f 4f       	sbci	r25, 0xFF	; 255
    1280:	af 4f       	sbci	r26, 0xFF	; 255
    1282:	b1 e0       	ldi	r27, 0x01	; 1
    1284:	3e d0       	rcall	.+124    	; 0x1302 <__ultoa_invert+0x9c>
    1286:	b4 e0       	ldi	r27, 0x04	; 4
    1288:	3c d0       	rcall	.+120    	; 0x1302 <__ultoa_invert+0x9c>
    128a:	67 0f       	add	r22, r23
    128c:	78 1f       	adc	r23, r24
    128e:	89 1f       	adc	r24, r25
    1290:	9a 1f       	adc	r25, r26
    1292:	a1 1d       	adc	r26, r1
    1294:	68 0f       	add	r22, r24
    1296:	79 1f       	adc	r23, r25
    1298:	8a 1f       	adc	r24, r26
    129a:	91 1d       	adc	r25, r1
    129c:	a1 1d       	adc	r26, r1
    129e:	6a 0f       	add	r22, r26
    12a0:	71 1d       	adc	r23, r1
    12a2:	81 1d       	adc	r24, r1
    12a4:	91 1d       	adc	r25, r1
    12a6:	a1 1d       	adc	r26, r1
    12a8:	20 d0       	rcall	.+64     	; 0x12ea <__ultoa_invert+0x84>
    12aa:	09 f4       	brne	.+2      	; 0x12ae <__ultoa_invert+0x48>
    12ac:	68 94       	set
    12ae:	3f 91       	pop	r19
    12b0:	2a e0       	ldi	r18, 0x0A	; 10
    12b2:	26 9f       	mul	r18, r22
    12b4:	11 24       	eor	r1, r1
    12b6:	30 19       	sub	r19, r0
    12b8:	30 5d       	subi	r19, 0xD0	; 208
    12ba:	31 93       	st	Z+, r19
    12bc:	de f6       	brtc	.-74     	; 0x1274 <__ultoa_invert+0xe>
    12be:	cf 01       	movw	r24, r30
    12c0:	08 95       	ret
    12c2:	46 2f       	mov	r20, r22
    12c4:	47 70       	andi	r20, 0x07	; 7
    12c6:	40 5d       	subi	r20, 0xD0	; 208
    12c8:	41 93       	st	Z+, r20
    12ca:	b3 e0       	ldi	r27, 0x03	; 3
    12cc:	0f d0       	rcall	.+30     	; 0x12ec <__ultoa_invert+0x86>
    12ce:	c9 f7       	brne	.-14     	; 0x12c2 <__ultoa_invert+0x5c>
    12d0:	f6 cf       	rjmp	.-20     	; 0x12be <__ultoa_invert+0x58>
    12d2:	46 2f       	mov	r20, r22
    12d4:	4f 70       	andi	r20, 0x0F	; 15
    12d6:	40 5d       	subi	r20, 0xD0	; 208
    12d8:	4a 33       	cpi	r20, 0x3A	; 58
    12da:	18 f0       	brcs	.+6      	; 0x12e2 <__ultoa_invert+0x7c>
    12dc:	49 5d       	subi	r20, 0xD9	; 217
    12de:	31 fd       	sbrc	r19, 1
    12e0:	40 52       	subi	r20, 0x20	; 32
    12e2:	41 93       	st	Z+, r20
    12e4:	02 d0       	rcall	.+4      	; 0x12ea <__ultoa_invert+0x84>
    12e6:	a9 f7       	brne	.-22     	; 0x12d2 <__ultoa_invert+0x6c>
    12e8:	ea cf       	rjmp	.-44     	; 0x12be <__ultoa_invert+0x58>
    12ea:	b4 e0       	ldi	r27, 0x04	; 4
    12ec:	a6 95       	lsr	r26
    12ee:	97 95       	ror	r25
    12f0:	87 95       	ror	r24
    12f2:	77 95       	ror	r23
    12f4:	67 95       	ror	r22
    12f6:	ba 95       	dec	r27
    12f8:	c9 f7       	brne	.-14     	; 0x12ec <__ultoa_invert+0x86>
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	61 05       	cpc	r22, r1
    12fe:	71 05       	cpc	r23, r1
    1300:	08 95       	ret
    1302:	9b 01       	movw	r18, r22
    1304:	ac 01       	movw	r20, r24
    1306:	0a 2e       	mov	r0, r26
    1308:	06 94       	lsr	r0
    130a:	57 95       	ror	r21
    130c:	47 95       	ror	r20
    130e:	37 95       	ror	r19
    1310:	27 95       	ror	r18
    1312:	ba 95       	dec	r27
    1314:	c9 f7       	brne	.-14     	; 0x1308 <__ultoa_invert+0xa2>
    1316:	62 0f       	add	r22, r18
    1318:	73 1f       	adc	r23, r19
    131a:	84 1f       	adc	r24, r20
    131c:	95 1f       	adc	r25, r21
    131e:	a0 1d       	adc	r26, r0
    1320:	08 95       	ret

00001322 <__prologue_saves__>:
    1322:	2f 92       	push	r2
    1324:	3f 92       	push	r3
    1326:	4f 92       	push	r4
    1328:	5f 92       	push	r5
    132a:	6f 92       	push	r6
    132c:	7f 92       	push	r7
    132e:	8f 92       	push	r8
    1330:	9f 92       	push	r9
    1332:	af 92       	push	r10
    1334:	bf 92       	push	r11
    1336:	cf 92       	push	r12
    1338:	df 92       	push	r13
    133a:	ef 92       	push	r14
    133c:	ff 92       	push	r15
    133e:	0f 93       	push	r16
    1340:	1f 93       	push	r17
    1342:	cf 93       	push	r28
    1344:	df 93       	push	r29
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
    134a:	ca 1b       	sub	r28, r26
    134c:	db 0b       	sbc	r29, r27
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	de bf       	out	0x3e, r29	; 62
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	cd bf       	out	0x3d, r28	; 61
    1358:	09 94       	ijmp

0000135a <__epilogue_restores__>:
    135a:	2a 88       	ldd	r2, Y+18	; 0x12
    135c:	39 88       	ldd	r3, Y+17	; 0x11
    135e:	48 88       	ldd	r4, Y+16	; 0x10
    1360:	5f 84       	ldd	r5, Y+15	; 0x0f
    1362:	6e 84       	ldd	r6, Y+14	; 0x0e
    1364:	7d 84       	ldd	r7, Y+13	; 0x0d
    1366:	8c 84       	ldd	r8, Y+12	; 0x0c
    1368:	9b 84       	ldd	r9, Y+11	; 0x0b
    136a:	aa 84       	ldd	r10, Y+10	; 0x0a
    136c:	b9 84       	ldd	r11, Y+9	; 0x09
    136e:	c8 84       	ldd	r12, Y+8	; 0x08
    1370:	df 80       	ldd	r13, Y+7	; 0x07
    1372:	ee 80       	ldd	r14, Y+6	; 0x06
    1374:	fd 80       	ldd	r15, Y+5	; 0x05
    1376:	0c 81       	ldd	r16, Y+4	; 0x04
    1378:	1b 81       	ldd	r17, Y+3	; 0x03
    137a:	aa 81       	ldd	r26, Y+2	; 0x02
    137c:	b9 81       	ldd	r27, Y+1	; 0x01
    137e:	ce 0f       	add	r28, r30
    1380:	d1 1d       	adc	r29, r1
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	ed 01       	movw	r28, r26
    138e:	08 95       	ret

00001390 <_exit>:
    1390:	f8 94       	cli

00001392 <__stop_program>:
    1392:	ff cf       	rjmp	.-2      	; 0x1392 <__stop_program>
