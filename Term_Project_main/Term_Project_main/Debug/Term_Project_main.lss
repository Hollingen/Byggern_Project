
Term_Project_main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  0000128c  00001320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000128c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080018c  0080018c  000013ac  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001408  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001987  00000000  00000000  0000162c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d72  00000000  00000000  00002fb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e6f  00000000  00000000  00003d25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000494  00000000  00000000  00004b94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000078e  00000000  00000000  00005028  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b1f  00000000  00000000  000057b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  000062d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__vector_1>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <vfprintf+0xd2>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	11 e0       	ldi	r17, 0x01	; 1
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ec e8       	ldi	r30, 0x8C	; 140
     37c:	f2 e1       	ldi	r31, 0x12	; 18
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	ac 38       	cpi	r26, 0x8C	; 140
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	21 e0       	ldi	r18, 0x01	; 1
     38c:	ac e8       	ldi	r26, 0x8C	; 140
     38e:	b1 e0       	ldi	r27, 0x01	; 1
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a9 39       	cpi	r26, 0x99	; 153
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <main>
     39e:	0c 94 44 09 	jmp	0x1288	; 0x1288 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <ADC_Init>:

uint8_t BUSY_flag = 0;

void ADC_Init(void){

    TCCR1A = (1<<COM1A1)|(1<<WGM11);  // Clear OCnA/OCnB on Compare Match, set OCnA/OCnB at TOP.
     3a6:	82 e8       	ldi	r24, 0x82	; 130
     3a8:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10);   // Fast PWM, TOP=ICRn, Update OCRnx on TOP. // Prescaler = 1
     3aa:	89 e1       	ldi	r24, 0x19	; 25
     3ac:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 5;
     3ae:	85 e0       	ldi	r24, 0x05	; 5
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	95 bd       	out	0x25, r25	; 37
     3b4:	84 bd       	out	0x24, r24	; 36
	OCR1A = 2;  // 50% Duty Cycle, ~0,8Mhz
     3b6:	82 e0       	ldi	r24, 0x02	; 2
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	9b bd       	out	0x2b, r25	; 43
     3bc:	8a bd       	out	0x2a, r24	; 42
	
	DDRD |= (1<<PD5);
     3be:	81 b3       	in	r24, 0x11	; 17
     3c0:	80 62       	ori	r24, 0x20	; 32
     3c2:	81 bb       	out	0x11, r24	; 17
     3c4:	08 95       	ret

000003c6 <ADC_read>:

}

uint8_t ADC_read(uint8_t channel){
     3c6:	0f 93       	push	r16
     3c8:	1f 93       	push	r17
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	d8 2f       	mov	r29, r24
	
	volatile *adc_in = (char *) ADC_ADDRESS;
	
	uint8_t data_x, data_y, data_ls, data_rs;
	
	adc_in[0] = 0x00;
     3d0:	10 92 01 14 	sts	0x1401, r1	; 0x801401 <__bss_end+0x1268>
     3d4:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <__bss_end+0x1267>
	
	sei();
     3d8:	78 94       	sei
	while(!BUSY_flag){};
     3da:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end>
     3de:	88 23       	and	r24, r24
     3e0:	e1 f3       	breq	.-8      	; 0x3da <ADC_read+0x14>
	cli();
     3e2:	f8 94       	cli
	
	data_x = XMEM_read(0x400);
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	94 e0       	ldi	r25, 0x04	; 4
     3e8:	0e 94 66 04 	call	0x8cc	; 0x8cc <XMEM_read>
     3ec:	18 2f       	mov	r17, r24
	data_y = XMEM_read(0x400);
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	94 e0       	ldi	r25, 0x04	; 4
     3f2:	0e 94 66 04 	call	0x8cc	; 0x8cc <XMEM_read>
     3f6:	c8 2f       	mov	r28, r24
	data_ls = XMEM_read(0x400);
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	94 e0       	ldi	r25, 0x04	; 4
     3fc:	0e 94 66 04 	call	0x8cc	; 0x8cc <XMEM_read>
     400:	08 2f       	mov	r16, r24
	data_rs = XMEM_read(0x400);
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	94 e0       	ldi	r25, 0x04	; 4
     406:	0e 94 66 04 	call	0x8cc	; 0x8cc <XMEM_read>
	
	switch (channel){
     40a:	d1 30       	cpi	r29, 0x01	; 1
     40c:	59 f0       	breq	.+22     	; 0x424 <__DATA_REGION_LENGTH__+0x24>
     40e:	40 f0       	brcs	.+16     	; 0x420 <__DATA_REGION_LENGTH__+0x20>
     410:	d2 30       	cpi	r29, 0x02	; 2
     412:	19 f0       	breq	.+6      	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
     414:	d3 30       	cpi	r29, 0x03	; 3
     416:	39 f0       	breq	.+14     	; 0x426 <__DATA_REGION_LENGTH__+0x26>
     418:	02 c0       	rjmp	.+4      	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
			break;
		case 1:
			return data_y;
			break;
		case 2:
			return data_ls;
     41a:	80 2f       	mov	r24, r16
     41c:	04 c0       	rjmp	.+8      	; 0x426 <__DATA_REGION_LENGTH__+0x26>
			break;
		default:
			break;
	}
	
}
     41e:	03 c0       	rjmp	.+6      	; 0x426 <__DATA_REGION_LENGTH__+0x26>
	data_ls = XMEM_read(0x400);
	data_rs = XMEM_read(0x400);
	
	switch (channel){
		case 0:
			return data_x;
     420:	81 2f       	mov	r24, r17
     422:	01 c0       	rjmp	.+2      	; 0x426 <__DATA_REGION_LENGTH__+0x26>
			break;
		case 1:
			return data_y;
     424:	8c 2f       	mov	r24, r28
			break;
		default:
			break;
	}
	
}
     426:	df 91       	pop	r29
     428:	cf 91       	pop	r28
     42a:	1f 91       	pop	r17
     42c:	0f 91       	pop	r16
     42e:	08 95       	ret

00000430 <ADC_calibrate>:

void ADC_calibrate(void){
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
	offset.x = ADC_read(CHANNEL_X);
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <ADC_read>
     43a:	cd e8       	ldi	r28, 0x8D	; 141
     43c:	d1 e0       	ldi	r29, 0x01	; 1
     43e:	88 83       	st	Y, r24
	offset.y = ADC_read(CHANNEL_Y);
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <ADC_read>
     446:	89 83       	std	Y+1, r24	; 0x01
	printf("x offset: %d, y offset: %d\n\r", offset.x, offset.y);
     448:	98 81       	ld	r25, Y
     44a:	1f 92       	push	r1
     44c:	8f 93       	push	r24
     44e:	1f 92       	push	r1
     450:	9f 93       	push	r25
     452:	86 e0       	ldi	r24, 0x06	; 6
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	9f 93       	push	r25
     458:	8f 93       	push	r24
     45a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <printf>
}
     45e:	0f 90       	pop	r0
     460:	0f 90       	pop	r0
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	08 95       	ret

00000470 <Int_INIT>:

void Int_INIT(void){
	
    GICR |= (1<<INT0);
     470:	8b b7       	in	r24, 0x3b	; 59
     472:	80 64       	ori	r24, 0x40	; 64
     474:	8b bf       	out	0x3b, r24	; 59
	
	MCUCR |= (1<<ISC00);
     476:	85 b7       	in	r24, 0x35	; 53
     478:	81 60       	ori	r24, 0x01	; 1
     47a:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<ISC01);
     47c:	85 b7       	in	r24, 0x35	; 53
     47e:	82 60       	ori	r24, 0x02	; 2
     480:	85 bf       	out	0x35, r24	; 53
	
	sei();
     482:	78 94       	sei
     484:	08 95       	ret

00000486 <adc_get_pos>:
}

adc_pos adc_get_pos(){
     486:	1f 93       	push	r17
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
	
	adc_pos pos;
	uint8_t adc_raw[2];

	adc_raw[0] = ADC_read(CHANNEL_X);
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <ADC_read>
     492:	c8 2f       	mov	r28, r24
	adc_raw[1] = ADC_read(CHANNEL_Y);
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <ADC_read>
     49a:	e8 2f       	mov	r30, r24

	if (adc_raw[0] > offset.x){
     49c:	40 91 8d 01 	lds	r20, 0x018D	; 0x80018d <offset>
     4a0:	4c 17       	cp	r20, r28
     4a2:	98 f4       	brcc	.+38     	; 0x4ca <adc_get_pos+0x44>
		pos.x = (adc_raw[0] - offset.x)*100/(ADC_MAX_VALUE - offset.x);
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	2c 2f       	mov	r18, r28
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	24 1b       	sub	r18, r20
     4ac:	35 0b       	sbc	r19, r21
     4ae:	64 e6       	ldi	r22, 0x64	; 100
     4b0:	62 9f       	mul	r22, r18
     4b2:	c0 01       	movw	r24, r0
     4b4:	63 9f       	mul	r22, r19
     4b6:	90 0d       	add	r25, r0
     4b8:	11 24       	eor	r1, r1
     4ba:	6f ef       	ldi	r22, 0xFF	; 255
     4bc:	70 e0       	ldi	r23, 0x00	; 0
     4be:	64 1b       	sub	r22, r20
     4c0:	75 0b       	sbc	r23, r21
     4c2:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__divmodhi4>
     4c6:	16 2f       	mov	r17, r22
     4c8:	11 c0       	rjmp	.+34     	; 0x4ec <adc_get_pos+0x66>
	}else if(adc_raw[0] < offset.x){
     4ca:	c4 17       	cp	r28, r20
     4cc:	78 f4       	brcc	.+30     	; 0x4ec <adc_get_pos+0x66>
		pos.x = -(offset.x - adc_raw[0])*100/offset.x;
     4ce:	64 2f       	mov	r22, r20
     4d0:	70 e0       	ldi	r23, 0x00	; 0
     4d2:	2c 2f       	mov	r18, r28
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	26 1b       	sub	r18, r22
     4d8:	37 0b       	sbc	r19, r23
     4da:	44 e6       	ldi	r20, 0x64	; 100
     4dc:	42 9f       	mul	r20, r18
     4de:	c0 01       	movw	r24, r0
     4e0:	43 9f       	mul	r20, r19
     4e2:	90 0d       	add	r25, r0
     4e4:	11 24       	eor	r1, r1
     4e6:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__divmodhi4>
     4ea:	16 2f       	mov	r17, r22
	}

	if (adc_raw[1] > offset.y){
     4ec:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <offset+0x1>
     4f0:	2e 17       	cp	r18, r30
     4f2:	90 f4       	brcc	.+36     	; 0x518 <__stack+0x19>
		pos.y = (adc_raw[1] - offset.y)*100/(ADC_MAX_VALUE - offset.y);
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	e2 1b       	sub	r30, r18
     4fa:	f3 0b       	sbc	r31, r19
     4fc:	44 e6       	ldi	r20, 0x64	; 100
     4fe:	4e 9f       	mul	r20, r30
     500:	c0 01       	movw	r24, r0
     502:	4f 9f       	mul	r20, r31
     504:	90 0d       	add	r25, r0
     506:	11 24       	eor	r1, r1
     508:	6f ef       	ldi	r22, 0xFF	; 255
     50a:	70 e0       	ldi	r23, 0x00	; 0
     50c:	62 1b       	sub	r22, r18
     50e:	73 0b       	sbc	r23, r19
     510:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__divmodhi4>
     514:	d6 2f       	mov	r29, r22
     516:	11 c0       	rjmp	.+34     	; 0x53a <__stack+0x3b>
	}else if(adc_raw[1] < offset.y){
     518:	e2 17       	cp	r30, r18
     51a:	78 f4       	brcc	.+30     	; 0x53a <__stack+0x3b>
		pos.y = -(offset.y - adc_raw[1])*100/offset.y;
     51c:	62 2f       	mov	r22, r18
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	2e 2f       	mov	r18, r30
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	26 1b       	sub	r18, r22
     526:	37 0b       	sbc	r19, r23
     528:	44 e6       	ldi	r20, 0x64	; 100
     52a:	42 9f       	mul	r20, r18
     52c:	c0 01       	movw	r24, r0
     52e:	43 9f       	mul	r20, r19
     530:	90 0d       	add	r25, r0
     532:	11 24       	eor	r1, r1
     534:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__divmodhi4>
     538:	d6 2f       	mov	r29, r22
	}

	return pos;

}
     53a:	81 2f       	mov	r24, r17
     53c:	9d 2f       	mov	r25, r29
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	08 95       	ret

00000546 <adc_get_dir>:

adc_dir adc_get_dir(adc_pos pos){

	if(abs(pos.y) >= ADC_THRESHHOLD){
     546:	29 2f       	mov	r18, r25
     548:	09 2e       	mov	r0, r25
     54a:	00 0c       	add	r0, r0
     54c:	33 0b       	sbc	r19, r19
     54e:	33 23       	and	r19, r19
     550:	1c f4       	brge	.+6      	; 0x558 <adc_get_dir+0x12>
     552:	31 95       	neg	r19
     554:	21 95       	neg	r18
     556:	31 09       	sbc	r19, r1
     558:	2a 30       	cpi	r18, 0x0A	; 10
     55a:	31 05       	cpc	r19, r1
     55c:	2c f0       	brlt	.+10     	; 0x568 <adc_get_dir+0x22>
		if(pos.y >= ADC_THRESHHOLD){
     55e:	9a 30       	cpi	r25, 0x0A	; 10
     560:	9c f4       	brge	.+38     	; 0x588 <adc_get_dir+0x42>
			return UP;
		}else if(pos.y <= (-ADC_THRESHHOLD)){
     562:	97 3f       	cpi	r25, 0xF7	; 247
     564:	9c f0       	brlt	.+38     	; 0x58c <adc_get_dir+0x46>
     566:	0f c0       	rjmp	.+30     	; 0x586 <adc_get_dir+0x40>
			return DOWN;
		}
	}else if(abs(pos.x) >= ADC_THRESHHOLD){
     568:	28 2f       	mov	r18, r24
     56a:	08 2e       	mov	r0, r24
     56c:	00 0c       	add	r0, r0
     56e:	99 0b       	sbc	r25, r25
     570:	99 23       	and	r25, r25
     572:	1c f4       	brge	.+6      	; 0x57a <adc_get_dir+0x34>
     574:	91 95       	neg	r25
     576:	81 95       	neg	r24
     578:	91 09       	sbc	r25, r1
     57a:	0a 97       	sbiw	r24, 0x0a	; 10
     57c:	4c f0       	brlt	.+18     	; 0x590 <adc_get_dir+0x4a>
		if(pos.x >= ADC_THRESHHOLD){
     57e:	2a 30       	cpi	r18, 0x0A	; 10
     580:	4c f4       	brge	.+18     	; 0x594 <adc_get_dir+0x4e>
			return RIGHT;
		}else if(pos.x <= (-ADC_THRESHHOLD)){
     582:	27 3f       	cpi	r18, 0xF7	; 247
     584:	4c f0       	brlt	.+18     	; 0x598 <adc_get_dir+0x52>
			return LEFT;
		}
	}else{
		return NEUTRAL;
	}
}
     586:	08 95       	ret

adc_dir adc_get_dir(adc_pos pos){

	if(abs(pos.y) >= ADC_THRESHHOLD){
		if(pos.y >= ADC_THRESHHOLD){
			return UP;
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	08 95       	ret
		}else if(pos.y <= (-ADC_THRESHHOLD)){
			return DOWN;
     58c:	82 e0       	ldi	r24, 0x02	; 2
     58e:	08 95       	ret
			return RIGHT;
		}else if(pos.x <= (-ADC_THRESHHOLD)){
			return LEFT;
		}
	}else{
		return NEUTRAL;
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	08 95       	ret
		}else if(pos.y <= (-ADC_THRESHHOLD)){
			return DOWN;
		}
	}else if(abs(pos.x) >= ADC_THRESHHOLD){
		if(pos.x >= ADC_THRESHHOLD){
			return RIGHT;
     594:	84 e0       	ldi	r24, 0x04	; 4
     596:	08 95       	ret
		}else if(pos.x <= (-ADC_THRESHHOLD)){
			return LEFT;
     598:	83 e0       	ldi	r24, 0x03	; 3
		}
	}else{
		return NEUTRAL;
	}
}
     59a:	08 95       	ret

0000059c <__vector_1>:

ISR(INT0_vect){
     59c:	1f 92       	push	r1
     59e:	0f 92       	push	r0
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	0f 92       	push	r0
     5a4:	11 24       	eor	r1, r1
     5a6:	8f 93       	push	r24
    BUSY_flag = 1;
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <__data_end>
}
     5ae:	8f 91       	pop	r24
     5b0:	0f 90       	pop	r0
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	0f 90       	pop	r0
     5b6:	1f 90       	pop	r1
     5b8:	18 95       	reti

000005ba <main>:
#include "SPI/SPIdrv.h"
#include "MCP2515/MCP2515drv.h"

int main(void)
{
	USART_Init(MYUBRR);
     5ba:	8f e1       	ldi	r24, 0x1F	; 31
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 72 04 	call	0x8e4	; 0x8e4 <USART_Init>
	XMEM_init();
     5c2:	0e 94 5f 04 	call	0x8be	; 0x8be <XMEM_init>
	Int_INIT();
     5c6:	0e 94 38 02 	call	0x470	; 0x470 <Int_INIT>
	ADC_Init();
     5ca:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_Init>
	oled_init();
     5ce:	0e 94 87 03 	call	0x70e	; 0x70e <oled_init>
	printf("her\n");
     5d2:	8c e2       	ldi	r24, 0x2C	; 44
     5d4:	91 e0       	ldi	r25, 0x01	; 1
     5d6:	0e 94 08 05 	call	0xa10	; 0xa10 <puts>
	mcp2515_init();
     5da:	0e 94 60 03 	call	0x6c0	; 0x6c0 <mcp2515_init>
	printf("men ikke her\n");
     5de:	83 e2       	ldi	r24, 0x23	; 35
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	0e 94 08 05 	call	0xa10	; 0xa10 <puts>
    /* Replace with your application code */
	
	//TESTE OLED;
	oled_reset();
     5e6:	0e 94 20 04 	call	0x840	; 0x840 <oled_reset>
	oled_home();
     5ea:	0e 94 fe 03 	call	0x7fc	; 0x7fc <oled_home>
	oled_print_char('t');
     5ee:	84 e7       	ldi	r24, 0x74	; 116
     5f0:	0e 94 31 04 	call	0x862	; 0x862 <oled_print_char>

	ADC_calibrate();
     5f4:	0e 94 18 02 	call	0x430	; 0x430 <ADC_calibrate>
	adc_pos pos;
	adc_dir dir;
    while (1) 
    {	

		pos = adc_get_pos();
     5f8:	0e 94 43 02 	call	0x486	; 0x486 <adc_get_pos>
     5fc:	c8 2f       	mov	r28, r24
     5fe:	d9 2f       	mov	r29, r25
		dir = adc_get_dir(pos);
     600:	0e 94 a3 02 	call	0x546	; 0x546 <adc_get_dir>
     604:	18 2f       	mov	r17, r24

		printf("Positions X: %d%%  Y: %d%%\n\r", pos.x, pos.y);
     606:	8d 2f       	mov	r24, r29
     608:	0d 2e       	mov	r0, r29
     60a:	00 0c       	add	r0, r0
     60c:	99 0b       	sbc	r25, r25
     60e:	9f 93       	push	r25
     610:	df 93       	push	r29
     612:	8c 2f       	mov	r24, r28
     614:	0c 2e       	mov	r0, r28
     616:	00 0c       	add	r0, r0
     618:	99 0b       	sbc	r25, r25
     61a:	9f 93       	push	r25
     61c:	cf 93       	push	r28
     61e:	80 e3       	ldi	r24, 0x30	; 48
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	9f 93       	push	r25
     624:	8f 93       	push	r24
     626:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <printf>
		printf("Direction: %d\n\r", dir);
     62a:	1f 92       	push	r1
     62c:	1f 93       	push	r17
     62e:	8d e4       	ldi	r24, 0x4D	; 77
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	9f 93       	push	r25
     634:	8f 93       	push	r24
     636:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     63a:	2f ef       	ldi	r18, 0xFF	; 255
     63c:	8f ef       	ldi	r24, 0xFF	; 255
     63e:	9e e0       	ldi	r25, 0x0E	; 14
     640:	21 50       	subi	r18, 0x01	; 1
     642:	80 40       	sbci	r24, 0x00	; 0
     644:	90 40       	sbci	r25, 0x00	; 0
     646:	e1 f7       	brne	.-8      	; 0x640 <main+0x86>
     648:	00 c0       	rjmp	.+0      	; 0x64a <main+0x90>
     64a:	00 00       	nop
     64c:	8d b7       	in	r24, 0x3d	; 61
     64e:	9e b7       	in	r25, 0x3e	; 62
     650:	0a 96       	adiw	r24, 0x0a	; 10
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	f8 94       	cli
     656:	9e bf       	out	0x3e, r25	; 62
     658:	0f be       	out	0x3f, r0	; 63
     65a:	8d bf       	out	0x3d, r24	; 61
     65c:	cd cf       	rjmp	.-102    	; 0x5f8 <main+0x3e>

0000065e <mcp2515_read>:
    // More initialization
    return 0;
}


uint8_t mcp2515_read (uint8_t instruction, uint8_t address){
     65e:	cf 93       	push	r28
     660:	c6 2f       	mov	r28, r22
    uint8_t result;
    PORTB &= ~(1 << CAN_CS); // Select CAN - controller
     662:	98 b3       	in	r25, 0x18	; 24
     664:	9f 7e       	andi	r25, 0xEF	; 239
     666:	98 bb       	out	0x18, r25	; 24
    spi_write_char(instruction); // Send read instruction
     668:	0e 94 55 04 	call	0x8aa	; 0x8aa <spi_write_char>
    spi_write_char(address); // Send address
     66c:	8c 2f       	mov	r24, r28
     66e:	0e 94 55 04 	call	0x8aa	; 0x8aa <spi_write_char>
    result = spi_read_char() ; // Read result
     672:	0e 94 59 04 	call	0x8b2	; 0x8b2 <spi_read_char>
    PORTB |= (1 << CAN_CS); // Deselect CAN - controller
     676:	98 b3       	in	r25, 0x18	; 24
     678:	90 61       	ori	r25, 0x10	; 16
     67a:	98 bb       	out	0x18, r25	; 24
    return result;
}
     67c:	cf 91       	pop	r28
     67e:	08 95       	ret

00000680 <mcp2515_reset>:

void mcp2515_reset(){
    PORTB &= ~(1 << CAN_CS); // Select CAN - controller
     680:	88 b3       	in	r24, 0x18	; 24
     682:	8f 7e       	andi	r24, 0xEF	; 239
     684:	88 bb       	out	0x18, r24	; 24
    spi_write_char(MCP_RESET);   //Write reset bit to SPI
     686:	80 ec       	ldi	r24, 0xC0	; 192
     688:	0e 94 55 04 	call	0x8aa	; 0x8aa <spi_write_char>
    PORTB |= (1 << CAN_CS); // Deselect CAN - controller
     68c:	88 b3       	in	r24, 0x18	; 24
     68e:	80 61       	ori	r24, 0x10	; 16
     690:	88 bb       	out	0x18, r24	; 24
     692:	08 95       	ret

00000694 <mcp2515_write>:
}

void mcp2515_write(uint8_t address, uint8_t data){
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	d8 2f       	mov	r29, r24
     69a:	c6 2f       	mov	r28, r22
    PORTB &= ~(1 << CAN_CS); // Select CAN - controller
     69c:	88 b3       	in	r24, 0x18	; 24
     69e:	8f 7e       	andi	r24, 0xEF	; 239
     6a0:	88 bb       	out	0x18, r24	; 24
    spi_write_char(MCP_WRITE); // Send write instruction
     6a2:	82 e0       	ldi	r24, 0x02	; 2
     6a4:	0e 94 55 04 	call	0x8aa	; 0x8aa <spi_write_char>
    spi_write_char(address); // Send address
     6a8:	8d 2f       	mov	r24, r29
     6aa:	0e 94 55 04 	call	0x8aa	; 0x8aa <spi_write_char>
    spi_write_char(data); // Send data
     6ae:	8c 2f       	mov	r24, r28
     6b0:	0e 94 55 04 	call	0x8aa	; 0x8aa <spi_write_char>
    PORTB |= (1 << CAN_CS); // Deselect CAN - controller
     6b4:	88 b3       	in	r24, 0x18	; 24
     6b6:	80 61       	ori	r24, 0x10	; 16
     6b8:	88 bb       	out	0x18, r24	; 24
}
     6ba:	df 91       	pop	r29
     6bc:	cf 91       	pop	r28
     6be:	08 95       	ret

000006c0 <mcp2515_init>:
#include "MCP2515drv.h"




uint8_t mcp2515_init(){
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	1f 92       	push	r1
     6c6:	cd b7       	in	r28, 0x3d	; 61
     6c8:	de b7       	in	r29, 0x3e	; 62
    uint8_t value ;
    spi_init_master(); // Initialize SPI
     6ca:	0e 94 50 04 	call	0x8a0	; 0x8a0 <spi_init_master>
    mcp2515_reset(); // Send reset - command
     6ce:	0e 94 40 03 	call	0x680	; 0x680 <mcp2515_reset>
	mcp2515_write(MCP_CANCTRL, 0b01000111);
     6d2:	67 e4       	ldi	r22, 0x47	; 71
     6d4:	8f e0       	ldi	r24, 0x0F	; 15
     6d6:	0e 94 4a 03 	call	0x694	; 0x694 <mcp2515_write>
    // Self - test
    mcp2515_read(MCP_CANSTAT, &value);
     6da:	6c 2f       	mov	r22, r28
     6dc:	6f 5f       	subi	r22, 0xFF	; 255
     6de:	8e e0       	ldi	r24, 0x0E	; 14
     6e0:	0e 94 2f 03 	call	0x65e	; 0x65e <mcp2515_read>
    if ((value & MODE_MASK) != MODE_LOOPBACK) {
     6e4:	89 81       	ldd	r24, Y+1	; 0x01
     6e6:	80 7e       	andi	r24, 0xE0	; 224
     6e8:	80 34       	cpi	r24, 0x40	; 64
     6ea:	31 f0       	breq	.+12     	; 0x6f8 <mcp2515_init+0x38>
    printf ("MCP2515 is NOT in loopback mode after reset !\n");
     6ec:	8d e5       	ldi	r24, 0x5D	; 93
     6ee:	91 e0       	ldi	r25, 0x01	; 1
     6f0:	0e 94 08 05 	call	0xa10	; 0xa10 <puts>
    return 1;
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	01 c0       	rjmp	.+2      	; 0x6fa <mcp2515_init+0x3a>
    }
    // More initialization
    return 0;
     6f8:	80 e0       	ldi	r24, 0x00	; 0
}
     6fa:	0f 90       	pop	r0
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	08 95       	ret

00000702 <oled_write_command>:
    for (int i = 0; i < 128; i++) { //For every column write the data to 0 so that the line is cleared
		oled_write_data(0b11111111);
	}
    oled_goto_line(line); //Go back to the 

}
     702:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xe67>
     706:	08 95       	ret

00000708 <oled_write_data>:
     708:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0x1067>
     70c:	08 95       	ret

0000070e <oled_init>:
     70e:	8e ea       	ldi	r24, 0xAE	; 174
     710:	0e 94 81 03 	call	0x702	; 0x702 <oled_write_command>
     714:	81 ea       	ldi	r24, 0xA1	; 161
     716:	0e 94 81 03 	call	0x702	; 0x702 <oled_write_command>
     71a:	8a ed       	ldi	r24, 0xDA	; 218
     71c:	0e 94 81 03 	call	0x702	; 0x702 <oled_write_command>
     720:	82 e1       	ldi	r24, 0x12	; 18
     722:	0e 94 81 03 	call	0x702	; 0x702 <oled_write_command>
     726:	88 ec       	ldi	r24, 0xC8	; 200
     728:	0e 94 81 03 	call	0x702	; 0x702 <oled_write_command>
     72c:	88 ea       	ldi	r24, 0xA8	; 168
     72e:	0e 94 81 03 	call	0x702	; 0x702 <oled_write_command>
     732:	8f e3       	ldi	r24, 0x3F	; 63
     734:	0e 94 81 03 	call	0x702	; 0x702 <oled_write_command>
     738:	85 ed       	ldi	r24, 0xD5	; 213
     73a:	0e 94 81 03 	call	0x702	; 0x702 <oled_write_command>
     73e:	80 e8       	ldi	r24, 0x80	; 128
     740:	0e 94 81 03 	call	0x702	; 0x702 <oled_write_command>
     744:	81 e8       	ldi	r24, 0x81	; 129
     746:	0e 94 81 03 	call	0x702	; 0x702 <oled_write_command>
     74a:	80 e5       	ldi	r24, 0x50	; 80
     74c:	0e 94 81 03 	call	0x702	; 0x702 <oled_write_command>
     750:	89 ed       	ldi	r24, 0xD9	; 217
     752:	0e 94 81 03 	call	0x702	; 0x702 <oled_write_command>
     756:	81 e2       	ldi	r24, 0x21	; 33
     758:	0e 94 81 03 	call	0x702	; 0x702 <oled_write_command>
     75c:	80 e2       	ldi	r24, 0x20	; 32
     75e:	0e 94 81 03 	call	0x702	; 0x702 <oled_write_command>
     762:	82 e0       	ldi	r24, 0x02	; 2
     764:	0e 94 81 03 	call	0x702	; 0x702 <oled_write_command>
     768:	8b ed       	ldi	r24, 0xDB	; 219
     76a:	0e 94 81 03 	call	0x702	; 0x702 <oled_write_command>
     76e:	80 e3       	ldi	r24, 0x30	; 48
     770:	0e 94 81 03 	call	0x702	; 0x702 <oled_write_command>
     774:	8d ea       	ldi	r24, 0xAD	; 173
     776:	0e 94 81 03 	call	0x702	; 0x702 <oled_write_command>
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	0e 94 81 03 	call	0x702	; 0x702 <oled_write_command>
     780:	84 ea       	ldi	r24, 0xA4	; 164
     782:	0e 94 81 03 	call	0x702	; 0x702 <oled_write_command>
     786:	86 ea       	ldi	r24, 0xA6	; 166
     788:	0e 94 81 03 	call	0x702	; 0x702 <oled_write_command>
     78c:	8f ea       	ldi	r24, 0xAF	; 175
     78e:	0e 94 81 03 	call	0x702	; 0x702 <oled_write_command>
     792:	80 e2       	ldi	r24, 0x20	; 32
     794:	0e 94 81 03 	call	0x702	; 0x702 <oled_write_command>
     798:	82 e0       	ldi	r24, 0x02	; 2
     79a:	0e 94 81 03 	call	0x702	; 0x702 <oled_write_command>
     79e:	08 95       	ret

000007a0 <oled_goto_line>:
     7a0:	80 55       	subi	r24, 0x50	; 80
     7a2:	0e 94 81 03 	call	0x702	; 0x702 <oled_write_command>
     7a6:	08 95       	ret

000007a8 <oled_goto_column>:
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	ec 01       	movw	r28, r24
     7ae:	8f 70       	andi	r24, 0x0F	; 15
     7b0:	90 78       	andi	r25, 0x80	; 128
     7b2:	99 23       	and	r25, r25
     7b4:	24 f4       	brge	.+8      	; 0x7be <oled_goto_column+0x16>
     7b6:	01 97       	sbiw	r24, 0x01	; 1
     7b8:	80 6f       	ori	r24, 0xF0	; 240
     7ba:	9f 6f       	ori	r25, 0xFF	; 255
     7bc:	01 96       	adiw	r24, 0x01	; 1
     7be:	0e 94 81 03 	call	0x702	; 0x702 <oled_write_command>
     7c2:	ce 01       	movw	r24, r28
     7c4:	dd 23       	and	r29, r29
     7c6:	0c f4       	brge	.+2      	; 0x7ca <oled_goto_column+0x22>
     7c8:	0f 96       	adiw	r24, 0x0f	; 15
     7ca:	95 95       	asr	r25
     7cc:	87 95       	ror	r24
     7ce:	95 95       	asr	r25
     7d0:	87 95       	ror	r24
     7d2:	95 95       	asr	r25
     7d4:	87 95       	ror	r24
     7d6:	95 95       	asr	r25
     7d8:	87 95       	ror	r24
     7da:	80 5f       	subi	r24, 0xF0	; 240
     7dc:	0e 94 81 03 	call	0x702	; 0x702 <oled_write_command>
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	08 95       	ret

000007e6 <oled_goto_pos>:
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	eb 01       	movw	r28, r22
     7ec:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_goto_line>
     7f0:	ce 01       	movw	r24, r28
     7f2:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <oled_goto_column>
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	08 95       	ret

000007fc <oled_home>:
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <oled_goto_pos>
     808:	08 95       	ret

0000080a <oled_clear_line>:
void oled_clear_line(int line){
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	8c 01       	movw	r16, r24
    oled_goto_pos(line, 0); // Go to the right line and start at the first column
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <oled_goto_pos>
    for (int i = 0; i < 128; i++) { //For every column write the data to 0 so that the line is cleared
     81c:	c0 e0       	ldi	r28, 0x00	; 0
     81e:	d0 e0       	ldi	r29, 0x00	; 0
     820:	04 c0       	rjmp	.+8      	; 0x82a <oled_clear_line+0x20>
		oled_write_data(0b00000000);
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	0e 94 84 03 	call	0x708	; 0x708 <oled_write_data>
    oled_goto_line(line); //Go back to the 

}
void oled_clear_line(int line){
    oled_goto_pos(line, 0); // Go to the right line and start at the first column
    for (int i = 0; i < 128; i++) { //For every column write the data to 0 so that the line is cleared
     828:	21 96       	adiw	r28, 0x01	; 1
     82a:	c0 38       	cpi	r28, 0x80	; 128
     82c:	d1 05       	cpc	r29, r1
     82e:	cc f3       	brlt	.-14     	; 0x822 <oled_clear_line+0x18>
		oled_write_data(0b00000000);
	}
    oled_goto_line(line); //Go back to the 
     830:	c8 01       	movw	r24, r16
     832:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_goto_line>


}
     836:	df 91       	pop	r29
     838:	cf 91       	pop	r28
     83a:	1f 91       	pop	r17
     83c:	0f 91       	pop	r16
     83e:	08 95       	ret

00000840 <oled_reset>:
    oled_write_command(0x20);
	oled_write_command(0b10);

}

void oled_reset(){
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
    for (int i = 0; i < 8; i++) { //For every column write the data to 0 so that the line is cleared
     844:	c0 e0       	ldi	r28, 0x00	; 0
     846:	d0 e0       	ldi	r29, 0x00	; 0
     848:	04 c0       	rjmp	.+8      	; 0x852 <oled_reset+0x12>
		oled_clear_line(i);
     84a:	ce 01       	movw	r24, r28
     84c:	0e 94 05 04 	call	0x80a	; 0x80a <oled_clear_line>
	oled_write_command(0b10);

}

void oled_reset(){
    for (int i = 0; i < 8; i++) { //For every column write the data to 0 so that the line is cleared
     850:	21 96       	adiw	r28, 0x01	; 1
     852:	c8 30       	cpi	r28, 0x08	; 8
     854:	d1 05       	cpc	r29, r1
     856:	cc f3       	brlt	.-14     	; 0x84a <oled_reset+0xa>
		oled_clear_line(i);
	}
    oled_home();
     858:	0e 94 fe 03 	call	0x7fc	; 0x7fc <oled_home>

}
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	08 95       	ret

00000862 <oled_print_char>:
    oled_goto_line(row);
    oled_goto_column(column);

}

void oled_print_char(char character){
     862:	1f 93       	push	r17
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
    //This is if the page adressing mode
    character = character - 32; //To make it line up with fonts.h since there are no special characters
     868:	10 ee       	ldi	r17, 0xE0	; 224
     86a:	18 0f       	add	r17, r24
        for (int i = 0; i < 8; i++) {
     86c:	c0 e0       	ldi	r28, 0x00	; 0
     86e:	d0 e0       	ldi	r29, 0x00	; 0
     870:	10 c0       	rjmp	.+32     	; 0x892 <oled_print_char+0x30>
        char column = pgm_read_byte(&font8[character][i]);
     872:	e1 2f       	mov	r30, r17
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	ee 0f       	add	r30, r30
     878:	ff 1f       	adc	r31, r31
     87a:	ee 0f       	add	r30, r30
     87c:	ff 1f       	adc	r31, r31
     87e:	ee 0f       	add	r30, r30
     880:	ff 1f       	adc	r31, r31
     882:	ec 0f       	add	r30, r28
     884:	fd 1f       	adc	r31, r29
     886:	e0 59       	subi	r30, 0x90	; 144
     888:	ff 4f       	sbci	r31, 0xFF	; 255
     88a:	84 91       	lpm	r24, Z
        oled_write_data(column);
     88c:	0e 94 84 03 	call	0x708	; 0x708 <oled_write_data>
}

void oled_print_char(char character){
    //This is if the page adressing mode
    character = character - 32; //To make it line up with fonts.h since there are no special characters
        for (int i = 0; i < 8; i++) {
     890:	21 96       	adiw	r28, 0x01	; 1
     892:	c8 30       	cpi	r28, 0x08	; 8
     894:	d1 05       	cpc	r29, r1
     896:	6c f3       	brlt	.-38     	; 0x872 <oled_print_char+0x10>
        char column = pgm_read_byte(&font8[character][i]);
        oled_write_data(column);
  }
}
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	1f 91       	pop	r17
     89e:	08 95       	ret

000008a0 <spi_init_master>:
void spi_init_slave(){
    //
    // Set MISO output, all others input
	DDR_SPI = (1<<DD_MISO);
	// Enable SPI
	SPCR = (1<<SPE);
     8a0:	80 ea       	ldi	r24, 0xA0	; 160
     8a2:	87 bb       	out	0x17, r24	; 23
     8a4:	81 e5       	ldi	r24, 0x51	; 81
     8a6:	8d b9       	out	0x0d, r24	; 13
     8a8:	08 95       	ret

000008aa <spi_write_char>:
}

void spi_write_char(char character){
    SPDR = character;
     8aa:	8f b9       	out	0x0f, r24	; 15
    //Wait for send to complete
    loop_until_bit_is_set(SPSR, SPIF);
     8ac:	77 9b       	sbis	0x0e, 7	; 14
     8ae:	fe cf       	rjmp	.-4      	; 0x8ac <spi_write_char+0x2>
}
     8b0:	08 95       	ret

000008b2 <spi_read_char>:

char spi_read_char(){
    SPDR = 0xFF;
     8b2:	8f ef       	ldi	r24, 0xFF	; 255
     8b4:	8f b9       	out	0x0f, r24	; 15
	// Wait for reception to complete
    loop_until_bit_is_set(SPSR, SPIF);
     8b6:	77 9b       	sbis	0x0e, 7	; 14
     8b8:	fe cf       	rjmp	.-4      	; 0x8b6 <spi_read_char+0x4>
	// Return char in data register
	return SPDR;
     8ba:	8f b1       	in	r24, 0x0f	; 15
}
     8bc:	08 95       	ret

000008be <XMEM_init>:
	SFIOR |= (1<<XMM2); // Masking P7-P4
}

void XMEM_write(uint8_t data, uint16_t addr){
	volatile char *ext_mem = (char *) BASE_ADDRESS;
	ext_mem[addr]= data;
     8be:	85 b7       	in	r24, 0x35	; 53
     8c0:	80 68       	ori	r24, 0x80	; 128
     8c2:	85 bf       	out	0x35, r24	; 53
     8c4:	80 b7       	in	r24, 0x30	; 48
     8c6:	80 62       	ori	r24, 0x20	; 32
     8c8:	80 bf       	out	0x30, r24	; 48
     8ca:	08 95       	ret

000008cc <XMEM_read>:
}

uint8_t XMEM_read(uint16_t addr){
	volatile char *ext_mem = (char *) BASE_ADDRESS;
	uint8_t ret_val = ext_mem[addr];
     8cc:	90 5f       	subi	r25, 0xF0	; 240
     8ce:	fc 01       	movw	r30, r24
     8d0:	80 81       	ld	r24, Z
	return ret_val;
}
     8d2:	08 95       	ret

000008d4 <USART_Transmit>:
#include "UARTdrv.h"

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
     8d4:	5d 9b       	sbis	0x0b, 5	; 11
     8d6:	fe cf       	rjmp	.-4      	; 0x8d4 <USART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     8d8:	8c b9       	out	0x0c, r24	; 12
     8da:	08 95       	ret

000008dc <USART_Receive>:
}
unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
     8dc:	5f 9b       	sbis	0x0b, 7	; 11
     8de:	fe cf       	rjmp	.-4      	; 0x8dc <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR0;
     8e0:	8c b1       	in	r24, 0x0c	; 12
}
     8e2:	08 95       	ret

000008e4 <USART_Init>:
void USART_Init( unsigned int ubrr )
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     8e4:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     8e6:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     8e8:	88 e1       	ldi	r24, 0x18	; 24
     8ea:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     8ec:	8e e8       	ldi	r24, 0x8E	; 142
     8ee:	80 bd       	out	0x20, r24	; 32
	fdevopen(USART_Transmit,USART_Receive);
     8f0:	6e e6       	ldi	r22, 0x6E	; 110
     8f2:	74 e0       	ldi	r23, 0x04	; 4
     8f4:	8a e6       	ldi	r24, 0x6A	; 106
     8f6:	94 e0       	ldi	r25, 0x04	; 4
     8f8:	0e 94 a7 04 	call	0x94e	; 0x94e <fdevopen>
     8fc:	08 95       	ret

000008fe <__divmodhi4>:
     8fe:	97 fb       	bst	r25, 7
     900:	07 2e       	mov	r0, r23
     902:	16 f4       	brtc	.+4      	; 0x908 <__divmodhi4+0xa>
     904:	00 94       	com	r0
     906:	07 d0       	rcall	.+14     	; 0x916 <__divmodhi4_neg1>
     908:	77 fd       	sbrc	r23, 7
     90a:	09 d0       	rcall	.+18     	; 0x91e <__divmodhi4_neg2>
     90c:	0e 94 93 04 	call	0x926	; 0x926 <__udivmodhi4>
     910:	07 fc       	sbrc	r0, 7
     912:	05 d0       	rcall	.+10     	; 0x91e <__divmodhi4_neg2>
     914:	3e f4       	brtc	.+14     	; 0x924 <__divmodhi4_exit>

00000916 <__divmodhi4_neg1>:
     916:	90 95       	com	r25
     918:	81 95       	neg	r24
     91a:	9f 4f       	sbci	r25, 0xFF	; 255
     91c:	08 95       	ret

0000091e <__divmodhi4_neg2>:
     91e:	70 95       	com	r23
     920:	61 95       	neg	r22
     922:	7f 4f       	sbci	r23, 0xFF	; 255

00000924 <__divmodhi4_exit>:
     924:	08 95       	ret

00000926 <__udivmodhi4>:
     926:	aa 1b       	sub	r26, r26
     928:	bb 1b       	sub	r27, r27
     92a:	51 e1       	ldi	r21, 0x11	; 17
     92c:	07 c0       	rjmp	.+14     	; 0x93c <__udivmodhi4_ep>

0000092e <__udivmodhi4_loop>:
     92e:	aa 1f       	adc	r26, r26
     930:	bb 1f       	adc	r27, r27
     932:	a6 17       	cp	r26, r22
     934:	b7 07       	cpc	r27, r23
     936:	10 f0       	brcs	.+4      	; 0x93c <__udivmodhi4_ep>
     938:	a6 1b       	sub	r26, r22
     93a:	b7 0b       	sbc	r27, r23

0000093c <__udivmodhi4_ep>:
     93c:	88 1f       	adc	r24, r24
     93e:	99 1f       	adc	r25, r25
     940:	5a 95       	dec	r21
     942:	a9 f7       	brne	.-22     	; 0x92e <__udivmodhi4_loop>
     944:	80 95       	com	r24
     946:	90 95       	com	r25
     948:	bc 01       	movw	r22, r24
     94a:	cd 01       	movw	r24, r26
     94c:	08 95       	ret

0000094e <fdevopen>:
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	00 97       	sbiw	r24, 0x00	; 0
     958:	31 f4       	brne	.+12     	; 0x966 <fdevopen+0x18>
     95a:	61 15       	cp	r22, r1
     95c:	71 05       	cpc	r23, r1
     95e:	19 f4       	brne	.+6      	; 0x966 <fdevopen+0x18>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	3a c0       	rjmp	.+116    	; 0x9da <fdevopen+0x8c>
     966:	8b 01       	movw	r16, r22
     968:	ec 01       	movw	r28, r24
     96a:	6e e0       	ldi	r22, 0x0E	; 14
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	0e 94 19 07 	call	0xe32	; 0xe32 <calloc>
     976:	fc 01       	movw	r30, r24
     978:	89 2b       	or	r24, r25
     97a:	91 f3       	breq	.-28     	; 0x960 <fdevopen+0x12>
     97c:	80 e8       	ldi	r24, 0x80	; 128
     97e:	83 83       	std	Z+3, r24	; 0x03
     980:	01 15       	cp	r16, r1
     982:	11 05       	cpc	r17, r1
     984:	71 f0       	breq	.+28     	; 0x9a2 <fdevopen+0x54>
     986:	13 87       	std	Z+11, r17	; 0x0b
     988:	02 87       	std	Z+10, r16	; 0x0a
     98a:	81 e8       	ldi	r24, 0x81	; 129
     98c:	83 83       	std	Z+3, r24	; 0x03
     98e:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <__iob>
     992:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <__iob+0x1>
     996:	89 2b       	or	r24, r25
     998:	21 f4       	brne	.+8      	; 0x9a2 <fdevopen+0x54>
     99a:	f0 93 90 01 	sts	0x0190, r31	; 0x800190 <__iob+0x1>
     99e:	e0 93 8f 01 	sts	0x018F, r30	; 0x80018f <__iob>
     9a2:	20 97       	sbiw	r28, 0x00	; 0
     9a4:	c9 f0       	breq	.+50     	; 0x9d8 <fdevopen+0x8a>
     9a6:	d1 87       	std	Z+9, r29	; 0x09
     9a8:	c0 87       	std	Z+8, r28	; 0x08
     9aa:	83 81       	ldd	r24, Z+3	; 0x03
     9ac:	82 60       	ori	r24, 0x02	; 2
     9ae:	83 83       	std	Z+3, r24	; 0x03
     9b0:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <__iob+0x2>
     9b4:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <__iob+0x3>
     9b8:	89 2b       	or	r24, r25
     9ba:	71 f4       	brne	.+28     	; 0x9d8 <fdevopen+0x8a>
     9bc:	f0 93 92 01 	sts	0x0192, r31	; 0x800192 <__iob+0x3>
     9c0:	e0 93 91 01 	sts	0x0191, r30	; 0x800191 <__iob+0x2>
     9c4:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <__iob+0x4>
     9c8:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <__iob+0x5>
     9cc:	89 2b       	or	r24, r25
     9ce:	21 f4       	brne	.+8      	; 0x9d8 <fdevopen+0x8a>
     9d0:	f0 93 94 01 	sts	0x0194, r31	; 0x800194 <__iob+0x5>
     9d4:	e0 93 93 01 	sts	0x0193, r30	; 0x800193 <__iob+0x4>
     9d8:	cf 01       	movw	r24, r30
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	08 95       	ret

000009e4 <printf>:
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	e8 ef       	ldi	r30, 0xF8	; 248
     9ea:	f4 e0       	ldi	r31, 0x04	; 4
     9ec:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__prologue_saves__+0x20>
     9f0:	ae 01       	movw	r20, r28
     9f2:	4b 5f       	subi	r20, 0xFB	; 251
     9f4:	5f 4f       	sbci	r21, 0xFF	; 255
     9f6:	fa 01       	movw	r30, r20
     9f8:	61 91       	ld	r22, Z+
     9fa:	71 91       	ld	r23, Z+
     9fc:	af 01       	movw	r20, r30
     9fe:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <__iob+0x2>
     a02:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <__iob+0x3>
     a06:	0e 94 38 05 	call	0xa70	; 0xa70 <vfprintf>
     a0a:	e2 e0       	ldi	r30, 0x02	; 2
     a0c:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__epilogue_restores__+0x20>

00000a10 <puts>:
     a10:	0f 93       	push	r16
     a12:	1f 93       	push	r17
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	e0 91 91 01 	lds	r30, 0x0191	; 0x800191 <__iob+0x2>
     a1c:	f0 91 92 01 	lds	r31, 0x0192	; 0x800192 <__iob+0x3>
     a20:	23 81       	ldd	r18, Z+3	; 0x03
     a22:	21 ff       	sbrs	r18, 1
     a24:	1b c0       	rjmp	.+54     	; 0xa5c <puts+0x4c>
     a26:	8c 01       	movw	r16, r24
     a28:	d0 e0       	ldi	r29, 0x00	; 0
     a2a:	c0 e0       	ldi	r28, 0x00	; 0
     a2c:	f8 01       	movw	r30, r16
     a2e:	81 91       	ld	r24, Z+
     a30:	8f 01       	movw	r16, r30
     a32:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <__iob+0x2>
     a36:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <__iob+0x3>
     a3a:	db 01       	movw	r26, r22
     a3c:	18 96       	adiw	r26, 0x08	; 8
     a3e:	ed 91       	ld	r30, X+
     a40:	fc 91       	ld	r31, X
     a42:	19 97       	sbiw	r26, 0x09	; 9
     a44:	88 23       	and	r24, r24
     a46:	31 f0       	breq	.+12     	; 0xa54 <puts+0x44>
     a48:	09 95       	icall
     a4a:	89 2b       	or	r24, r25
     a4c:	79 f3       	breq	.-34     	; 0xa2c <puts+0x1c>
     a4e:	df ef       	ldi	r29, 0xFF	; 255
     a50:	cf ef       	ldi	r28, 0xFF	; 255
     a52:	ec cf       	rjmp	.-40     	; 0xa2c <puts+0x1c>
     a54:	8a e0       	ldi	r24, 0x0A	; 10
     a56:	09 95       	icall
     a58:	89 2b       	or	r24, r25
     a5a:	19 f0       	breq	.+6      	; 0xa62 <puts+0x52>
     a5c:	8f ef       	ldi	r24, 0xFF	; 255
     a5e:	9f ef       	ldi	r25, 0xFF	; 255
     a60:	02 c0       	rjmp	.+4      	; 0xa66 <puts+0x56>
     a62:	8d 2f       	mov	r24, r29
     a64:	9c 2f       	mov	r25, r28
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	1f 91       	pop	r17
     a6c:	0f 91       	pop	r16
     a6e:	08 95       	ret

00000a70 <vfprintf>:
     a70:	ab e0       	ldi	r26, 0x0B	; 11
     a72:	b0 e0       	ldi	r27, 0x00	; 0
     a74:	ee e3       	ldi	r30, 0x3E	; 62
     a76:	f5 e0       	ldi	r31, 0x05	; 5
     a78:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__prologue_saves__>
     a7c:	6c 01       	movw	r12, r24
     a7e:	7b 01       	movw	r14, r22
     a80:	8a 01       	movw	r16, r20
     a82:	fc 01       	movw	r30, r24
     a84:	17 82       	std	Z+7, r1	; 0x07
     a86:	16 82       	std	Z+6, r1	; 0x06
     a88:	83 81       	ldd	r24, Z+3	; 0x03
     a8a:	81 ff       	sbrs	r24, 1
     a8c:	cc c1       	rjmp	.+920    	; 0xe26 <vfprintf+0x3b6>
     a8e:	ce 01       	movw	r24, r28
     a90:	01 96       	adiw	r24, 0x01	; 1
     a92:	3c 01       	movw	r6, r24
     a94:	f6 01       	movw	r30, r12
     a96:	93 81       	ldd	r25, Z+3	; 0x03
     a98:	f7 01       	movw	r30, r14
     a9a:	93 fd       	sbrc	r25, 3
     a9c:	85 91       	lpm	r24, Z+
     a9e:	93 ff       	sbrs	r25, 3
     aa0:	81 91       	ld	r24, Z+
     aa2:	7f 01       	movw	r14, r30
     aa4:	88 23       	and	r24, r24
     aa6:	09 f4       	brne	.+2      	; 0xaaa <vfprintf+0x3a>
     aa8:	ba c1       	rjmp	.+884    	; 0xe1e <vfprintf+0x3ae>
     aaa:	85 32       	cpi	r24, 0x25	; 37
     aac:	39 f4       	brne	.+14     	; 0xabc <vfprintf+0x4c>
     aae:	93 fd       	sbrc	r25, 3
     ab0:	85 91       	lpm	r24, Z+
     ab2:	93 ff       	sbrs	r25, 3
     ab4:	81 91       	ld	r24, Z+
     ab6:	7f 01       	movw	r14, r30
     ab8:	85 32       	cpi	r24, 0x25	; 37
     aba:	29 f4       	brne	.+10     	; 0xac6 <vfprintf+0x56>
     abc:	b6 01       	movw	r22, r12
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	0e 94 73 08 	call	0x10e6	; 0x10e6 <fputc>
     ac4:	e7 cf       	rjmp	.-50     	; 0xa94 <vfprintf+0x24>
     ac6:	91 2c       	mov	r9, r1
     ac8:	21 2c       	mov	r2, r1
     aca:	31 2c       	mov	r3, r1
     acc:	ff e1       	ldi	r31, 0x1F	; 31
     ace:	f3 15       	cp	r31, r3
     ad0:	d8 f0       	brcs	.+54     	; 0xb08 <vfprintf+0x98>
     ad2:	8b 32       	cpi	r24, 0x2B	; 43
     ad4:	79 f0       	breq	.+30     	; 0xaf4 <vfprintf+0x84>
     ad6:	38 f4       	brcc	.+14     	; 0xae6 <vfprintf+0x76>
     ad8:	80 32       	cpi	r24, 0x20	; 32
     ada:	79 f0       	breq	.+30     	; 0xafa <vfprintf+0x8a>
     adc:	83 32       	cpi	r24, 0x23	; 35
     ade:	a1 f4       	brne	.+40     	; 0xb08 <vfprintf+0x98>
     ae0:	23 2d       	mov	r18, r3
     ae2:	20 61       	ori	r18, 0x10	; 16
     ae4:	1d c0       	rjmp	.+58     	; 0xb20 <vfprintf+0xb0>
     ae6:	8d 32       	cpi	r24, 0x2D	; 45
     ae8:	61 f0       	breq	.+24     	; 0xb02 <vfprintf+0x92>
     aea:	80 33       	cpi	r24, 0x30	; 48
     aec:	69 f4       	brne	.+26     	; 0xb08 <vfprintf+0x98>
     aee:	23 2d       	mov	r18, r3
     af0:	21 60       	ori	r18, 0x01	; 1
     af2:	16 c0       	rjmp	.+44     	; 0xb20 <vfprintf+0xb0>
     af4:	83 2d       	mov	r24, r3
     af6:	82 60       	ori	r24, 0x02	; 2
     af8:	38 2e       	mov	r3, r24
     afa:	e3 2d       	mov	r30, r3
     afc:	e4 60       	ori	r30, 0x04	; 4
     afe:	3e 2e       	mov	r3, r30
     b00:	2a c0       	rjmp	.+84     	; 0xb56 <vfprintf+0xe6>
     b02:	f3 2d       	mov	r31, r3
     b04:	f8 60       	ori	r31, 0x08	; 8
     b06:	1d c0       	rjmp	.+58     	; 0xb42 <vfprintf+0xd2>
     b08:	37 fc       	sbrc	r3, 7
     b0a:	2d c0       	rjmp	.+90     	; 0xb66 <vfprintf+0xf6>
     b0c:	20 ed       	ldi	r18, 0xD0	; 208
     b0e:	28 0f       	add	r18, r24
     b10:	2a 30       	cpi	r18, 0x0A	; 10
     b12:	40 f0       	brcs	.+16     	; 0xb24 <vfprintf+0xb4>
     b14:	8e 32       	cpi	r24, 0x2E	; 46
     b16:	b9 f4       	brne	.+46     	; 0xb46 <vfprintf+0xd6>
     b18:	36 fc       	sbrc	r3, 6
     b1a:	81 c1       	rjmp	.+770    	; 0xe1e <vfprintf+0x3ae>
     b1c:	23 2d       	mov	r18, r3
     b1e:	20 64       	ori	r18, 0x40	; 64
     b20:	32 2e       	mov	r3, r18
     b22:	19 c0       	rjmp	.+50     	; 0xb56 <vfprintf+0xe6>
     b24:	36 fe       	sbrs	r3, 6
     b26:	06 c0       	rjmp	.+12     	; 0xb34 <vfprintf+0xc4>
     b28:	8a e0       	ldi	r24, 0x0A	; 10
     b2a:	98 9e       	mul	r9, r24
     b2c:	20 0d       	add	r18, r0
     b2e:	11 24       	eor	r1, r1
     b30:	92 2e       	mov	r9, r18
     b32:	11 c0       	rjmp	.+34     	; 0xb56 <vfprintf+0xe6>
     b34:	ea e0       	ldi	r30, 0x0A	; 10
     b36:	2e 9e       	mul	r2, r30
     b38:	20 0d       	add	r18, r0
     b3a:	11 24       	eor	r1, r1
     b3c:	22 2e       	mov	r2, r18
     b3e:	f3 2d       	mov	r31, r3
     b40:	f0 62       	ori	r31, 0x20	; 32
     b42:	3f 2e       	mov	r3, r31
     b44:	08 c0       	rjmp	.+16     	; 0xb56 <vfprintf+0xe6>
     b46:	8c 36       	cpi	r24, 0x6C	; 108
     b48:	21 f4       	brne	.+8      	; 0xb52 <vfprintf+0xe2>
     b4a:	83 2d       	mov	r24, r3
     b4c:	80 68       	ori	r24, 0x80	; 128
     b4e:	38 2e       	mov	r3, r24
     b50:	02 c0       	rjmp	.+4      	; 0xb56 <vfprintf+0xe6>
     b52:	88 36       	cpi	r24, 0x68	; 104
     b54:	41 f4       	brne	.+16     	; 0xb66 <vfprintf+0xf6>
     b56:	f7 01       	movw	r30, r14
     b58:	93 fd       	sbrc	r25, 3
     b5a:	85 91       	lpm	r24, Z+
     b5c:	93 ff       	sbrs	r25, 3
     b5e:	81 91       	ld	r24, Z+
     b60:	7f 01       	movw	r14, r30
     b62:	81 11       	cpse	r24, r1
     b64:	b3 cf       	rjmp	.-154    	; 0xacc <vfprintf+0x5c>
     b66:	98 2f       	mov	r25, r24
     b68:	9f 7d       	andi	r25, 0xDF	; 223
     b6a:	95 54       	subi	r25, 0x45	; 69
     b6c:	93 30       	cpi	r25, 0x03	; 3
     b6e:	28 f4       	brcc	.+10     	; 0xb7a <vfprintf+0x10a>
     b70:	0c 5f       	subi	r16, 0xFC	; 252
     b72:	1f 4f       	sbci	r17, 0xFF	; 255
     b74:	9f e3       	ldi	r25, 0x3F	; 63
     b76:	99 83       	std	Y+1, r25	; 0x01
     b78:	0d c0       	rjmp	.+26     	; 0xb94 <vfprintf+0x124>
     b7a:	83 36       	cpi	r24, 0x63	; 99
     b7c:	31 f0       	breq	.+12     	; 0xb8a <vfprintf+0x11a>
     b7e:	83 37       	cpi	r24, 0x73	; 115
     b80:	71 f0       	breq	.+28     	; 0xb9e <vfprintf+0x12e>
     b82:	83 35       	cpi	r24, 0x53	; 83
     b84:	09 f0       	breq	.+2      	; 0xb88 <vfprintf+0x118>
     b86:	59 c0       	rjmp	.+178    	; 0xc3a <vfprintf+0x1ca>
     b88:	21 c0       	rjmp	.+66     	; 0xbcc <vfprintf+0x15c>
     b8a:	f8 01       	movw	r30, r16
     b8c:	80 81       	ld	r24, Z
     b8e:	89 83       	std	Y+1, r24	; 0x01
     b90:	0e 5f       	subi	r16, 0xFE	; 254
     b92:	1f 4f       	sbci	r17, 0xFF	; 255
     b94:	88 24       	eor	r8, r8
     b96:	83 94       	inc	r8
     b98:	91 2c       	mov	r9, r1
     b9a:	53 01       	movw	r10, r6
     b9c:	13 c0       	rjmp	.+38     	; 0xbc4 <vfprintf+0x154>
     b9e:	28 01       	movw	r4, r16
     ba0:	f2 e0       	ldi	r31, 0x02	; 2
     ba2:	4f 0e       	add	r4, r31
     ba4:	51 1c       	adc	r5, r1
     ba6:	f8 01       	movw	r30, r16
     ba8:	a0 80       	ld	r10, Z
     baa:	b1 80       	ldd	r11, Z+1	; 0x01
     bac:	36 fe       	sbrs	r3, 6
     bae:	03 c0       	rjmp	.+6      	; 0xbb6 <vfprintf+0x146>
     bb0:	69 2d       	mov	r22, r9
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <vfprintf+0x14a>
     bb6:	6f ef       	ldi	r22, 0xFF	; 255
     bb8:	7f ef       	ldi	r23, 0xFF	; 255
     bba:	c5 01       	movw	r24, r10
     bbc:	0e 94 68 08 	call	0x10d0	; 0x10d0 <strnlen>
     bc0:	4c 01       	movw	r8, r24
     bc2:	82 01       	movw	r16, r4
     bc4:	f3 2d       	mov	r31, r3
     bc6:	ff 77       	andi	r31, 0x7F	; 127
     bc8:	3f 2e       	mov	r3, r31
     bca:	16 c0       	rjmp	.+44     	; 0xbf8 <vfprintf+0x188>
     bcc:	28 01       	movw	r4, r16
     bce:	22 e0       	ldi	r18, 0x02	; 2
     bd0:	42 0e       	add	r4, r18
     bd2:	51 1c       	adc	r5, r1
     bd4:	f8 01       	movw	r30, r16
     bd6:	a0 80       	ld	r10, Z
     bd8:	b1 80       	ldd	r11, Z+1	; 0x01
     bda:	36 fe       	sbrs	r3, 6
     bdc:	03 c0       	rjmp	.+6      	; 0xbe4 <vfprintf+0x174>
     bde:	69 2d       	mov	r22, r9
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	02 c0       	rjmp	.+4      	; 0xbe8 <vfprintf+0x178>
     be4:	6f ef       	ldi	r22, 0xFF	; 255
     be6:	7f ef       	ldi	r23, 0xFF	; 255
     be8:	c5 01       	movw	r24, r10
     bea:	0e 94 56 08 	call	0x10ac	; 0x10ac <strnlen_P>
     bee:	4c 01       	movw	r8, r24
     bf0:	f3 2d       	mov	r31, r3
     bf2:	f0 68       	ori	r31, 0x80	; 128
     bf4:	3f 2e       	mov	r3, r31
     bf6:	82 01       	movw	r16, r4
     bf8:	33 fc       	sbrc	r3, 3
     bfa:	1b c0       	rjmp	.+54     	; 0xc32 <vfprintf+0x1c2>
     bfc:	82 2d       	mov	r24, r2
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	88 16       	cp	r8, r24
     c02:	99 06       	cpc	r9, r25
     c04:	b0 f4       	brcc	.+44     	; 0xc32 <vfprintf+0x1c2>
     c06:	b6 01       	movw	r22, r12
     c08:	80 e2       	ldi	r24, 0x20	; 32
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 73 08 	call	0x10e6	; 0x10e6 <fputc>
     c10:	2a 94       	dec	r2
     c12:	f4 cf       	rjmp	.-24     	; 0xbfc <vfprintf+0x18c>
     c14:	f5 01       	movw	r30, r10
     c16:	37 fc       	sbrc	r3, 7
     c18:	85 91       	lpm	r24, Z+
     c1a:	37 fe       	sbrs	r3, 7
     c1c:	81 91       	ld	r24, Z+
     c1e:	5f 01       	movw	r10, r30
     c20:	b6 01       	movw	r22, r12
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	0e 94 73 08 	call	0x10e6	; 0x10e6 <fputc>
     c28:	21 10       	cpse	r2, r1
     c2a:	2a 94       	dec	r2
     c2c:	21 e0       	ldi	r18, 0x01	; 1
     c2e:	82 1a       	sub	r8, r18
     c30:	91 08       	sbc	r9, r1
     c32:	81 14       	cp	r8, r1
     c34:	91 04       	cpc	r9, r1
     c36:	71 f7       	brne	.-36     	; 0xc14 <vfprintf+0x1a4>
     c38:	e8 c0       	rjmp	.+464    	; 0xe0a <vfprintf+0x39a>
     c3a:	84 36       	cpi	r24, 0x64	; 100
     c3c:	11 f0       	breq	.+4      	; 0xc42 <vfprintf+0x1d2>
     c3e:	89 36       	cpi	r24, 0x69	; 105
     c40:	41 f5       	brne	.+80     	; 0xc92 <vfprintf+0x222>
     c42:	f8 01       	movw	r30, r16
     c44:	37 fe       	sbrs	r3, 7
     c46:	07 c0       	rjmp	.+14     	; 0xc56 <vfprintf+0x1e6>
     c48:	60 81       	ld	r22, Z
     c4a:	71 81       	ldd	r23, Z+1	; 0x01
     c4c:	82 81       	ldd	r24, Z+2	; 0x02
     c4e:	93 81       	ldd	r25, Z+3	; 0x03
     c50:	0c 5f       	subi	r16, 0xFC	; 252
     c52:	1f 4f       	sbci	r17, 0xFF	; 255
     c54:	08 c0       	rjmp	.+16     	; 0xc66 <vfprintf+0x1f6>
     c56:	60 81       	ld	r22, Z
     c58:	71 81       	ldd	r23, Z+1	; 0x01
     c5a:	07 2e       	mov	r0, r23
     c5c:	00 0c       	add	r0, r0
     c5e:	88 0b       	sbc	r24, r24
     c60:	99 0b       	sbc	r25, r25
     c62:	0e 5f       	subi	r16, 0xFE	; 254
     c64:	1f 4f       	sbci	r17, 0xFF	; 255
     c66:	f3 2d       	mov	r31, r3
     c68:	ff 76       	andi	r31, 0x6F	; 111
     c6a:	3f 2e       	mov	r3, r31
     c6c:	97 ff       	sbrs	r25, 7
     c6e:	09 c0       	rjmp	.+18     	; 0xc82 <vfprintf+0x212>
     c70:	90 95       	com	r25
     c72:	80 95       	com	r24
     c74:	70 95       	com	r23
     c76:	61 95       	neg	r22
     c78:	7f 4f       	sbci	r23, 0xFF	; 255
     c7a:	8f 4f       	sbci	r24, 0xFF	; 255
     c7c:	9f 4f       	sbci	r25, 0xFF	; 255
     c7e:	f0 68       	ori	r31, 0x80	; 128
     c80:	3f 2e       	mov	r3, r31
     c82:	2a e0       	ldi	r18, 0x0A	; 10
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	a3 01       	movw	r20, r6
     c88:	0e 94 af 08 	call	0x115e	; 0x115e <__ultoa_invert>
     c8c:	88 2e       	mov	r8, r24
     c8e:	86 18       	sub	r8, r6
     c90:	45 c0       	rjmp	.+138    	; 0xd1c <vfprintf+0x2ac>
     c92:	85 37       	cpi	r24, 0x75	; 117
     c94:	31 f4       	brne	.+12     	; 0xca2 <vfprintf+0x232>
     c96:	23 2d       	mov	r18, r3
     c98:	2f 7e       	andi	r18, 0xEF	; 239
     c9a:	b2 2e       	mov	r11, r18
     c9c:	2a e0       	ldi	r18, 0x0A	; 10
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	25 c0       	rjmp	.+74     	; 0xcec <vfprintf+0x27c>
     ca2:	93 2d       	mov	r25, r3
     ca4:	99 7f       	andi	r25, 0xF9	; 249
     ca6:	b9 2e       	mov	r11, r25
     ca8:	8f 36       	cpi	r24, 0x6F	; 111
     caa:	c1 f0       	breq	.+48     	; 0xcdc <vfprintf+0x26c>
     cac:	18 f4       	brcc	.+6      	; 0xcb4 <vfprintf+0x244>
     cae:	88 35       	cpi	r24, 0x58	; 88
     cb0:	79 f0       	breq	.+30     	; 0xcd0 <vfprintf+0x260>
     cb2:	b5 c0       	rjmp	.+362    	; 0xe1e <vfprintf+0x3ae>
     cb4:	80 37       	cpi	r24, 0x70	; 112
     cb6:	19 f0       	breq	.+6      	; 0xcbe <vfprintf+0x24e>
     cb8:	88 37       	cpi	r24, 0x78	; 120
     cba:	21 f0       	breq	.+8      	; 0xcc4 <vfprintf+0x254>
     cbc:	b0 c0       	rjmp	.+352    	; 0xe1e <vfprintf+0x3ae>
     cbe:	e9 2f       	mov	r30, r25
     cc0:	e0 61       	ori	r30, 0x10	; 16
     cc2:	be 2e       	mov	r11, r30
     cc4:	b4 fe       	sbrs	r11, 4
     cc6:	0d c0       	rjmp	.+26     	; 0xce2 <vfprintf+0x272>
     cc8:	fb 2d       	mov	r31, r11
     cca:	f4 60       	ori	r31, 0x04	; 4
     ccc:	bf 2e       	mov	r11, r31
     cce:	09 c0       	rjmp	.+18     	; 0xce2 <vfprintf+0x272>
     cd0:	34 fe       	sbrs	r3, 4
     cd2:	0a c0       	rjmp	.+20     	; 0xce8 <vfprintf+0x278>
     cd4:	29 2f       	mov	r18, r25
     cd6:	26 60       	ori	r18, 0x06	; 6
     cd8:	b2 2e       	mov	r11, r18
     cda:	06 c0       	rjmp	.+12     	; 0xce8 <vfprintf+0x278>
     cdc:	28 e0       	ldi	r18, 0x08	; 8
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	05 c0       	rjmp	.+10     	; 0xcec <vfprintf+0x27c>
     ce2:	20 e1       	ldi	r18, 0x10	; 16
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <vfprintf+0x27c>
     ce8:	20 e1       	ldi	r18, 0x10	; 16
     cea:	32 e0       	ldi	r19, 0x02	; 2
     cec:	f8 01       	movw	r30, r16
     cee:	b7 fe       	sbrs	r11, 7
     cf0:	07 c0       	rjmp	.+14     	; 0xd00 <vfprintf+0x290>
     cf2:	60 81       	ld	r22, Z
     cf4:	71 81       	ldd	r23, Z+1	; 0x01
     cf6:	82 81       	ldd	r24, Z+2	; 0x02
     cf8:	93 81       	ldd	r25, Z+3	; 0x03
     cfa:	0c 5f       	subi	r16, 0xFC	; 252
     cfc:	1f 4f       	sbci	r17, 0xFF	; 255
     cfe:	06 c0       	rjmp	.+12     	; 0xd0c <vfprintf+0x29c>
     d00:	60 81       	ld	r22, Z
     d02:	71 81       	ldd	r23, Z+1	; 0x01
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e 5f       	subi	r16, 0xFE	; 254
     d0a:	1f 4f       	sbci	r17, 0xFF	; 255
     d0c:	a3 01       	movw	r20, r6
     d0e:	0e 94 af 08 	call	0x115e	; 0x115e <__ultoa_invert>
     d12:	88 2e       	mov	r8, r24
     d14:	86 18       	sub	r8, r6
     d16:	fb 2d       	mov	r31, r11
     d18:	ff 77       	andi	r31, 0x7F	; 127
     d1a:	3f 2e       	mov	r3, r31
     d1c:	36 fe       	sbrs	r3, 6
     d1e:	0d c0       	rjmp	.+26     	; 0xd3a <vfprintf+0x2ca>
     d20:	23 2d       	mov	r18, r3
     d22:	2e 7f       	andi	r18, 0xFE	; 254
     d24:	a2 2e       	mov	r10, r18
     d26:	89 14       	cp	r8, r9
     d28:	58 f4       	brcc	.+22     	; 0xd40 <vfprintf+0x2d0>
     d2a:	34 fe       	sbrs	r3, 4
     d2c:	0b c0       	rjmp	.+22     	; 0xd44 <vfprintf+0x2d4>
     d2e:	32 fc       	sbrc	r3, 2
     d30:	09 c0       	rjmp	.+18     	; 0xd44 <vfprintf+0x2d4>
     d32:	83 2d       	mov	r24, r3
     d34:	8e 7e       	andi	r24, 0xEE	; 238
     d36:	a8 2e       	mov	r10, r24
     d38:	05 c0       	rjmp	.+10     	; 0xd44 <vfprintf+0x2d4>
     d3a:	b8 2c       	mov	r11, r8
     d3c:	a3 2c       	mov	r10, r3
     d3e:	03 c0       	rjmp	.+6      	; 0xd46 <vfprintf+0x2d6>
     d40:	b8 2c       	mov	r11, r8
     d42:	01 c0       	rjmp	.+2      	; 0xd46 <vfprintf+0x2d6>
     d44:	b9 2c       	mov	r11, r9
     d46:	a4 fe       	sbrs	r10, 4
     d48:	0f c0       	rjmp	.+30     	; 0xd68 <vfprintf+0x2f8>
     d4a:	fe 01       	movw	r30, r28
     d4c:	e8 0d       	add	r30, r8
     d4e:	f1 1d       	adc	r31, r1
     d50:	80 81       	ld	r24, Z
     d52:	80 33       	cpi	r24, 0x30	; 48
     d54:	21 f4       	brne	.+8      	; 0xd5e <vfprintf+0x2ee>
     d56:	9a 2d       	mov	r25, r10
     d58:	99 7e       	andi	r25, 0xE9	; 233
     d5a:	a9 2e       	mov	r10, r25
     d5c:	09 c0       	rjmp	.+18     	; 0xd70 <vfprintf+0x300>
     d5e:	a2 fe       	sbrs	r10, 2
     d60:	06 c0       	rjmp	.+12     	; 0xd6e <vfprintf+0x2fe>
     d62:	b3 94       	inc	r11
     d64:	b3 94       	inc	r11
     d66:	04 c0       	rjmp	.+8      	; 0xd70 <vfprintf+0x300>
     d68:	8a 2d       	mov	r24, r10
     d6a:	86 78       	andi	r24, 0x86	; 134
     d6c:	09 f0       	breq	.+2      	; 0xd70 <vfprintf+0x300>
     d6e:	b3 94       	inc	r11
     d70:	a3 fc       	sbrc	r10, 3
     d72:	11 c0       	rjmp	.+34     	; 0xd96 <vfprintf+0x326>
     d74:	a0 fe       	sbrs	r10, 0
     d76:	06 c0       	rjmp	.+12     	; 0xd84 <vfprintf+0x314>
     d78:	b2 14       	cp	r11, r2
     d7a:	88 f4       	brcc	.+34     	; 0xd9e <vfprintf+0x32e>
     d7c:	28 0c       	add	r2, r8
     d7e:	92 2c       	mov	r9, r2
     d80:	9b 18       	sub	r9, r11
     d82:	0e c0       	rjmp	.+28     	; 0xda0 <vfprintf+0x330>
     d84:	b2 14       	cp	r11, r2
     d86:	60 f4       	brcc	.+24     	; 0xda0 <vfprintf+0x330>
     d88:	b6 01       	movw	r22, r12
     d8a:	80 e2       	ldi	r24, 0x20	; 32
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	0e 94 73 08 	call	0x10e6	; 0x10e6 <fputc>
     d92:	b3 94       	inc	r11
     d94:	f7 cf       	rjmp	.-18     	; 0xd84 <vfprintf+0x314>
     d96:	b2 14       	cp	r11, r2
     d98:	18 f4       	brcc	.+6      	; 0xda0 <vfprintf+0x330>
     d9a:	2b 18       	sub	r2, r11
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <vfprintf+0x332>
     d9e:	98 2c       	mov	r9, r8
     da0:	21 2c       	mov	r2, r1
     da2:	a4 fe       	sbrs	r10, 4
     da4:	10 c0       	rjmp	.+32     	; 0xdc6 <vfprintf+0x356>
     da6:	b6 01       	movw	r22, r12
     da8:	80 e3       	ldi	r24, 0x30	; 48
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	0e 94 73 08 	call	0x10e6	; 0x10e6 <fputc>
     db0:	a2 fe       	sbrs	r10, 2
     db2:	17 c0       	rjmp	.+46     	; 0xde2 <vfprintf+0x372>
     db4:	a1 fc       	sbrc	r10, 1
     db6:	03 c0       	rjmp	.+6      	; 0xdbe <vfprintf+0x34e>
     db8:	88 e7       	ldi	r24, 0x78	; 120
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <vfprintf+0x352>
     dbe:	88 e5       	ldi	r24, 0x58	; 88
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	b6 01       	movw	r22, r12
     dc4:	0c c0       	rjmp	.+24     	; 0xdde <vfprintf+0x36e>
     dc6:	8a 2d       	mov	r24, r10
     dc8:	86 78       	andi	r24, 0x86	; 134
     dca:	59 f0       	breq	.+22     	; 0xde2 <vfprintf+0x372>
     dcc:	a1 fe       	sbrs	r10, 1
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <vfprintf+0x364>
     dd0:	8b e2       	ldi	r24, 0x2B	; 43
     dd2:	01 c0       	rjmp	.+2      	; 0xdd6 <vfprintf+0x366>
     dd4:	80 e2       	ldi	r24, 0x20	; 32
     dd6:	a7 fc       	sbrc	r10, 7
     dd8:	8d e2       	ldi	r24, 0x2D	; 45
     dda:	b6 01       	movw	r22, r12
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	0e 94 73 08 	call	0x10e6	; 0x10e6 <fputc>
     de2:	89 14       	cp	r8, r9
     de4:	38 f4       	brcc	.+14     	; 0xdf4 <vfprintf+0x384>
     de6:	b6 01       	movw	r22, r12
     de8:	80 e3       	ldi	r24, 0x30	; 48
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0e 94 73 08 	call	0x10e6	; 0x10e6 <fputc>
     df0:	9a 94       	dec	r9
     df2:	f7 cf       	rjmp	.-18     	; 0xde2 <vfprintf+0x372>
     df4:	8a 94       	dec	r8
     df6:	f3 01       	movw	r30, r6
     df8:	e8 0d       	add	r30, r8
     dfa:	f1 1d       	adc	r31, r1
     dfc:	80 81       	ld	r24, Z
     dfe:	b6 01       	movw	r22, r12
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 73 08 	call	0x10e6	; 0x10e6 <fputc>
     e06:	81 10       	cpse	r8, r1
     e08:	f5 cf       	rjmp	.-22     	; 0xdf4 <vfprintf+0x384>
     e0a:	22 20       	and	r2, r2
     e0c:	09 f4       	brne	.+2      	; 0xe10 <vfprintf+0x3a0>
     e0e:	42 ce       	rjmp	.-892    	; 0xa94 <vfprintf+0x24>
     e10:	b6 01       	movw	r22, r12
     e12:	80 e2       	ldi	r24, 0x20	; 32
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	0e 94 73 08 	call	0x10e6	; 0x10e6 <fputc>
     e1a:	2a 94       	dec	r2
     e1c:	f6 cf       	rjmp	.-20     	; 0xe0a <vfprintf+0x39a>
     e1e:	f6 01       	movw	r30, r12
     e20:	86 81       	ldd	r24, Z+6	; 0x06
     e22:	97 81       	ldd	r25, Z+7	; 0x07
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <vfprintf+0x3ba>
     e26:	8f ef       	ldi	r24, 0xFF	; 255
     e28:	9f ef       	ldi	r25, 0xFF	; 255
     e2a:	2b 96       	adiw	r28, 0x0b	; 11
     e2c:	e2 e1       	ldi	r30, 0x12	; 18
     e2e:	0c 94 29 09 	jmp	0x1252	; 0x1252 <__epilogue_restores__>

00000e32 <calloc>:
     e32:	0f 93       	push	r16
     e34:	1f 93       	push	r17
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	86 9f       	mul	r24, r22
     e3c:	80 01       	movw	r16, r0
     e3e:	87 9f       	mul	r24, r23
     e40:	10 0d       	add	r17, r0
     e42:	96 9f       	mul	r25, r22
     e44:	10 0d       	add	r17, r0
     e46:	11 24       	eor	r1, r1
     e48:	c8 01       	movw	r24, r16
     e4a:	0e 94 35 07 	call	0xe6a	; 0xe6a <malloc>
     e4e:	ec 01       	movw	r28, r24
     e50:	00 97       	sbiw	r24, 0x00	; 0
     e52:	29 f0       	breq	.+10     	; 0xe5e <calloc+0x2c>
     e54:	a8 01       	movw	r20, r16
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <memset>
     e5e:	ce 01       	movw	r24, r28
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	1f 91       	pop	r17
     e66:	0f 91       	pop	r16
     e68:	08 95       	ret

00000e6a <malloc>:
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	82 30       	cpi	r24, 0x02	; 2
     e74:	91 05       	cpc	r25, r1
     e76:	10 f4       	brcc	.+4      	; 0xe7c <malloc+0x12>
     e78:	82 e0       	ldi	r24, 0x02	; 2
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <__flp>
     e80:	f0 91 98 01 	lds	r31, 0x0198	; 0x800198 <__flp+0x1>
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	a0 e0       	ldi	r26, 0x00	; 0
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	30 97       	sbiw	r30, 0x00	; 0
     e8e:	19 f1       	breq	.+70     	; 0xed6 <malloc+0x6c>
     e90:	40 81       	ld	r20, Z
     e92:	51 81       	ldd	r21, Z+1	; 0x01
     e94:	02 81       	ldd	r16, Z+2	; 0x02
     e96:	13 81       	ldd	r17, Z+3	; 0x03
     e98:	48 17       	cp	r20, r24
     e9a:	59 07       	cpc	r21, r25
     e9c:	c8 f0       	brcs	.+50     	; 0xed0 <malloc+0x66>
     e9e:	84 17       	cp	r24, r20
     ea0:	95 07       	cpc	r25, r21
     ea2:	69 f4       	brne	.+26     	; 0xebe <malloc+0x54>
     ea4:	10 97       	sbiw	r26, 0x00	; 0
     ea6:	31 f0       	breq	.+12     	; 0xeb4 <malloc+0x4a>
     ea8:	12 96       	adiw	r26, 0x02	; 2
     eaa:	0c 93       	st	X, r16
     eac:	12 97       	sbiw	r26, 0x02	; 2
     eae:	13 96       	adiw	r26, 0x03	; 3
     eb0:	1c 93       	st	X, r17
     eb2:	27 c0       	rjmp	.+78     	; 0xf02 <malloc+0x98>
     eb4:	00 93 97 01 	sts	0x0197, r16	; 0x800197 <__flp>
     eb8:	10 93 98 01 	sts	0x0198, r17	; 0x800198 <__flp+0x1>
     ebc:	22 c0       	rjmp	.+68     	; 0xf02 <malloc+0x98>
     ebe:	21 15       	cp	r18, r1
     ec0:	31 05       	cpc	r19, r1
     ec2:	19 f0       	breq	.+6      	; 0xeca <malloc+0x60>
     ec4:	42 17       	cp	r20, r18
     ec6:	53 07       	cpc	r21, r19
     ec8:	18 f4       	brcc	.+6      	; 0xed0 <malloc+0x66>
     eca:	9a 01       	movw	r18, r20
     ecc:	bd 01       	movw	r22, r26
     ece:	ef 01       	movw	r28, r30
     ed0:	df 01       	movw	r26, r30
     ed2:	f8 01       	movw	r30, r16
     ed4:	db cf       	rjmp	.-74     	; 0xe8c <malloc+0x22>
     ed6:	21 15       	cp	r18, r1
     ed8:	31 05       	cpc	r19, r1
     eda:	f9 f0       	breq	.+62     	; 0xf1a <malloc+0xb0>
     edc:	28 1b       	sub	r18, r24
     ede:	39 0b       	sbc	r19, r25
     ee0:	24 30       	cpi	r18, 0x04	; 4
     ee2:	31 05       	cpc	r19, r1
     ee4:	80 f4       	brcc	.+32     	; 0xf06 <malloc+0x9c>
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	9b 81       	ldd	r25, Y+3	; 0x03
     eea:	61 15       	cp	r22, r1
     eec:	71 05       	cpc	r23, r1
     eee:	21 f0       	breq	.+8      	; 0xef8 <malloc+0x8e>
     ef0:	fb 01       	movw	r30, r22
     ef2:	93 83       	std	Z+3, r25	; 0x03
     ef4:	82 83       	std	Z+2, r24	; 0x02
     ef6:	04 c0       	rjmp	.+8      	; 0xf00 <malloc+0x96>
     ef8:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <__flp+0x1>
     efc:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <__flp>
     f00:	fe 01       	movw	r30, r28
     f02:	32 96       	adiw	r30, 0x02	; 2
     f04:	44 c0       	rjmp	.+136    	; 0xf8e <malloc+0x124>
     f06:	fe 01       	movw	r30, r28
     f08:	e2 0f       	add	r30, r18
     f0a:	f3 1f       	adc	r31, r19
     f0c:	81 93       	st	Z+, r24
     f0e:	91 93       	st	Z+, r25
     f10:	22 50       	subi	r18, 0x02	; 2
     f12:	31 09       	sbc	r19, r1
     f14:	39 83       	std	Y+1, r19	; 0x01
     f16:	28 83       	st	Y, r18
     f18:	3a c0       	rjmp	.+116    	; 0xf8e <malloc+0x124>
     f1a:	20 91 95 01 	lds	r18, 0x0195	; 0x800195 <__brkval>
     f1e:	30 91 96 01 	lds	r19, 0x0196	; 0x800196 <__brkval+0x1>
     f22:	23 2b       	or	r18, r19
     f24:	41 f4       	brne	.+16     	; 0xf36 <malloc+0xcc>
     f26:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     f2a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     f2e:	30 93 96 01 	sts	0x0196, r19	; 0x800196 <__brkval+0x1>
     f32:	20 93 95 01 	sts	0x0195, r18	; 0x800195 <__brkval>
     f36:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     f3a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     f3e:	21 15       	cp	r18, r1
     f40:	31 05       	cpc	r19, r1
     f42:	41 f4       	brne	.+16     	; 0xf54 <malloc+0xea>
     f44:	2d b7       	in	r18, 0x3d	; 61
     f46:	3e b7       	in	r19, 0x3e	; 62
     f48:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     f4c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     f50:	24 1b       	sub	r18, r20
     f52:	35 0b       	sbc	r19, r21
     f54:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <__brkval>
     f58:	f0 91 96 01 	lds	r31, 0x0196	; 0x800196 <__brkval+0x1>
     f5c:	e2 17       	cp	r30, r18
     f5e:	f3 07       	cpc	r31, r19
     f60:	a0 f4       	brcc	.+40     	; 0xf8a <malloc+0x120>
     f62:	2e 1b       	sub	r18, r30
     f64:	3f 0b       	sbc	r19, r31
     f66:	28 17       	cp	r18, r24
     f68:	39 07       	cpc	r19, r25
     f6a:	78 f0       	brcs	.+30     	; 0xf8a <malloc+0x120>
     f6c:	ac 01       	movw	r20, r24
     f6e:	4e 5f       	subi	r20, 0xFE	; 254
     f70:	5f 4f       	sbci	r21, 0xFF	; 255
     f72:	24 17       	cp	r18, r20
     f74:	35 07       	cpc	r19, r21
     f76:	48 f0       	brcs	.+18     	; 0xf8a <malloc+0x120>
     f78:	4e 0f       	add	r20, r30
     f7a:	5f 1f       	adc	r21, r31
     f7c:	50 93 96 01 	sts	0x0196, r21	; 0x800196 <__brkval+0x1>
     f80:	40 93 95 01 	sts	0x0195, r20	; 0x800195 <__brkval>
     f84:	81 93       	st	Z+, r24
     f86:	91 93       	st	Z+, r25
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <malloc+0x124>
     f8a:	e0 e0       	ldi	r30, 0x00	; 0
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	cf 01       	movw	r24, r30
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	1f 91       	pop	r17
     f96:	0f 91       	pop	r16
     f98:	08 95       	ret

00000f9a <free>:
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	00 97       	sbiw	r24, 0x00	; 0
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <free+0xa>
     fa2:	81 c0       	rjmp	.+258    	; 0x10a6 <free+0x10c>
     fa4:	fc 01       	movw	r30, r24
     fa6:	32 97       	sbiw	r30, 0x02	; 2
     fa8:	13 82       	std	Z+3, r1	; 0x03
     faa:	12 82       	std	Z+2, r1	; 0x02
     fac:	a0 91 97 01 	lds	r26, 0x0197	; 0x800197 <__flp>
     fb0:	b0 91 98 01 	lds	r27, 0x0198	; 0x800198 <__flp+0x1>
     fb4:	10 97       	sbiw	r26, 0x00	; 0
     fb6:	81 f4       	brne	.+32     	; 0xfd8 <free+0x3e>
     fb8:	20 81       	ld	r18, Z
     fba:	31 81       	ldd	r19, Z+1	; 0x01
     fbc:	82 0f       	add	r24, r18
     fbe:	93 1f       	adc	r25, r19
     fc0:	20 91 95 01 	lds	r18, 0x0195	; 0x800195 <__brkval>
     fc4:	30 91 96 01 	lds	r19, 0x0196	; 0x800196 <__brkval+0x1>
     fc8:	28 17       	cp	r18, r24
     fca:	39 07       	cpc	r19, r25
     fcc:	51 f5       	brne	.+84     	; 0x1022 <free+0x88>
     fce:	f0 93 96 01 	sts	0x0196, r31	; 0x800196 <__brkval+0x1>
     fd2:	e0 93 95 01 	sts	0x0195, r30	; 0x800195 <__brkval>
     fd6:	67 c0       	rjmp	.+206    	; 0x10a6 <free+0x10c>
     fd8:	ed 01       	movw	r28, r26
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	ce 17       	cp	r28, r30
     fe0:	df 07       	cpc	r29, r31
     fe2:	40 f4       	brcc	.+16     	; 0xff4 <free+0x5a>
     fe4:	4a 81       	ldd	r20, Y+2	; 0x02
     fe6:	5b 81       	ldd	r21, Y+3	; 0x03
     fe8:	9e 01       	movw	r18, r28
     fea:	41 15       	cp	r20, r1
     fec:	51 05       	cpc	r21, r1
     fee:	f1 f0       	breq	.+60     	; 0x102c <free+0x92>
     ff0:	ea 01       	movw	r28, r20
     ff2:	f5 cf       	rjmp	.-22     	; 0xfde <free+0x44>
     ff4:	d3 83       	std	Z+3, r29	; 0x03
     ff6:	c2 83       	std	Z+2, r28	; 0x02
     ff8:	40 81       	ld	r20, Z
     ffa:	51 81       	ldd	r21, Z+1	; 0x01
     ffc:	84 0f       	add	r24, r20
     ffe:	95 1f       	adc	r25, r21
    1000:	c8 17       	cp	r28, r24
    1002:	d9 07       	cpc	r29, r25
    1004:	59 f4       	brne	.+22     	; 0x101c <free+0x82>
    1006:	88 81       	ld	r24, Y
    1008:	99 81       	ldd	r25, Y+1	; 0x01
    100a:	84 0f       	add	r24, r20
    100c:	95 1f       	adc	r25, r21
    100e:	02 96       	adiw	r24, 0x02	; 2
    1010:	91 83       	std	Z+1, r25	; 0x01
    1012:	80 83       	st	Z, r24
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	9b 81       	ldd	r25, Y+3	; 0x03
    1018:	93 83       	std	Z+3, r25	; 0x03
    101a:	82 83       	std	Z+2, r24	; 0x02
    101c:	21 15       	cp	r18, r1
    101e:	31 05       	cpc	r19, r1
    1020:	29 f4       	brne	.+10     	; 0x102c <free+0x92>
    1022:	f0 93 98 01 	sts	0x0198, r31	; 0x800198 <__flp+0x1>
    1026:	e0 93 97 01 	sts	0x0197, r30	; 0x800197 <__flp>
    102a:	3d c0       	rjmp	.+122    	; 0x10a6 <free+0x10c>
    102c:	e9 01       	movw	r28, r18
    102e:	fb 83       	std	Y+3, r31	; 0x03
    1030:	ea 83       	std	Y+2, r30	; 0x02
    1032:	49 91       	ld	r20, Y+
    1034:	59 91       	ld	r21, Y+
    1036:	c4 0f       	add	r28, r20
    1038:	d5 1f       	adc	r29, r21
    103a:	ec 17       	cp	r30, r28
    103c:	fd 07       	cpc	r31, r29
    103e:	61 f4       	brne	.+24     	; 0x1058 <free+0xbe>
    1040:	80 81       	ld	r24, Z
    1042:	91 81       	ldd	r25, Z+1	; 0x01
    1044:	84 0f       	add	r24, r20
    1046:	95 1f       	adc	r25, r21
    1048:	02 96       	adiw	r24, 0x02	; 2
    104a:	e9 01       	movw	r28, r18
    104c:	99 83       	std	Y+1, r25	; 0x01
    104e:	88 83       	st	Y, r24
    1050:	82 81       	ldd	r24, Z+2	; 0x02
    1052:	93 81       	ldd	r25, Z+3	; 0x03
    1054:	9b 83       	std	Y+3, r25	; 0x03
    1056:	8a 83       	std	Y+2, r24	; 0x02
    1058:	e0 e0       	ldi	r30, 0x00	; 0
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	12 96       	adiw	r26, 0x02	; 2
    105e:	8d 91       	ld	r24, X+
    1060:	9c 91       	ld	r25, X
    1062:	13 97       	sbiw	r26, 0x03	; 3
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	19 f0       	breq	.+6      	; 0x106e <free+0xd4>
    1068:	fd 01       	movw	r30, r26
    106a:	dc 01       	movw	r26, r24
    106c:	f7 cf       	rjmp	.-18     	; 0x105c <free+0xc2>
    106e:	8d 91       	ld	r24, X+
    1070:	9c 91       	ld	r25, X
    1072:	11 97       	sbiw	r26, 0x01	; 1
    1074:	9d 01       	movw	r18, r26
    1076:	2e 5f       	subi	r18, 0xFE	; 254
    1078:	3f 4f       	sbci	r19, 0xFF	; 255
    107a:	82 0f       	add	r24, r18
    107c:	93 1f       	adc	r25, r19
    107e:	20 91 95 01 	lds	r18, 0x0195	; 0x800195 <__brkval>
    1082:	30 91 96 01 	lds	r19, 0x0196	; 0x800196 <__brkval+0x1>
    1086:	28 17       	cp	r18, r24
    1088:	39 07       	cpc	r19, r25
    108a:	69 f4       	brne	.+26     	; 0x10a6 <free+0x10c>
    108c:	30 97       	sbiw	r30, 0x00	; 0
    108e:	29 f4       	brne	.+10     	; 0x109a <free+0x100>
    1090:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <__flp+0x1>
    1094:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <__flp>
    1098:	02 c0       	rjmp	.+4      	; 0x109e <free+0x104>
    109a:	13 82       	std	Z+3, r1	; 0x03
    109c:	12 82       	std	Z+2, r1	; 0x02
    109e:	b0 93 96 01 	sts	0x0196, r27	; 0x800196 <__brkval+0x1>
    10a2:	a0 93 95 01 	sts	0x0195, r26	; 0x800195 <__brkval>
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	08 95       	ret

000010ac <strnlen_P>:
    10ac:	fc 01       	movw	r30, r24
    10ae:	05 90       	lpm	r0, Z+
    10b0:	61 50       	subi	r22, 0x01	; 1
    10b2:	70 40       	sbci	r23, 0x00	; 0
    10b4:	01 10       	cpse	r0, r1
    10b6:	d8 f7       	brcc	.-10     	; 0x10ae <strnlen_P+0x2>
    10b8:	80 95       	com	r24
    10ba:	90 95       	com	r25
    10bc:	8e 0f       	add	r24, r30
    10be:	9f 1f       	adc	r25, r31
    10c0:	08 95       	ret

000010c2 <memset>:
    10c2:	dc 01       	movw	r26, r24
    10c4:	01 c0       	rjmp	.+2      	; 0x10c8 <memset+0x6>
    10c6:	6d 93       	st	X+, r22
    10c8:	41 50       	subi	r20, 0x01	; 1
    10ca:	50 40       	sbci	r21, 0x00	; 0
    10cc:	e0 f7       	brcc	.-8      	; 0x10c6 <memset+0x4>
    10ce:	08 95       	ret

000010d0 <strnlen>:
    10d0:	fc 01       	movw	r30, r24
    10d2:	61 50       	subi	r22, 0x01	; 1
    10d4:	70 40       	sbci	r23, 0x00	; 0
    10d6:	01 90       	ld	r0, Z+
    10d8:	01 10       	cpse	r0, r1
    10da:	d8 f7       	brcc	.-10     	; 0x10d2 <strnlen+0x2>
    10dc:	80 95       	com	r24
    10de:	90 95       	com	r25
    10e0:	8e 0f       	add	r24, r30
    10e2:	9f 1f       	adc	r25, r31
    10e4:	08 95       	ret

000010e6 <fputc>:
    10e6:	0f 93       	push	r16
    10e8:	1f 93       	push	r17
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	fb 01       	movw	r30, r22
    10f0:	23 81       	ldd	r18, Z+3	; 0x03
    10f2:	21 fd       	sbrc	r18, 1
    10f4:	03 c0       	rjmp	.+6      	; 0x10fc <fputc+0x16>
    10f6:	8f ef       	ldi	r24, 0xFF	; 255
    10f8:	9f ef       	ldi	r25, 0xFF	; 255
    10fa:	2c c0       	rjmp	.+88     	; 0x1154 <fputc+0x6e>
    10fc:	22 ff       	sbrs	r18, 2
    10fe:	16 c0       	rjmp	.+44     	; 0x112c <fputc+0x46>
    1100:	46 81       	ldd	r20, Z+6	; 0x06
    1102:	57 81       	ldd	r21, Z+7	; 0x07
    1104:	24 81       	ldd	r18, Z+4	; 0x04
    1106:	35 81       	ldd	r19, Z+5	; 0x05
    1108:	42 17       	cp	r20, r18
    110a:	53 07       	cpc	r21, r19
    110c:	44 f4       	brge	.+16     	; 0x111e <fputc+0x38>
    110e:	a0 81       	ld	r26, Z
    1110:	b1 81       	ldd	r27, Z+1	; 0x01
    1112:	9d 01       	movw	r18, r26
    1114:	2f 5f       	subi	r18, 0xFF	; 255
    1116:	3f 4f       	sbci	r19, 0xFF	; 255
    1118:	31 83       	std	Z+1, r19	; 0x01
    111a:	20 83       	st	Z, r18
    111c:	8c 93       	st	X, r24
    111e:	26 81       	ldd	r18, Z+6	; 0x06
    1120:	37 81       	ldd	r19, Z+7	; 0x07
    1122:	2f 5f       	subi	r18, 0xFF	; 255
    1124:	3f 4f       	sbci	r19, 0xFF	; 255
    1126:	37 83       	std	Z+7, r19	; 0x07
    1128:	26 83       	std	Z+6, r18	; 0x06
    112a:	14 c0       	rjmp	.+40     	; 0x1154 <fputc+0x6e>
    112c:	8b 01       	movw	r16, r22
    112e:	ec 01       	movw	r28, r24
    1130:	fb 01       	movw	r30, r22
    1132:	00 84       	ldd	r0, Z+8	; 0x08
    1134:	f1 85       	ldd	r31, Z+9	; 0x09
    1136:	e0 2d       	mov	r30, r0
    1138:	09 95       	icall
    113a:	89 2b       	or	r24, r25
    113c:	e1 f6       	brne	.-72     	; 0x10f6 <fputc+0x10>
    113e:	d8 01       	movw	r26, r16
    1140:	16 96       	adiw	r26, 0x06	; 6
    1142:	8d 91       	ld	r24, X+
    1144:	9c 91       	ld	r25, X
    1146:	17 97       	sbiw	r26, 0x07	; 7
    1148:	01 96       	adiw	r24, 0x01	; 1
    114a:	17 96       	adiw	r26, 0x07	; 7
    114c:	9c 93       	st	X, r25
    114e:	8e 93       	st	-X, r24
    1150:	16 97       	sbiw	r26, 0x06	; 6
    1152:	ce 01       	movw	r24, r28
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	1f 91       	pop	r17
    115a:	0f 91       	pop	r16
    115c:	08 95       	ret

0000115e <__ultoa_invert>:
    115e:	fa 01       	movw	r30, r20
    1160:	aa 27       	eor	r26, r26
    1162:	28 30       	cpi	r18, 0x08	; 8
    1164:	51 f1       	breq	.+84     	; 0x11ba <__ultoa_invert+0x5c>
    1166:	20 31       	cpi	r18, 0x10	; 16
    1168:	81 f1       	breq	.+96     	; 0x11ca <__ultoa_invert+0x6c>
    116a:	e8 94       	clt
    116c:	6f 93       	push	r22
    116e:	6e 7f       	andi	r22, 0xFE	; 254
    1170:	6e 5f       	subi	r22, 0xFE	; 254
    1172:	7f 4f       	sbci	r23, 0xFF	; 255
    1174:	8f 4f       	sbci	r24, 0xFF	; 255
    1176:	9f 4f       	sbci	r25, 0xFF	; 255
    1178:	af 4f       	sbci	r26, 0xFF	; 255
    117a:	b1 e0       	ldi	r27, 0x01	; 1
    117c:	3e d0       	rcall	.+124    	; 0x11fa <__ultoa_invert+0x9c>
    117e:	b4 e0       	ldi	r27, 0x04	; 4
    1180:	3c d0       	rcall	.+120    	; 0x11fa <__ultoa_invert+0x9c>
    1182:	67 0f       	add	r22, r23
    1184:	78 1f       	adc	r23, r24
    1186:	89 1f       	adc	r24, r25
    1188:	9a 1f       	adc	r25, r26
    118a:	a1 1d       	adc	r26, r1
    118c:	68 0f       	add	r22, r24
    118e:	79 1f       	adc	r23, r25
    1190:	8a 1f       	adc	r24, r26
    1192:	91 1d       	adc	r25, r1
    1194:	a1 1d       	adc	r26, r1
    1196:	6a 0f       	add	r22, r26
    1198:	71 1d       	adc	r23, r1
    119a:	81 1d       	adc	r24, r1
    119c:	91 1d       	adc	r25, r1
    119e:	a1 1d       	adc	r26, r1
    11a0:	20 d0       	rcall	.+64     	; 0x11e2 <__ultoa_invert+0x84>
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <__ultoa_invert+0x48>
    11a4:	68 94       	set
    11a6:	3f 91       	pop	r19
    11a8:	2a e0       	ldi	r18, 0x0A	; 10
    11aa:	26 9f       	mul	r18, r22
    11ac:	11 24       	eor	r1, r1
    11ae:	30 19       	sub	r19, r0
    11b0:	30 5d       	subi	r19, 0xD0	; 208
    11b2:	31 93       	st	Z+, r19
    11b4:	de f6       	brtc	.-74     	; 0x116c <__ultoa_invert+0xe>
    11b6:	cf 01       	movw	r24, r30
    11b8:	08 95       	ret
    11ba:	46 2f       	mov	r20, r22
    11bc:	47 70       	andi	r20, 0x07	; 7
    11be:	40 5d       	subi	r20, 0xD0	; 208
    11c0:	41 93       	st	Z+, r20
    11c2:	b3 e0       	ldi	r27, 0x03	; 3
    11c4:	0f d0       	rcall	.+30     	; 0x11e4 <__ultoa_invert+0x86>
    11c6:	c9 f7       	brne	.-14     	; 0x11ba <__ultoa_invert+0x5c>
    11c8:	f6 cf       	rjmp	.-20     	; 0x11b6 <__ultoa_invert+0x58>
    11ca:	46 2f       	mov	r20, r22
    11cc:	4f 70       	andi	r20, 0x0F	; 15
    11ce:	40 5d       	subi	r20, 0xD0	; 208
    11d0:	4a 33       	cpi	r20, 0x3A	; 58
    11d2:	18 f0       	brcs	.+6      	; 0x11da <__ultoa_invert+0x7c>
    11d4:	49 5d       	subi	r20, 0xD9	; 217
    11d6:	31 fd       	sbrc	r19, 1
    11d8:	40 52       	subi	r20, 0x20	; 32
    11da:	41 93       	st	Z+, r20
    11dc:	02 d0       	rcall	.+4      	; 0x11e2 <__ultoa_invert+0x84>
    11de:	a9 f7       	brne	.-22     	; 0x11ca <__ultoa_invert+0x6c>
    11e0:	ea cf       	rjmp	.-44     	; 0x11b6 <__ultoa_invert+0x58>
    11e2:	b4 e0       	ldi	r27, 0x04	; 4
    11e4:	a6 95       	lsr	r26
    11e6:	97 95       	ror	r25
    11e8:	87 95       	ror	r24
    11ea:	77 95       	ror	r23
    11ec:	67 95       	ror	r22
    11ee:	ba 95       	dec	r27
    11f0:	c9 f7       	brne	.-14     	; 0x11e4 <__ultoa_invert+0x86>
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	61 05       	cpc	r22, r1
    11f6:	71 05       	cpc	r23, r1
    11f8:	08 95       	ret
    11fa:	9b 01       	movw	r18, r22
    11fc:	ac 01       	movw	r20, r24
    11fe:	0a 2e       	mov	r0, r26
    1200:	06 94       	lsr	r0
    1202:	57 95       	ror	r21
    1204:	47 95       	ror	r20
    1206:	37 95       	ror	r19
    1208:	27 95       	ror	r18
    120a:	ba 95       	dec	r27
    120c:	c9 f7       	brne	.-14     	; 0x1200 <__ultoa_invert+0xa2>
    120e:	62 0f       	add	r22, r18
    1210:	73 1f       	adc	r23, r19
    1212:	84 1f       	adc	r24, r20
    1214:	95 1f       	adc	r25, r21
    1216:	a0 1d       	adc	r26, r0
    1218:	08 95       	ret

0000121a <__prologue_saves__>:
    121a:	2f 92       	push	r2
    121c:	3f 92       	push	r3
    121e:	4f 92       	push	r4
    1220:	5f 92       	push	r5
    1222:	6f 92       	push	r6
    1224:	7f 92       	push	r7
    1226:	8f 92       	push	r8
    1228:	9f 92       	push	r9
    122a:	af 92       	push	r10
    122c:	bf 92       	push	r11
    122e:	cf 92       	push	r12
    1230:	df 92       	push	r13
    1232:	ef 92       	push	r14
    1234:	ff 92       	push	r15
    1236:	0f 93       	push	r16
    1238:	1f 93       	push	r17
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	ca 1b       	sub	r28, r26
    1244:	db 0b       	sbc	r29, r27
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	cd bf       	out	0x3d, r28	; 61
    1250:	09 94       	ijmp

00001252 <__epilogue_restores__>:
    1252:	2a 88       	ldd	r2, Y+18	; 0x12
    1254:	39 88       	ldd	r3, Y+17	; 0x11
    1256:	48 88       	ldd	r4, Y+16	; 0x10
    1258:	5f 84       	ldd	r5, Y+15	; 0x0f
    125a:	6e 84       	ldd	r6, Y+14	; 0x0e
    125c:	7d 84       	ldd	r7, Y+13	; 0x0d
    125e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1260:	9b 84       	ldd	r9, Y+11	; 0x0b
    1262:	aa 84       	ldd	r10, Y+10	; 0x0a
    1264:	b9 84       	ldd	r11, Y+9	; 0x09
    1266:	c8 84       	ldd	r12, Y+8	; 0x08
    1268:	df 80       	ldd	r13, Y+7	; 0x07
    126a:	ee 80       	ldd	r14, Y+6	; 0x06
    126c:	fd 80       	ldd	r15, Y+5	; 0x05
    126e:	0c 81       	ldd	r16, Y+4	; 0x04
    1270:	1b 81       	ldd	r17, Y+3	; 0x03
    1272:	aa 81       	ldd	r26, Y+2	; 0x02
    1274:	b9 81       	ldd	r27, Y+1	; 0x01
    1276:	ce 0f       	add	r28, r30
    1278:	d1 1d       	adc	r29, r1
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
    1284:	ed 01       	movw	r28, r26
    1286:	08 95       	ret

00001288 <_exit>:
    1288:	f8 94       	cli

0000128a <__stop_program>:
    128a:	ff cf       	rjmp	.-2      	; 0x128a <__stop_program>
